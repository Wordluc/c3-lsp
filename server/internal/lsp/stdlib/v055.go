package stdlib

import (
	symbols "github.com/pherrymason/c3-lsp/pkg/symbols"
	symbolstable "github.com/pherrymason/c3-lsp/pkg/symbols_table"
)

func Load_v055_stdlib() symbolstable.UnitModules {
	docId := "_stdlib"
	moduleCollection := map[string]*symbols.Module{
		"libc":                                     symbols.NewModuleBuilder("libc", "<stdlib-path>/libc/os/posix.c3").WithoutSourceCode().Build(),
		"libc::errno":                              symbols.NewModuleBuilder("libc::errno", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build(),
		"libc::os":                                 symbols.NewModuleBuilder("libc::os", "<stdlib-path>/libc/os/errno.c3").WithoutSourceCode().Build(),
		"std::ascii":                               symbols.NewModuleBuilder("std::ascii", "<stdlib-path>/ascii.c3").WithoutSourceCode().Build(),
		"std::atomic":                              symbols.NewModuleBuilder("std::atomic", "<stdlib-path>/atomic.c3").WithoutSourceCode().Build(),
		"std::atomic::types":                       symbols.NewModuleBuilder("std::atomic::types", "<stdlib-path>/atomic.c3").WithoutSourceCode().Build(),
		"std::bits":                                symbols.NewModuleBuilder("std::bits", "<stdlib-path>/bits.c3").WithoutSourceCode().Build(),
		"std::collections::bitset":                 symbols.NewModuleBuilder("std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithoutSourceCode().Build(),
		"std::collections::enummap":                symbols.NewModuleBuilder("std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithoutSourceCode().Build(),
		"std::collections::enumset":                symbols.NewModuleBuilder("std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithoutSourceCode().Build(),
		"std::collections::enumset::private":       symbols.NewModuleBuilder("std::collections::enumset::private", "<stdlib-path>/collections/enumset.c3").WithoutSourceCode().Build(),
		"std::collections::generic_list":           symbols.NewModuleBuilder("std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithoutSourceCode().Build(),
		"std::collections::growablebitset":         symbols.NewModuleBuilder("std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithoutSourceCode().Build(),
		"std::collections::linkedlist":             symbols.NewModuleBuilder("std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithoutSourceCode().Build(),
		"std::collections::list":                   symbols.NewModuleBuilder("std::collections::list", "<stdlib-path>/collections/list.c3").WithoutSourceCode().Build(),
		"std::collections::map":                    symbols.NewModuleBuilder("std::collections::map", "<stdlib-path>/collections/map.c3").WithoutSourceCode().Build(),
		"std::collections::maybe":                  symbols.NewModuleBuilder("std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithoutSourceCode().Build(),
		"std::collections::object":                 symbols.NewModuleBuilder("std::collections::object", "<stdlib-path>/collections/object.c3").WithoutSourceCode().Build(),
		"std::collections::priorityqueue":          symbols.NewModuleBuilder("std::collections::priorityqueue", "<stdlib-path>/collections/priorityqueue.c3").WithoutSourceCode().Build(),
		"std::collections::priorityqueue::private": symbols.NewModuleBuilder("std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithoutSourceCode().Build(),
		"std::collections::range":                  symbols.NewModuleBuilder("std::collections::range", "<stdlib-path>/collections/range.c3").WithoutSourceCode().Build(),
		"std::collections::ringbuffer":             symbols.NewModuleBuilder("std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithoutSourceCode().Build(),
		"std::collections::triple":                 symbols.NewModuleBuilder("std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithoutSourceCode().Build(),
		"std::collections::tuple":                  symbols.NewModuleBuilder("std::collections::tuple", "<stdlib-path>/collections/tuple.c3").WithoutSourceCode().Build(),
		"std::core::array":                         symbols.NewModuleBuilder("std::core::array", "<stdlib-path>/core/array.c3").WithoutSourceCode().Build(),
		"std::core::array::slice":                  symbols.NewModuleBuilder("std::core::array::slice", "<stdlib-path>/core/array.c3").WithoutSourceCode().Build(),
		"std::core::bitorder":                      symbols.NewModuleBuilder("std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build(),
		"std::core::builtin":                       symbols.NewModuleBuilder("std::core::builtin", "<stdlib-path>/core/builtin.c3").WithoutSourceCode().Build(),
		"std::core::cinterop":                      symbols.NewModuleBuilder("std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithoutSourceCode().Build(),
		"std::core::cpudetect":                     symbols.NewModuleBuilder("std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithoutSourceCode().Build(),
		"std::core::dstring":                       symbols.NewModuleBuilder("std::core::dstring", "<stdlib-path>/core/dstring.c3").WithoutSourceCode().Build(),
		"std::core::env":                           symbols.NewModuleBuilder("std::core::env", "<stdlib-path>/core/env.c3").WithoutSourceCode().Build(),
		"std::core::main_stub":                     symbols.NewModuleBuilder("std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithoutSourceCode().Build(),
		"std::core::mem":                           symbols.NewModuleBuilder("std::core::mem", "<stdlib-path>/core/mem.c3").WithoutSourceCode().Build(),
		"std::core::mem::allocator":                symbols.NewModuleBuilder("std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithoutSourceCode().Build(),
		"std::core::runtime":                       symbols.NewModuleBuilder("std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build(),
		"std::core::string":                        symbols.NewModuleBuilder("std::core::string", "<stdlib-path>/core/string.c3").WithoutSourceCode().Build(),
		"std::core::string::conv":                  symbols.NewModuleBuilder("std::core::string::conv", "<stdlib-path>/core/conv.c3").WithoutSourceCode().Build(),
		"std::core::string::iterator":              symbols.NewModuleBuilder("std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithoutSourceCode().Build(),
		"std::core::types":                         symbols.NewModuleBuilder("std::core::types", "<stdlib-path>/core/types.c3").WithoutSourceCode().Build(),
		"std::core::values":                        symbols.NewModuleBuilder("std::core::values", "<stdlib-path>/core/values.c3").WithoutSourceCode().Build(),
		"std::crypto":                              symbols.NewModuleBuilder("std::crypto", "<stdlib-path>/crypto/crypto.c3").WithoutSourceCode().Build(),
		"std::crypto::rc4":                         symbols.NewModuleBuilder("std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithoutSourceCode().Build(),
		"std::encoding::base64":                    symbols.NewModuleBuilder("std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithoutSourceCode().Build(),
		"std::encoding::csv":                       symbols.NewModuleBuilder("std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithoutSourceCode().Build(),
		"std::encoding::json":                      symbols.NewModuleBuilder("std::encoding::json", "<stdlib-path>/encoding/json.c3").WithoutSourceCode().Build(),
		"std::hash::adler32":                       symbols.NewModuleBuilder("std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithoutSourceCode().Build(),
		"std::hash::crc32":                         symbols.NewModuleBuilder("std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithoutSourceCode().Build(),
		"std::hash::crc64":                         symbols.NewModuleBuilder("std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithoutSourceCode().Build(),
		"std::hash::fnv32a":                        symbols.NewModuleBuilder("std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithoutSourceCode().Build(),
		"std::hash::fnv64a":                        symbols.NewModuleBuilder("std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithoutSourceCode().Build(),
		"std::hash::sha1":                          symbols.NewModuleBuilder("std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithoutSourceCode().Build(),
		"std::io":                                  symbols.NewModuleBuilder("std::io", "<stdlib-path>/io/formatter_private.c3").WithoutSourceCode().Build(),
		"std::io::file":                            symbols.NewModuleBuilder("std::io::file", "<stdlib-path>/io/file.c3").WithoutSourceCode().Build(),
		"std::io::os":                              symbols.NewModuleBuilder("std::io::os", "<stdlib-path>/io/os/chdir.c3").WithoutSourceCode().Build(),
		"std::io::path":                            symbols.NewModuleBuilder("std::io::path", "<stdlib-path>/io/path.c3").WithoutSourceCode().Build(),
		"std::math":                                symbols.NewModuleBuilder("std::math", "<stdlib-path>/math/math_libc.c3").WithoutSourceCode().Build(),
		"std::math::complex":                       symbols.NewModuleBuilder("std::math::complex", "<stdlib-path>/math/math_complex.c3").WithoutSourceCode().Build(),
		"std::math::easing":                        symbols.NewModuleBuilder("std::math::easing", "<stdlib-path>/math/math_easings.c3").WithoutSourceCode().Build(),
		"std::math::matrix":                        symbols.NewModuleBuilder("std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithoutSourceCode().Build(),
		"std::math::nolibc":                        symbols.NewModuleBuilder("std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cos.c3").WithoutSourceCode().Build(),
		"std::math::quaternion":                    symbols.NewModuleBuilder("std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithoutSourceCode().Build(),
		"std::math::random":                        symbols.NewModuleBuilder("std::math::random", "<stdlib-path>/math/random/math.seeder.c3").WithoutSourceCode().Build(),
		"std::math::vector":                        symbols.NewModuleBuilder("std::math::vector", "<stdlib-path>/math/math_vector.c3").WithoutSourceCode().Build(),
		"std::net":                                 symbols.NewModuleBuilder("std::net", "<stdlib-path>/net/inetaddr.c3").WithoutSourceCode().Build(),
		"std::net::os":                             symbols.NewModuleBuilder("std::net::os", "<stdlib-path>/net/os/win32.c3").WithoutSourceCode().Build(),
		"std::net::tcp":                            symbols.NewModuleBuilder("std::net::tcp", "<stdlib-path>/net/tcp.c3").WithoutSourceCode().Build(),
		"std::net::udp":                            symbols.NewModuleBuilder("std::net::udp", "<stdlib-path>/net/udp.c3").WithoutSourceCode().Build(),
		"std::os":                                  symbols.NewModuleBuilder("std::os", "<stdlib-path>/os/cpu.c3").WithoutSourceCode().Build(),
		"std::os::backtrace":                       symbols.NewModuleBuilder("std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithoutSourceCode().Build(),
		"std::os::darwin":                          symbols.NewModuleBuilder("std::os::darwin", "<stdlib-path>/os/macos/heap.c3").WithoutSourceCode().Build(),
		"std::os::env":                             symbols.NewModuleBuilder("std::os::env", "<stdlib-path>/os/env.c3").WithoutSourceCode().Build(),
		"std::os::linux":                           symbols.NewModuleBuilder("std::os::linux", "<stdlib-path>/os/linux/heap.c3").WithoutSourceCode().Build(),
		"std::os::macos::cf":                       symbols.NewModuleBuilder("std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithoutSourceCode().Build(),
		"std::os::macos::objc":                     symbols.NewModuleBuilder("std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithoutSourceCode().Build(),
		"std::os::posix":                           symbols.NewModuleBuilder("std::os::posix", "<stdlib-path>/os/posix/heap.c3").WithoutSourceCode().Build(),
		"std::os::process":                         symbols.NewModuleBuilder("std::os::process", "<stdlib-path>/os/subprocess.c3").WithoutSourceCode().Build(),
		"std::os::win32":                           symbols.NewModuleBuilder("std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build(),
		"std::os::win32::wsa":                      symbols.NewModuleBuilder("std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").WithoutSourceCode().Build(),
		"std::sort":                                symbols.NewModuleBuilder("std::sort", "<stdlib-path>/sort/quicksort.c3").WithoutSourceCode().Build(),
		"std::sort::qs":                            symbols.NewModuleBuilder("std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithoutSourceCode().Build(),
		"std::thread":                              symbols.NewModuleBuilder("std::thread", "<stdlib-path>/threads/thread.c3").WithoutSourceCode().Build(),
		"std::thread::cpu":                         symbols.NewModuleBuilder("std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").WithoutSourceCode().Build(),
		"std::thread::os":                          symbols.NewModuleBuilder("std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithoutSourceCode().Build(),
		"std::thread::pool":                        symbols.NewModuleBuilder("std::thread::pool", "<stdlib-path>/threads/pool.c3").WithoutSourceCode().Build(),
		"std::time":                                symbols.NewModuleBuilder("std::time", "<stdlib-path>/time/time.c3").WithoutSourceCode().Build(),
		"std::time::clock":                         symbols.NewModuleBuilder("std::time::clock", "<stdlib-path>/time/clock.c3").WithoutSourceCode().Build(),
		"std::time::datetime":                      symbols.NewModuleBuilder("std::time::datetime", "<stdlib-path>/time/datetime.c3").WithoutSourceCode().Build(),
		"std::time::os":                            symbols.NewModuleBuilder("std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithoutSourceCode().Build(),
	}
	parsedModules := symbolstable.NewParsedModules(&docId)
	for _, mod := range moduleCollection {
		parsedModules.RegisterModule(mod)
	}
	var module *symbols.Module

	// Define module std::ascii
	module = moduleCollection["std::ascii"]
	module.AddFunction(symbols.NewFunctionBuilder("in_range_m", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_lower_m", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_upper_m", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_digit_m", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bdigit_m", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_odigit_m", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_xdigit_m", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alpha_m", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_print_m", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_graph_m", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_space_m", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alnum_m", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_punct_m", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_blank_m", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_cntrl_m", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_lower_m", symbols.NewTypeFromString("", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_upper_m", symbols.NewTypeFromString("", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "", "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("in_range", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_lower", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_upper", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_digit", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bdigit", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_odigit", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_xdigit", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alpha", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_print", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_graph", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_space", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alnum", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_punct", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_blank", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_cntrl", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_lower", symbols.NewTypeFromString("char", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_upper", symbols.NewTypeFromString("char", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("in_range", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_lower", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_upper", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_digit", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bdigit", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_odigit", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_xdigit", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alpha", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_print", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_graph", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_space", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alnum", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_punct", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_blank", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_cntrl", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_lower", symbols.NewTypeFromString("char", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_upper", symbols.NewTypeFromString("char", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_hex", symbols.NewTypeFromString("char", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", "char", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("in_range", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_lower", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_upper", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_digit", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bdigit", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_odigit", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_xdigit", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alpha", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_print", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_graph", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_space", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alnum", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_punct", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_blank", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_cntrl", symbols.NewTypeFromString("bool", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_lower", symbols.NewTypeFromString("uint", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_upper", symbols.NewTypeFromString("uint", "std::ascii"), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", "uint", "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build())

	// Define module std::atomic::types
	module = moduleCollection["std::atomic::types"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::atomic::types", "<stdlib-path>/atomic.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("Atomic", "std::atomic::types", "<stdlib-path>/atomic.c3").WithStructMember("data", "Type", "std::atomic::types", "<stdlib-path>/atomic.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.load", symbols.NewTypeFromString("Type", "std::atomic::types"), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", "Atomic", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", "AtomicOrdering", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.store", symbols.NewTypeFromString("void", "std::atomic::types"), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", "Atomic", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", "AtomicOrdering", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.add", symbols.NewTypeFromString("Type", "std::atomic::types"), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", "Atomic", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", "AtomicOrdering", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.sub", symbols.NewTypeFromString("Type", "std::atomic::types"), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", "Atomic", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", "AtomicOrdering", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.mul", symbols.NewTypeFromString("Type", "std::atomic::types"), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", "Atomic", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", "AtomicOrdering", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.div", symbols.NewTypeFromString("Type", "std::atomic::types"), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", "Atomic", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", "AtomicOrdering", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.max", symbols.NewTypeFromString("Type", "std::atomic::types"), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", "Atomic", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", "AtomicOrdering", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.min", symbols.NewTypeFromString("Type", "std::atomic::types"), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", "Atomic", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", "AtomicOrdering", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.or", symbols.NewTypeFromString("Type", "std::atomic::types"), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", "Atomic", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "uint", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", "AtomicOrdering", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("xor", symbols.NewTypeFromString("Type", "std::atomic::types"), "std::atomic::types", "<stdlib-path>/atomic.c3").WithTypeIdentifier("Atomic").WithArgument(symbols.NewVariableBuilder("self", "Atomic", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "uint", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", "AtomicOrdering", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.and", symbols.NewTypeFromString("Type", "std::atomic::types"), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", "Atomic", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "uint", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", "AtomicOrdering", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.shift_right", symbols.NewTypeFromString("Type", "std::atomic::types"), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", "Atomic", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", "uint", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", "AtomicOrdering", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.shift_left", symbols.NewTypeFromString("Type", "std::atomic::types"), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", "Atomic", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", "uint", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", "AtomicOrdering", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@atomic_exec", symbols.NewTypeFromString("", "std::atomic::types"), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", "", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", "", "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::atomic
	module = moduleCollection["std::atomic"]
	module.AddFunction(symbols.NewFunctionBuilder("fetch_add", symbols.NewTypeFromString("", "std::atomic"), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "AtomicOrdering", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "bool", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", "usz", "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_sub", symbols.NewTypeFromString("", "std::atomic"), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "AtomicOrdering", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "bool", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", "usz", "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_mul", symbols.NewTypeFromString("", "std::atomic"), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "AtomicOrdering", "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_div", symbols.NewTypeFromString("", "std::atomic"), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "AtomicOrdering", "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_or", symbols.NewTypeFromString("", "std::atomic"), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "AtomicOrdering", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "bool", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", "usz", "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_xor", symbols.NewTypeFromString("", "std::atomic"), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "AtomicOrdering", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "bool", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", "usz", "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_and", symbols.NewTypeFromString("", "std::atomic"), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "AtomicOrdering", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "bool", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", "usz", "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_shift_right", symbols.NewTypeFromString("", "std::atomic"), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "AtomicOrdering", "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_shift_left", symbols.NewTypeFromString("", "std::atomic"), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "AtomicOrdering", "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flag_set", symbols.NewTypeFromString("", "std::atomic"), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "AtomicOrdering", "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flag_clear", symbols.NewTypeFromString("", "std::atomic"), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "AtomicOrdering", "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_max", symbols.NewTypeFromString("", "std::atomic"), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "AtomicOrdering", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "bool", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", "usz", "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_min", symbols.NewTypeFromString("", "std::atomic"), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "AtomicOrdering", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "bool", "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", "usz", "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::atomic
	module = moduleCollection["std::atomic"]
	module.AddFunction(symbols.NewFunctionBuilder("@__atomic_compare_exchange_ordering_failure", symbols.NewTypeFromString("", "std::atomic"), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("expected", "", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("desired", "", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("failure", "", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg5", "", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@__atomic_compare_exchange_ordering_success", symbols.NewTypeFromString("", "std::atomic"), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("expected", "", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("desired", "", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("success", "", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("failure", "", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg5", "", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__atomic_compare_exchange", symbols.NewTypeFromString("CInt", "std::atomic"), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").WithArgument(symbols.NewVariableBuilder("size", "CInt", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "any", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("expected", "any", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("desired", "any", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("success", "CInt", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("failure", "CInt", "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithoutSourceCode().Build())

	// Define module std::bits
	module = moduleCollection["std::bits"]
	module.AddFunction(symbols.NewFunctionBuilder("reverse", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("i", "", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bswap", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("i", "", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].fshl", symbols.NewTypeFromString("uint[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].fshr", symbols.NewTypeFromString("uint[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].rotl", symbols.NewTypeFromString("uint[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].rotr", symbols.NewTypeFromString("uint[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].fshl", symbols.NewTypeFromString("int[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].fshr", symbols.NewTypeFromString("int[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].rotl", symbols.NewTypeFromString("int[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].rotr", symbols.NewTypeFromString("int[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ushort[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ushort[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ushort[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].fshl", symbols.NewTypeFromString("ushort[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].fshr", symbols.NewTypeFromString("ushort[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].rotl", symbols.NewTypeFromString("ushort[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ushort[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].rotr", symbols.NewTypeFromString("ushort[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ushort[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "short[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "short[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "short[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].fshl", symbols.NewTypeFromString("short[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].fshr", symbols.NewTypeFromString("short[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].rotl", symbols.NewTypeFromString("short[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "short[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].rotr", symbols.NewTypeFromString("short[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "short[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "char[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "char[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "char[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].fshl", symbols.NewTypeFromString("char[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].fshr", symbols.NewTypeFromString("char[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].rotl", symbols.NewTypeFromString("char[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "char[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].rotr", symbols.NewTypeFromString("char[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "char[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ichar[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ichar[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ichar[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].fshl", symbols.NewTypeFromString("ichar[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].fshr", symbols.NewTypeFromString("ichar[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].rotl", symbols.NewTypeFromString("ichar[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ichar[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].rotr", symbols.NewTypeFromString("ichar[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ichar[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ulong[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ulong[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ulong[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].fshl", symbols.NewTypeFromString("ulong[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].fshr", symbols.NewTypeFromString("ulong[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].rotl", symbols.NewTypeFromString("ulong[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ulong[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].rotr", symbols.NewTypeFromString("ulong[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ulong[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "long[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "long[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "long[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].fshl", symbols.NewTypeFromString("long[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].fshr", symbols.NewTypeFromString("long[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].rotl", symbols.NewTypeFromString("long[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "long[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].rotr", symbols.NewTypeFromString("long[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "long[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint128[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint128[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint128[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].fshl", symbols.NewTypeFromString("uint128[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].fshr", symbols.NewTypeFromString("uint128[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].rotl", symbols.NewTypeFromString("uint128[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint128[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].rotr", symbols.NewTypeFromString("uint128[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint128[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int128[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int128[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int128[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].fshl", symbols.NewTypeFromString("int128[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].fshr", symbols.NewTypeFromString("int128[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].rotl", symbols.NewTypeFromString("int128[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int128[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].rotr", symbols.NewTypeFromString("int128[]", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int128[<*>]", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.fshl", symbols.NewTypeFromString("uint", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.fshr", symbols.NewTypeFromString("uint", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.rotl", symbols.NewTypeFromString("uint", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.rotr", symbols.NewTypeFromString("uint", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "uint", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.fshl", symbols.NewTypeFromString("int", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.fshr", symbols.NewTypeFromString("int", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.rotl", symbols.NewTypeFromString("int", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.rotr", symbols.NewTypeFromString("int", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "int", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.fshl", symbols.NewTypeFromString("ushort", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.fshr", symbols.NewTypeFromString("ushort", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.rotl", symbols.NewTypeFromString("ushort", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.rotr", symbols.NewTypeFromString("ushort", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ushort", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.fshl", symbols.NewTypeFromString("short", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.fshr", symbols.NewTypeFromString("short", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.rotl", symbols.NewTypeFromString("short", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.rotr", symbols.NewTypeFromString("short", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "short", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.fshl", symbols.NewTypeFromString("char", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.fshr", symbols.NewTypeFromString("char", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.rotl", symbols.NewTypeFromString("char", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.rotr", symbols.NewTypeFromString("char", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "char", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.fshl", symbols.NewTypeFromString("ichar", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.fshr", symbols.NewTypeFromString("ichar", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.rotl", symbols.NewTypeFromString("ichar", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.rotr", symbols.NewTypeFromString("ichar", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ichar", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.fshl", symbols.NewTypeFromString("ulong", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.fshr", symbols.NewTypeFromString("ulong", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.rotl", symbols.NewTypeFromString("ulong", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.rotr", symbols.NewTypeFromString("ulong", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "ulong", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.fshl", symbols.NewTypeFromString("long", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.fshr", symbols.NewTypeFromString("long", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.rotl", symbols.NewTypeFromString("long", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.rotr", symbols.NewTypeFromString("long", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "long", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.fshl", symbols.NewTypeFromString("uint128", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.fshr", symbols.NewTypeFromString("uint128", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.rotl", symbols.NewTypeFromString("uint128", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.rotr", symbols.NewTypeFromString("uint128", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "uint128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.popcount", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.ctz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.clz", symbols.NewTypeFromString("", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.fshl", symbols.NewTypeFromString("int128", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.fshr", symbols.NewTypeFromString("int128", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", "", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.rotl", symbols.NewTypeFromString("int128", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.rotr", symbols.NewTypeFromString("int128", "std::bits"), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", "int128", "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::collections::bitset
	module = moduleCollection["std::collections::bitset"]
	module.AddVariable(symbols.NewVariableBuilder("BITS", "", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).AddVariable(symbols.NewVariableBuilder("SZ", "", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).AddStruct(symbols.NewStructBuilder("BitSet", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithStructMember("data", "Type", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Type", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cardinality", symbols.NewTypeFromString("usz", "std::collections::bitset"), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", "BitSet", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewTypeFromString("void", "std::collections::bitset"), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", "BitSet", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "usz", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unset", symbols.NewTypeFromString("void", "std::collections::bitset"), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", "BitSet", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "usz", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeFromString("bool", "std::collections::bitset"), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", "BitSet", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "usz", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewTypeFromString("usz", "std::collections::bitset"), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", "BitSet", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_bool", symbols.NewTypeFromString("void", "std::collections::bitset"), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", "BitSet", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "usz", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "bool", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::growablebitset
	module = moduleCollection["std::collections::growablebitset"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("BITS", "", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).AddStruct(symbols.NewStructBuilder("GrowableBitSet", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithStructMember("data", "GrowableBitSetList", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("GrowableBitSetList", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeFromString("GrowableBitSet*", "std::collections::growablebitset"), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", "GrowableBitSet", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_new", symbols.NewTypeFromString("GrowableBitSet*", "std::collections::growablebitset"), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", "GrowableBitSet", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeFromString("GrowableBitSet*", "std::collections::growablebitset"), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", "GrowableBitSet", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_temp", symbols.NewTypeFromString("GrowableBitSet*", "std::collections::growablebitset"), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", "GrowableBitSet", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::collections::growablebitset"), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", "GrowableBitSet", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cardinality", symbols.NewTypeFromString("usz", "std::collections::growablebitset"), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", "GrowableBitSet", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewTypeFromString("void", "std::collections::growablebitset"), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", "GrowableBitSet", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "usz", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unset", symbols.NewTypeFromString("void", "std::collections::growablebitset"), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", "GrowableBitSet", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "usz", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeFromString("bool", "std::collections::growablebitset"), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", "GrowableBitSet", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "usz", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewTypeFromString("usz", "std::collections::growablebitset"), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", "GrowableBitSet", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_bool", symbols.NewTypeFromString("void", "std::collections::growablebitset"), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", "GrowableBitSet", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "usz", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "bool", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::enummap
	module = moduleCollection["std::collections::enummap"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"Enum":      symbols.NewGenericParameter("Enum", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"ValueType": symbols.NewGenericParameter("ValueType", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddStruct(symbols.NewStructBuilder("EnumMap", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithStructMember("values", "ValueType", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::collections::enummap"), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", "EnumMap", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_value", "ValueType", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewTypeFromString("usz!", "std::collections::enummap"), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", "EnumMap", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", "Formatter", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeFromString("String", "std::collections::enummap"), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", "EnumMap", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tstring", symbols.NewTypeFromString("String", "std::collections::enummap"), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", "EnumMap", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewTypeFromString("usz", "std::collections::enummap"), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", "EnumMap", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeFromString("ValueType", "std::collections::enummap"), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", "EnumMap", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "Enum", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ref", symbols.NewTypeFromString("ValueType*", "std::collections::enummap"), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", "EnumMap", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "Enum", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewTypeFromString("void", "std::collections::enummap"), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", "EnumMap", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "Enum", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "ValueType", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::enumset
	module = moduleCollection["std::collections::enumset"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Enum": symbols.NewGenericParameter("Enum", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("IS_CHAR_ARRAY", "", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).AddDef(symbols.NewDefBuilder("EnumSetType", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add", symbols.NewTypeFromString("void", "std::collections::enumset"), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", "Enum", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewTypeFromString("void", "std::collections::enumset"), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewTypeFromString("bool", "std::collections::enumset"), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", "Enum", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has", symbols.NewTypeFromString("bool", "std::collections::enumset"), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", "Enum", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all", symbols.NewTypeFromString("void", "std::collections::enumset"), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_all", symbols.NewTypeFromString("void", "std::collections::enumset"), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_all", symbols.NewTypeFromString("void", "std::collections::enumset"), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("and_of", symbols.NewTypeFromString("EnumSet", "std::collections::enumset"), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("or_of", symbols.NewTypeFromString("EnumSet", "std::collections::enumset"), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_of", symbols.NewTypeFromString("EnumSet", "std::collections::enumset"), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("xor_of", symbols.NewTypeFromString("EnumSet", "std::collections::enumset"), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewTypeFromString("usz!", "std::collections::enumset"), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("set", "", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", "Formatter", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeFromString("String", "std::collections::enumset"), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("set", "", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tstring", symbols.NewTypeFromString("String", "std::collections::enumset"), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("set", "", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::enumset::private
	module = moduleCollection["std::collections::enumset::private"]
	module.AddFunction(symbols.NewFunctionBuilder("type_for_enum_elements", symbols.NewTypeFromString("typeid", "std::collections::enumset::private"), "std::collections::enumset::private", "<stdlib-path>/collections/enumset.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "usz", "std::collections::enumset::private", "<stdlib-path>/collections/enumset.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::collections::generic_list
	module = moduleCollection["std::collections::generic_list"]
	module.AddStruct(symbols.NewStructBuilder("GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithStructMember("size", "usz", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithStructMember("capacity", "usz", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithStructMember("allocator", "Allocator", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithStructMember("entries", "any", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("GenericPredicate", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithResolvesTo("fn bool(any* value)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("GenericTest", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithResolvesTo("fn bool(any* type, any* context)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeFromString("GenericList*", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_new", symbols.NewTypeFromString("GenericList*", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeFromString("GenericList*", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewTypeFromString("usz!", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", "Formatter", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeFromString("String", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tstring", symbols.NewTypeFromString("String", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("GenericList.push", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", "", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_internal", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", "any", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_element", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", "any", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("GenericList.pop", symbols.NewTypeFromString("", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_pop", symbols.NewTypeFromString("any*!", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_pop", symbols.NewTypeFromString("any*!", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop_retained", symbols.NewTypeFromString("any*!", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("GenericList.pop_first", symbols.NewTypeFromString("", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop_first_retained", symbols.NewTypeFromString("any*!", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_pop_first", symbols.NewTypeFromString("any*!", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_pop_first", symbols.NewTypeFromString("any*!", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_at", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reverse", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("array_view", symbols.NewTypeFromString("any*[]", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("GenericList.push_front", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", "", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("GenericList.insert_at", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", "", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_at_internal", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "any", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("GenericList.first", symbols.NewTypeFromString("", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("first_any", symbols.NewTypeFromString("any*!", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("GenericList.last", symbols.NewTypeFromString("", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("last_any", symbols.NewTypeFromString("any*!", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewTypeFromString("bool", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewTypeFromString("usz", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("GenericList.get", symbols.NewTypeFromString("", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_any", symbols.NewTypeFromString("any*", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("swap", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "usz", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("j", "usz", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_if", symbols.NewTypeFromString("usz", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", "GenericPredicate", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_if", symbols.NewTypeFromString("usz", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("selection", "GenericPredicate", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("GenericList._remove_if", symbols.NewTypeFromString("usz", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", "GenericPredicate", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "bool", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_using_test", symbols.NewTypeFromString("usz", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", "GenericTest", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", "any", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_using_test", symbols.NewTypeFromString("usz", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", "GenericTest", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", "any", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("GenericList._remove_using_test", symbols.NewTypeFromString("usz", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", "GenericTest", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "bool", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("ctx", "", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reserve", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("min_capacity", "usz", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("GenericList.@item_at", symbols.NewTypeFromString("any*", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("GenericList.set", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ensure_capacity", symbols.NewTypeFromString("void", "std::collections::generic_list"), "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").WithTypeIdentifier("GenericList").WithArgument(symbols.NewVariableBuilder("self", "GenericList", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithArgument(symbols.NewVariableBuilder("added", "usz", "std::collections::generic_list", "<stdlib-path>/collections/generic_list.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::linkedlist
	module = moduleCollection["std::collections::linkedlist"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("allocator", "Allocator", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("size", "usz", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("_first", "Node", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("_last", "Node", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Node", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("next", "Node", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("prev", "Node", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("value", "Type", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewTypeFromString("void", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_last", symbols.NewTypeFromString("void", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeFromString("LinkedList*", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_new", symbols.NewTypeFromString("LinkedList*", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeFromString("LinkedList*", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_temp", symbols.NewTypeFromString("LinkedList*", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedList.free_node", symbols.NewTypeFromString("void", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("node", "Node", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedList.alloc_node", symbols.NewTypeFromString("Node*", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("link_first", symbols.NewTypeFromString("void", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("link_last", symbols.NewTypeFromString("void", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("peek", symbols.NewTypeFromString("Type!", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("peek_last", symbols.NewTypeFromString("Type!", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("first", symbols.NewTypeFromString("Type!", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("last", symbols.NewTypeFromString("Type!", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewTypeFromString("void", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewTypeFromString("usz", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedList.node_at_index", symbols.NewTypeFromString("Node*", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeFromString("Type", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewTypeFromString("void", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", "Type", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewTypeFromString("void", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert", symbols.NewTypeFromString("void", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", "Type", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("link_before", symbols.NewTypeFromString("void", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("succ", "Node", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlink_first", symbols.NewTypeFromString("void", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_value", symbols.NewTypeFromString("bool", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("t", "Type", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last_value", symbols.NewTypeFromString("bool", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("t", "Type", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop", symbols.NewTypeFromString("Type!", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last", symbols.NewTypeFromString("void!", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first", symbols.NewTypeFromString("void!", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlink_last", symbols.NewTypeFromString("void", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlink", symbols.NewTypeFromString("void", "std::collections::linkedlist"), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", "LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", "Node", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::list
	module = moduleCollection["std::collections::list"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::list", "<stdlib-path>/collections/list.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("ELEMENT_IS_EQUATABLE", "", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).AddVariable(symbols.NewVariableBuilder("ELEMENT_IS_POINTER", "", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).AddStruct(symbols.NewStructBuilder("List", "std::collections::list", "<stdlib-path>/collections/list.c3").WithStructMember("size", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").WithStructMember("capacity", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").WithStructMember("allocator", "Allocator", "std::collections::list", "<stdlib-path>/collections/list.c3").WithStructMember("entries", "Type", "std::collections::list", "<stdlib-path>/collections/list.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ElementPredicate", "std::collections::list", "<stdlib-path>/collections/list.c3").WithResolvesTo("fn bool(Type *type)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ElementTest", "std::collections::list", "<stdlib-path>/collections/list.c3").WithResolvesTo("fn bool(Type *type, any* context)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeFromString("List*", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_new", symbols.NewTypeFromString("List*", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeFromString("List*", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_temp", symbols.NewTypeFromString("List*", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_wrapping_array", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("types", "Type", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewTypeFromString("usz!", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", "Formatter", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeFromString("String", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tstring", symbols.NewTypeFromString("String", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", "Type", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", "Type", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop", symbols.NewTypeFromString("Type", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop_first", symbols.NewTypeFromString("Type", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_at", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_array", symbols.NewTypeFromString("Type[]", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tarray", symbols.NewTypeFromString("Type[]", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reverse", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("array_view", symbols.NewTypeFromString("Type[]", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_array", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("array", "Type", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_front", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", "Type", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_at", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", "Type", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_at", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", "Type", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("first", symbols.NewTypeFromString("Type*", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("last", symbols.NewTypeFromString("Type*", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewTypeFromString("bool", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("byte_size", symbols.NewTypeFromString("usz", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewTypeFromString("usz", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeFromString("Type", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("swap", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("j", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_if", symbols.NewTypeFromString("usz", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", "ElementPredicate", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_if", symbols.NewTypeFromString("usz", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("selection", "ElementPredicate", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("List._remove_if", symbols.NewTypeFromString("usz", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", "ElementPredicate", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "bool", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_using_test", symbols.NewTypeFromString("usz", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", "ElementTest", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", "any", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_using_test", symbols.NewTypeFromString("usz", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", "ElementTest", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", "any", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("List._remove_using_test", symbols.NewTypeFromString("usz", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", "ElementTest", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "bool", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("ctx", "", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reserve", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("min_capacity", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("List.@item_at", symbols.NewTypeFromString("Type", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ref", symbols.NewTypeFromString("Type*", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ensure_capacity", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("added", "usz", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_of", symbols.NewTypeFromString("usz!", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", "Type", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rindex_of", symbols.NewTypeFromString("usz!", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", "Type", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewTypeFromString("bool", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains", symbols.NewTypeFromString("bool", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewTypeFromString("usz", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_all", symbols.NewTypeFromString("void", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compact_count", symbols.NewTypeFromString("usz", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compact", symbols.NewTypeFromString("usz", "std::collections::list"), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", "List", "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::map
	module = moduleCollection["std::collections::map"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"Key":   symbols.NewGenericParameter("Key", "std::collections::map", "<stdlib-path>/collections/map.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Value": symbols.NewGenericParameter("Value", "std::collections::map", "<stdlib-path>/collections/map.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddVariable(symbols.NewVariableBuilder("COPY_KEYS", "bool", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).AddVariable(symbols.NewVariableBuilder("DEFAULT_INITIAL_CAPACITY", "uint", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).AddVariable(symbols.NewVariableBuilder("DEFAULT_LOAD_FACTOR", "float", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAXIMUM_CAPACITY", "uint", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).AddVariable(symbols.NewVariableBuilder("VALUE_IS_EQUATABLE", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).AddStruct(symbols.NewStructBuilder("Entry", "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("hash", "uint", "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("key", "Key", "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("value", "Value", "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("next", "Entry", "std::collections::map", "<stdlib-path>/collections/map.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("HashMap", "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("table", "Entry", "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("allocator", "Allocator", "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("count", "uint", "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("threshold", "uint", "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("load_factor", "float", "std::collections::map", "<stdlib-path>/collections/map.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeFromString("HashMap*", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", "HashMap", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", "uint", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", "float", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_new", symbols.NewTypeFromString("HashMap*", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", "uint", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", "float", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeFromString("HashMap*", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", "HashMap", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", "uint", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", "float", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_temp", symbols.NewTypeFromString("HashMap*", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", "uint", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", "float", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_initialized", symbols.NewTypeFromString("bool", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init_from_map", symbols.NewTypeFromString("HashMap*", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", "HashMap", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_map", "HashMap", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_new_from_map", symbols.NewTypeFromString("HashMap*", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", "HashMap", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_map", "HashMap", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init_from_map", symbols.NewTypeFromString("HashMap*", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_map", "HashMap", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_temp_from_map", symbols.NewTypeFromString("HashMap*", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_map", "HashMap", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewTypeFromString("bool", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewTypeFromString("usz", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ref", symbols.NewTypeFromString("Value*!", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "Key", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_entry", symbols.NewTypeFromString("Entry*!", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "Key", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("HashMap.@get_or_set", symbols.NewTypeFromString("Value", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "Key", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "Value", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeFromString("Value!", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "Key", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_key", symbols.NewTypeFromString("bool", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "Key", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewTypeFromString("bool", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "Key", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Value", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewTypeFromString("void!", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "Key", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewTypeFromString("void", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("key_tlist", symbols.NewTypeFromString("Key[]", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("key_new_list", symbols.NewTypeFromString("Key[]", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("HashMap.@each", symbols.NewTypeFromString("", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", "fn void(key, value)", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("HashMap.@each_entry", symbols.NewTypeFromString("", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", "fn void(entry)", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("value_tlist", symbols.NewTypeFromString("Value[]", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("value_new_list", symbols.NewTypeFromString("Value[]", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_value", symbols.NewTypeFromString("bool", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", "Value", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_entry", symbols.NewTypeFromString("void", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("hash", "uint", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "Key", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Value", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("bucket_index", "uint", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewTypeFromString("void", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_capacity", "uint", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rehash", symbols.NewTypeFromString("uint", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("hash", "uint", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_for", symbols.NewTypeFromString("uint", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("hash", "uint", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", "uint", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transfer", symbols.NewTypeFromString("void", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_table", "Entry", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("put_all_for_create", symbols.NewTypeFromString("void", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_map", "HashMap", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("put_for_create", symbols.NewTypeFromString("void", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "Key", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Value", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_internal", symbols.NewTypeFromString("void", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_entry_for_key", symbols.NewTypeFromString("bool", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "Key", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create_entry", symbols.NewTypeFromString("void", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", "", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("hash", "uint", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "Key", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Value", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("bucket_index", "int", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_entry", symbols.NewTypeFromString("void", "std::collections::map"), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", "HashMap", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("entry", "Entry", "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::maybe
	module = moduleCollection["std::collections::maybe"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::maybe", "<stdlib-path>/collections/maybe.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("EMPTY", "Maybe", "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).AddStruct(symbols.NewStructBuilder("Maybe", "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithStructMember("value", "Type", "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithStructMember("has_value", "bool", "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("value", symbols.NewTypeFromString("Maybe", "std::collections::maybe"), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithArgument(symbols.NewVariableBuilder("val", "Type", "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Maybe.get", symbols.NewTypeFromString("Type!", "std::collections::maybe"), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithArgument(symbols.NewVariableBuilder("self", "Maybe", "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::collections::object
	module = moduleCollection["std::collections::object"]
	module.AddVariable(symbols.NewVariableBuilder("FALSE_OBJECT", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).AddVariable(symbols.NewVariableBuilder("NULL_OBJECT", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).AddVariable(symbols.NewVariableBuilder("TRUE_OBJECT", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).AddStruct(symbols.NewStructBuilder("Object", "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("type", "typeid", "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("allocator", "Allocator", "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("i", "uint128", "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("f", "double", "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("b", "bool", "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("s", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("other", "void", "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("array", "ObjectInternalList", "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("map", "ObjectInternalMap", "std::collections::object", "<stdlib-path>/collections/object.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ObjectInternalList", "std::collections::object", "<stdlib-path>/collections/object.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ObjectInternalMap", "std::collections::object", "<stdlib-path>/collections/object.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ObjectInternalMapEntry", "std::collections::object", "<stdlib-path>/collections/object.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewTypeFromString("usz!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", "Formatter", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_obj", symbols.NewTypeFromString("Object*", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_null", symbols.NewTypeFromString("Object*", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_int", symbols.NewTypeFromString("Object*", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("i", "int128", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_enum", symbols.NewTypeFromString("Object*", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("e", "", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_float", symbols.NewTypeFromString("Object*", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("f", "double", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_string", symbols.NewTypeFromString("Object*", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("s", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_bool", symbols.NewTypeFromString("Object*", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("b", "bool", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_null", symbols.NewTypeFromString("bool", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewTypeFromString("bool", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_map", symbols.NewTypeFromString("bool", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_array", symbols.NewTypeFromString("bool", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bool", symbols.NewTypeFromString("bool", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_string", symbols.NewTypeFromString("bool", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_float", symbols.NewTypeFromString("bool", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_int", symbols.NewTypeFromString("bool", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_keyable", symbols.NewTypeFromString("bool", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_indexable", symbols.NewTypeFromString("bool", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_map_if_needed", symbols.NewTypeFromString("void", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_array_if_needed", symbols.NewTypeFromString("void", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_object", symbols.NewTypeFromString("void", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_object", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.object_from_value", symbols.NewTypeFromString("Object*", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.set", symbols.NewTypeFromString("Object*", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.set_at", symbols.NewTypeFromString("Object*", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.append", symbols.NewTypeFromString("Object*", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeFromString("Object*!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_key", symbols.NewTypeFromString("bool", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_at", symbols.NewTypeFromString("Object*", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_len", symbols.NewTypeFromString("usz", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_object", symbols.NewTypeFromString("void", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("to_append", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_object_at", symbols.NewTypeFromString("void", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("to_set", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_integer_value", symbols.NewTypeFromString("", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("value", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.get_integer_at", symbols.NewTypeFromString("", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.get_integer", symbols.NewTypeFromString("", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ichar", symbols.NewTypeFromString("ichar!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_short", symbols.NewTypeFromString("short!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_int", symbols.NewTypeFromString("int!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_long", symbols.NewTypeFromString("long!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_int128", symbols.NewTypeFromString("int128!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ichar_at", symbols.NewTypeFromString("ichar!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_short_at", symbols.NewTypeFromString("short!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_int_at", symbols.NewTypeFromString("int!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_long_at", symbols.NewTypeFromString("long!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_int128_at", symbols.NewTypeFromString("int128!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_char", symbols.NewTypeFromString("char!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ushort", symbols.NewTypeFromString("short!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_uint", symbols.NewTypeFromString("uint!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ulong", symbols.NewTypeFromString("ulong!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_uint128", symbols.NewTypeFromString("uint128!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_char_at", symbols.NewTypeFromString("char!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ushort_at", symbols.NewTypeFromString("ushort!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_uint_at", symbols.NewTypeFromString("uint!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ulong_at", symbols.NewTypeFromString("ulong!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_uint128_at", symbols.NewTypeFromString("uint128!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_string", symbols.NewTypeFromString("String!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_string_at", symbols.NewTypeFromString("String!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.get_enum", symbols.NewTypeFromString("String!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.get_enum_at", symbols.NewTypeFromString("String!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_bool", symbols.NewTypeFromString("bool!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_bool_at", symbols.NewTypeFromString("bool!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_float", symbols.NewTypeFromString("double!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_float_at", symbols.NewTypeFromString("double!", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_or_create_obj", symbols.NewTypeFromString("Object*", "std::collections::object"), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", "Object", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "String", "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::priorityqueue
	module = moduleCollection["std::collections::priorityqueue"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::priorityqueue", "<stdlib-path>/collections/priorityqueue.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))})

	// Define module std::collections::priorityqueue::private
	module = moduleCollection["std::collections::priorityqueue::private"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithStructMember("heap", "Heap", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Heap", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_new", symbols.NewTypeFromString("void", "std::collections::priorityqueue::private"), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", "PrivatePriorityQueue", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeFromString("void", "std::collections::priorityqueue::private"), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", "PrivatePriorityQueue", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeFromString("void", "std::collections::priorityqueue::private"), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", "PrivatePriorityQueue", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_temp", symbols.NewTypeFromString("void", "std::collections::priorityqueue::private"), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", "PrivatePriorityQueue", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewTypeFromString("void", "std::collections::priorityqueue::private"), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", "PrivatePriorityQueue", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", "Type", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop", symbols.NewTypeFromString("Type!", "std::collections::priorityqueue::private"), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", "PrivatePriorityQueue", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("peek", symbols.NewTypeFromString("Type!", "std::collections::priorityqueue::private"), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", "PrivatePriorityQueue", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::collections::priorityqueue::private"), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", "PrivatePriorityQueue", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewTypeFromString("usz", "std::collections::priorityqueue::private"), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", "PrivatePriorityQueue", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewTypeFromString("bool", "std::collections::priorityqueue::private"), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", "PrivatePriorityQueue", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("peek_at", symbols.NewTypeFromString("Type", "std::collections::priorityqueue::private"), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", "PrivatePriorityQueue", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewTypeFromString("usz!", "std::collections::priorityqueue::private"), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", "PrivatePriorityQueue", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", "Formatter", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeFromString("String", "std::collections::priorityqueue::private"), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", "PrivatePriorityQueue", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::range
	module = moduleCollection["std::collections::range"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::range", "<stdlib-path>/collections/range.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("ExclusiveRange", "std::collections::range", "<stdlib-path>/collections/range.c3").WithStructMember("start", "Type", "std::collections::range", "<stdlib-path>/collections/range.c3").WithStructMember("end", "Type", "std::collections::range", "<stdlib-path>/collections/range.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Range", "std::collections::range", "<stdlib-path>/collections/range.c3").WithStructMember("start", "Type", "std::collections::range", "<stdlib-path>/collections/range.c3").WithStructMember("end", "Type", "std::collections::range", "<stdlib-path>/collections/range.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewTypeFromString("usz", "std::collections::range"), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", "Range", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains", symbols.NewTypeFromString("bool", "std::collections::range"), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", "Range", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeFromString("Type", "std::collections::range"), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", "Range", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeFromString("String", "std::collections::range"), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", "Range", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tstring", symbols.NewTypeFromString("String", "std::collections::range"), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", "Range", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewTypeFromString("usz!", "std::collections::range"), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", "Range", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", "Formatter", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewTypeFromString("usz", "std::collections::range"), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", "ExclusiveRange", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains", symbols.NewTypeFromString("bool", "std::collections::range"), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", "ExclusiveRange", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "Type", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewTypeFromString("usz!", "std::collections::range"), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", "ExclusiveRange", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", "Formatter", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeFromString("String", "std::collections::range"), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", "ExclusiveRange", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tstring", symbols.NewTypeFromString("String", "std::collections::range"), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", "ExclusiveRange", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeFromString("Type", "std::collections::range"), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", "ExclusiveRange", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::ringbuffer
	module = moduleCollection["std::collections::ringbuffer"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("RingBuffer", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithStructMember("buf", "Type", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithStructMember("written", "usz", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithStructMember("head", "usz", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::collections::ringbuffer"), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", "RingBuffer", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putc", symbols.NewTypeFromString("void", "std::collections::ringbuffer"), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", "RingBuffer", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "Type", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getc", symbols.NewTypeFromString("Type", "std::collections::ringbuffer"), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", "RingBuffer", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("popc", symbols.NewTypeFromString("Type!", "std::collections::ringbuffer"), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", "RingBuffer", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeFromString("usz", "std::collections::ringbuffer"), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", "RingBuffer", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "Type", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewTypeFromString("void", "std::collections::ringbuffer"), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", "RingBuffer", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "Type", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::tuple
	module = moduleCollection["std::collections::tuple"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"Type1": symbols.NewGenericParameter("Type1", "std::collections::tuple", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type2": symbols.NewGenericParameter("Type2", "std::collections::tuple", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddStruct(symbols.NewStructBuilder("Tuple", "std::collections::tuple", "<stdlib-path>/collections/tuple.c3").WithStructMember("first", "Type1", "std::collections::tuple", "<stdlib-path>/collections/tuple.c3").WithStructMember("second", "Type2", "std::collections::tuple", "<stdlib-path>/collections/tuple.c3").WithoutSourceCode().Build())

	// Define module std::collections::triple
	module = moduleCollection["std::collections::triple"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"Type1": symbols.NewGenericParameter("Type1", "std::collections::triple", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type2": symbols.NewGenericParameter("Type2", "std::collections::triple", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type3": symbols.NewGenericParameter("Type3", "std::collections::triple", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddStruct(symbols.NewStructBuilder("Triple", "std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithStructMember("first", "Type1", "std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithStructMember("second", "Type2", "std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithStructMember("third", "Type3", "std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddStruct(symbols.NewStructBuilder("ArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithStructMember("data", "char", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithStructMember("used", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("ArenaAllocatorHeader", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithStructMember("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithStructMember("data", "char", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", "ArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", "char", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", "ArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", "ArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mark", symbols.NewTypeFromString("usz", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", "ArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", "ArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("mark", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", "ArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("clear", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", "ArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddStruct(symbols.NewStructBuilder("DynamicArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("backing_allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("page", "DynamicArenaPage", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("unused_page", "DynamicArenaPage", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("page_size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("DynamicArenaChunk", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("DynamicArenaPage", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("memory", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("prev_arena", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("total", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("used", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("current_stack_ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", "DynamicArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("page_size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", "DynamicArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", "DynamicArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", "DynamicArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", "DynamicArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("mark", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_alloc_new", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", "DynamicArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", "DynamicArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("clear", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddStruct(symbols.NewStructBuilder("Header", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithStructMember("next", "Header", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithStructMember("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithStructMember("align", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("SimpleHeapAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithStructMember("alloc_fn", "MemoryAllocFn", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithStructMember("free_list", "Header", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", "SimpleHeapAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "MemoryAllocFn", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", "SimpleHeapAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("clear", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", "SimpleHeapAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", "SimpleHeapAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_realloc", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", "SimpleHeapAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_calloc", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", "SimpleHeapAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_alloc", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", "SimpleHeapAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_block", symbols.NewTypeFromString("void!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", "SimpleHeapAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned_bytes", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_free", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", "SimpleHeapAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddVariable(symbols.NewVariableBuilder("LIBC_ALLOCATOR", "LibcAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", "LibcAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("clear", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", "LibcAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_bytes", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", "LibcAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", "LibcAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("clear", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", "LibcAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_bytes", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", "LibcAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", "LibcAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("clear", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", "LibcAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_bytes", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", "LibcAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddStruct(symbols.NewStructBuilder("OnStackAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("backing_allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("data", "char", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("used", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("chunk", "OnStackAllocatorExtraChunk", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("OnStackAllocatorExtraChunk", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("is_aligned", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("prev", "OnStackAllocatorExtraChunk", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("data", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("OnStackAllocatorHeader", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("data", "char", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithTypeIdentifier("OnStackAllocator").WithArgument(symbols.NewVariableBuilder("self", "OnStackAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", "char", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithTypeIdentifier("OnStackAllocator").WithArgument(symbols.NewVariableBuilder("self", "OnStackAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithTypeIdentifier("OnStackAllocator").WithArgument(symbols.NewVariableBuilder("self", "OnStackAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocation_in_stack_mem", symbols.NewTypeFromString("bool", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithArgument(symbols.NewVariableBuilder("a", "OnStackAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("on_stack_allocator_remove_chunk", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithArgument(symbols.NewVariableBuilder("a", "OnStackAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("on_stack_allocator_find_chunk", symbols.NewTypeFromString("OnStackAllocatorExtraChunk*", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithArgument(symbols.NewVariableBuilder("a", "OnStackAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithTypeIdentifier("OnStackAllocator").WithArgument(symbols.NewVariableBuilder("self", "OnStackAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("deprecated", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithTypeIdentifier("OnStackAllocator").WithArgument(symbols.NewVariableBuilder("self", "OnStackAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("clear", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("deprecated", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddVariable(symbols.NewVariableBuilder("PAGE_IS_ALIGNED", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).AddStruct(symbols.NewStructBuilder("TempAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("backing_allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("last_page", "TempAllocatorPage", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("used", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("capacity", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("data", "char", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TempAllocatorChunk", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("data", "char", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TempAllocatorPage", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("prev_page", "TempAllocatorPage", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("start", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("mark", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("ident", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("data", "char", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TempAllocatorPage.pagesize", symbols.NewTypeFromString("usz", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", "TempAllocatorPage", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TempAllocatorPage.is_aligned", symbols.NewTypeFromString("bool", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", "TempAllocatorPage", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_temp_allocator", symbols.NewTypeFromString("TempAllocator*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_temp", symbols.NewTypeFromString("TempAllocator*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mark", symbols.NewTypeFromString("usz", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", "TempAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", "TempAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", "TempAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("mark", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_free_page", symbols.NewTypeFromString("void!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", "TempAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("page", "TempAllocatorPage", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_realloc_page", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", "TempAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("page", "TempAllocatorPage", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", "TempAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("pointer", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("deprecated", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", "TempAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("clear", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("deprecated", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print_pages", symbols.NewTypeFromString("void!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", "TempAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", "File", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddVariable(symbols.NewVariableBuilder("MAX_BACKTRACE", "", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).AddStruct(symbols.NewStructBuilder("Allocation", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("backtrace", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TrackingAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("inner_allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("map", "AllocMap", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("mem_total", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("allocs_total", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("AllocMap", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", "TrackingAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", "TrackingAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocated", symbols.NewTypeFromString("usz", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", "TrackingAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("total_allocated", symbols.NewTypeFromString("usz", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", "TrackingAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("total_allocation_count", symbols.NewTypeFromString("usz", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", "TrackingAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocations_tlist", symbols.NewTypeFromString("Allocation[]", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", "TrackingAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocation_count", symbols.NewTypeFromString("usz", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", "TrackingAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", "TrackingAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("clear", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("deprecated", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", "TrackingAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("deprecated", "usz", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", "TrackingAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", "void", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("is_aligned", "bool", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", "TrackingAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print_report", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", "TrackingAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprint_report", symbols.NewTypeFromString("void!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", "TrackingAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("out", "OutStream", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::array
	module = moduleCollection["std::core::array"]
	module.AddFunction(symbols.NewFunctionBuilder("index_of", symbols.NewTypeFromString("", "std::core::array"), "std::core::array", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("array", "", "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", "", "std::core::array", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("slice2d", symbols.NewTypeFromString("", "std::core::array"), "std::core::array", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("array", "", "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", "", "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("xlen", "", "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("ylen", "", "std::core::array", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rindex_of", symbols.NewTypeFromString("", "std::core::array"), "std::core::array", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("array", "", "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", "", "std::core::array", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("concat_new", symbols.NewTypeFromString("", "std::core::array"), "std::core::array", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("arr1", "", "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("arr2", "", "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::array", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tconcat", symbols.NewTypeFromString("", "std::core::array"), "std::core::array", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("arr1", "", "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("arr2", "", "std::core::array", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::array::slice
	module = moduleCollection["std::core::array::slice"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::core::array::slice", "<stdlib-path>/core/array.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("Slice2d", "std::core::array::slice", "<stdlib-path>/core/array.c3").WithStructMember("ptr", "Type", "std::core::array::slice", "<stdlib-path>/core/array.c3").WithStructMember("inner_len", "usz", "std::core::array::slice", "<stdlib-path>/core/array.c3").WithStructMember("ystart", "usz", "std::core::array::slice", "<stdlib-path>/core/array.c3").WithStructMember("ylen", "usz", "std::core::array::slice", "<stdlib-path>/core/array.c3").WithStructMember("xstart", "usz", "std::core::array::slice", "<stdlib-path>/core/array.c3").WithStructMember("xlen", "usz", "std::core::array::slice", "<stdlib-path>/core/array.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewTypeFromString("usz", "std::core::array::slice"), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithTypeIdentifier("Slice2d").WithArgument(symbols.NewVariableBuilder("self", "Slice2d", "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("count", symbols.NewTypeFromString("usz", "std::core::array::slice"), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithTypeIdentifier("Slice2d").WithArgument(symbols.NewVariableBuilder("self", "Slice2d", "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.@each", symbols.NewTypeFromString("void", "std::core::array::slice"), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("self", "Slice2d", "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", "fn void(usz[<2>], Type)", "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.@each_ref", symbols.NewTypeFromString("void", "std::core::array::slice"), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("self", "Slice2d", "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", "fn void(usz[<2>], Type*)", "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.get", symbols.NewTypeFromString("Type[]", "std::core::array::slice"), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("self", "Slice2d", "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("idy", "usz", "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("slice", symbols.NewTypeFromString("Slice2d", "std::core::array::slice"), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithTypeIdentifier("Slice2d").WithArgument(symbols.NewVariableBuilder("self", "Slice2d", "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", "isz", "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("xlen", "isz", "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "isz", "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("ylen", "isz", "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::bitorder
	module = moduleCollection["std::core::bitorder"]
	module.AddBitstruct(symbols.NewBitstructBuilder("Int128BE", "int128", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", "int128", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("Int128LE", "int128", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", "int128", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("IntBE", "int", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", "int", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("IntLE", "int", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", "int", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("LongBE", "long", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", "long", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("LongLE", "long", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", "long", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("ShortBE", "short", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", "short", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("ShortLE", "short", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", "short", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UInt128BE", "uint128", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", "uint128", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UInt128LE", "uint128", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", "uint128", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UIntBE", "int", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", "uint", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UIntLE", "int", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", "uint", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("ULongBE", "ulong", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", "ulong", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("ULongLE", "ulong", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", "ulong", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UShortBE", "ushort", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", "ushort", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UShortLE", "ushort", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", "ushort", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewTypeFromString("", "std::core::bitorder"), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("bytes", "", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewTypeFromString("", "std::core::bitorder"), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bitorder", symbols.NewTypeFromString("", "std::core::bitorder"), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_array_or_sub_of_char", symbols.NewTypeFromString("bool", "std::core::bitorder"), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("bytes", "", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_arrayptr_or_sub_of_char", symbols.NewTypeFromString("bool", "std::core::bitorder"), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("bytes", "", "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::builtin
	module = moduleCollection["std::core::builtin"]
	module.AddVariable(symbols.NewVariableBuilder("MAX_FRAMEADDRESS", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).AddVariable(symbols.NewVariableBuilder("old_bus_error", "SignalFunction", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).AddVariable(symbols.NewVariableBuilder("old_segmentation_fault", "SignalFunction", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).AddVariable(symbols.NewVariableBuilder("panic", "PanicFn", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).AddDef(symbols.NewDefBuilder("PanicFn", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithResolvesTo("fn void(String message, String file, String function, uint line)").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("PrefetchLocality", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NO_LOCALITY", "<stdlib-path>/core/builtin.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PrefetchLocality").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FAR", "<stdlib-path>/core/builtin.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PrefetchLocality").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NEAR", "<stdlib-path>/core/builtin.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PrefetchLocality").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VERY_NEAR", "<stdlib-path>/core/builtin.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PrefetchLocality").Build()).Build()).AddFault(symbols.NewFaultBuilder("CastResult", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithConstant(symbols.NewFaultConstantBuilder("TYPE_MISMATCH", "std::core::builtin", "../../../assets/c3c/lib/std/core/builtin.c3").WithFaultName("CastResult").Build()).Build()).AddFault(symbols.NewFaultBuilder("IteratorResult", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithConstant(symbols.NewFaultConstantBuilder("NO_MORE_ELEMENT", "std::core::builtin", "../../../assets/c3c/lib/std/core/builtin.c3").WithFaultName("IteratorResult").Build()).Build()).AddFault(symbols.NewFaultBuilder("SearchResult", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithConstant(symbols.NewFaultConstantBuilder("MISSING", "std::core::builtin", "../../../assets/c3c/lib/std/core/builtin.c3").WithFaultName("SearchResult").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("@scope", symbols.NewTypeFromString("void", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("variable", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", "fn void()", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@swap", symbols.NewTypeFromString("void", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("a", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("anycast", symbols.NewTypeFromString("", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("v", "any", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print_backtrace", symbols.NewTypeFromString("bool", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("message", "String", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("backtraces_to_ignore", "int", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("default_panic", symbols.NewTypeFromString("void", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("message", "String", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", "String", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", "String", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", "uint", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("default_panic", symbols.NewTypeFromString("void", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("message", "String", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", "String", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", "String", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", "uint", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("panicf", symbols.NewTypeFromString("void", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("fmt", "String", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", "String", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", "String", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", "uint", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unreachable", symbols.NewTypeFromString("void", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("string", "String", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unsupported", symbols.NewTypeFromString("void", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("string", "String", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("any_make", symbols.NewTypeFromString("", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", "typeid", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("any.retype_to", symbols.NewTypeFromString("", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", "any", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", "typeid", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("any.as_inner", symbols.NewTypeFromString("", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", "any", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bitcast", symbols.NewTypeFromString("", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("expr", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("enum_by_name", symbols.NewTypeFromString("", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("enum_name", "String", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@likely", symbols.NewTypeFromString("bool", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "bool", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@unlikely", symbols.NewTypeFromString("bool", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "bool", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@expect", symbols.NewTypeFromString("", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("expected", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@prefetch", symbols.NewTypeFromString("", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "PrefetchLocality", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "bool", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("swizzle", symbols.NewTypeFromString("", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("v", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("swizzle2", symbols.NewTypeFromString("", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("v", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@catch", symbols.NewTypeFromString("anyfault", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@ok", symbols.NewTypeFromString("bool", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@as_char_view", symbols.NewTypeFromString("char[]", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("value", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.hash", symbols.NewTypeFromString("uint", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", "int", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.hash", symbols.NewTypeFromString("uint", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", "uint", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.hash", symbols.NewTypeFromString("uint", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("s", "short", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.hash", symbols.NewTypeFromString("uint", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("s", "ushort", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.hash", symbols.NewTypeFromString("uint", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.hash", symbols.NewTypeFromString("uint", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("c", "ichar", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.hash", symbols.NewTypeFromString("uint", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", "long", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.hash", symbols.NewTypeFromString("uint", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", "ulong", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.hash", symbols.NewTypeFromString("uint", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", "int128", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.hash", symbols.NewTypeFromString("uint", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", "uint128", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool.hash", symbols.NewTypeFromString("uint", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("b", "bool", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("typeid.hash", symbols.NewTypeFromString("uint", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("t", "typeid", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("String.hash", symbols.NewTypeFromString("uint", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("c", "String", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[].hash", symbols.NewTypeFromString("uint", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("void*.hash", symbols.NewTypeFromString("uint", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_frameaddress", symbols.NewTypeFromString("void*", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("n", "int", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_returnaddress", symbols.NewTypeFromString("void*", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("n", "int", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sig_panic", symbols.NewTypeFromString("void", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("message", "String", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sig_bus_error", symbols.NewTypeFromString("void", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", "CInt", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sig_segmentation_fault", symbols.NewTypeFromString("void", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", "CInt", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("install_signal_handler", symbols.NewTypeFromString("void", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("signal", "CInt", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", "SignalFunction", "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("install_signal_handlers", symbols.NewTypeFromString("void", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithoutSourceCode().Build())

	// Define module std::core::builtin
	module = moduleCollection["std::core::builtin"]
	module.AddFunction(symbols.NewFunctionBuilder("less", symbols.NewTypeFromString("", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", "", "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "", "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("less_eq", symbols.NewTypeFromString("", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", "", "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "", "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("greater", symbols.NewTypeFromString("", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", "", "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "", "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compare_to", symbols.NewTypeFromString("int", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", "", "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "", "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("greater_eq", symbols.NewTypeFromString("", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", "", "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "", "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewTypeFromString("bool", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", "", "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "", "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("min", symbols.NewTypeFromString("", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("max", symbols.NewTypeFromString("", "std::core::builtin"), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::cinterop
	module = moduleCollection["std::core::cinterop"]
	module.AddVariable(symbols.NewVariableBuilder("C_INT_SIZE", "", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).AddVariable(symbols.NewVariableBuilder("C_LONG_LONG_SIZE", "", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).AddVariable(symbols.NewVariableBuilder("C_LONG_SIZE", "", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).AddVariable(symbols.NewVariableBuilder("C_SHORT_SIZE", "", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).AddDef(symbols.NewDefBuilder("CChar", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CInt", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CLong", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CLongLong", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CSChar", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CShort", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CUChar", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CUInt", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CULong", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CULongLong", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CUShort", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("signed_int_from_bitsize", symbols.NewTypeFromString("typeid", "std::core::cinterop"), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "usz", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unsigned_int_from_bitsize", symbols.NewTypeFromString("typeid", "std::core::cinterop"), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "usz", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::string::conv
	module = moduleCollection["std::core::string::conv"]
	module.AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_BITS", "uint", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_CODEPOINT_MASK", "uint", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_GENERIC_MASK", "uint", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_GENERIC_VALUE", "uint", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_HIGH_VALUE", "uint", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_LOW_VALUE", "uint", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_MASK", "uint", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_OFFSET", "uint", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddFunction(symbols.NewFunctionBuilder("char32_to_utf8", symbols.NewTypeFromString("usz!", "std::core::string::conv"), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("c", "Char32", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("output", "char", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char32_to_utf16_unsafe", symbols.NewTypeFromString("void", "std::core::string::conv"), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("c", "Char32", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("output", "Char16", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char16_to_utf8_unsafe", symbols.NewTypeFromString("void!", "std::core::string::conv"), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("ptr", "Char16", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("available", "usz", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("output", "char", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char32_to_utf8_unsafe", symbols.NewTypeFromString("usz", "std::core::string::conv"), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("c", "Char32", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("output", "char", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8_to_char32", symbols.NewTypeFromString("Char32!", "std::core::string::conv"), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("ptr", "char", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8_codepoints", symbols.NewTypeFromString("usz", "std::core::string::conv"), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf8", "String", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8len_for_utf32", symbols.NewTypeFromString("usz", "std::core::string::conv"), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf32", "Char32", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8len_for_utf16", symbols.NewTypeFromString("usz", "std::core::string::conv"), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf16", "Char16", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf16len_for_utf8", symbols.NewTypeFromString("usz", "std::core::string::conv"), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf8", "String", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf16len_for_utf32", symbols.NewTypeFromString("usz", "std::core::string::conv"), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf32", "Char32", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf32to8", symbols.NewTypeFromString("usz!", "std::core::string::conv"), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf32", "Char32", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf8_buffer", "char", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8to32", symbols.NewTypeFromString("usz!", "std::core::string::conv"), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf8", "String", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf32_buffer", "Char32", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf16to8_unsafe", symbols.NewTypeFromString("void!", "std::core::string::conv"), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf16", "Char16", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf8_buffer", "char", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8to32_unsafe", symbols.NewTypeFromString("void!", "std::core::string::conv"), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf8", "String", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf32_buffer", "Char32", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8to16_unsafe", symbols.NewTypeFromString("void!", "std::core::string::conv"), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf8", "String", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf16_buffer", "Char16", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf32to8_unsafe", symbols.NewTypeFromString("void", "std::core::string::conv"), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf32", "Char32", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf8_buffer", "char", "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::dstring
	module = moduleCollection["std::core::dstring"]
	module.AddVariable(symbols.NewVariableBuilder("MIN_CAPACITY", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).AddStruct(symbols.NewStructBuilder("StringData", "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithStructMember("allocator", "Allocator", "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithStructMember("len", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithStructMember("capacity", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithStructMember("chars", "char", "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeFromString("DString", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_new", symbols.NewTypeFromString("DString", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeFromString("DString", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_temp", symbols.NewTypeFromString("DString", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_with_capacity", symbols.NewTypeFromString("DString", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("capacity", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_with_capacity", symbols.NewTypeFromString("DString", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("capacity", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new", symbols.NewTypeFromString("DString", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("c", "String", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_new", symbols.NewTypeFromString("DString", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("s", "String", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_concat", symbols.NewTypeFromString("DString", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_concat", symbols.NewTypeFromString("DString", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_tconcat", symbols.NewTypeFromString("DString", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("zstr_view", symbols.NewTypeFromString("ZString", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("capacity", symbols.NewTypeFromString("usz", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewTypeFromString("usz", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("chop", symbols.NewTypeFromString("void", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeFromString("String", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_utf32", symbols.NewTypeFromString("void", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("chars", "Char32", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewTypeFromString("void", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_repeat", symbols.NewTypeFromString("void", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("times", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_char32", symbols.NewTypeFromString("void", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "Char32", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy", symbols.NewTypeFromString("DString", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy", symbols.NewTypeFromString("DString", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_zstr", symbols.NewTypeFromString("ZString", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_str", symbols.NewTypeFromString("String", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy_str", symbols.NewTypeFromString("String", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewTypeFromString("bool", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_string", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("less", symbols.NewTypeFromString("bool", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_string", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_chars", symbols.NewTypeFromString("void", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", "String", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_utf32", symbols.NewTypeFromString("Char32[]", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_string", symbols.NewTypeFromString("void", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewTypeFromString("void", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewTypeFromString("usz!", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewTypeFromString("void!", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_char", symbols.NewTypeFromString("void", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("delete_range", symbols.NewTypeFromString("void", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("delete", symbols.NewTypeFromString("void", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("DString.append", symbols.NewTypeFromString("void", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_at", symbols.NewTypeFromString("void", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "String", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("appendf", symbols.NewTypeFromString("usz!", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", "String", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", "", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("appendfn", symbols.NewTypeFromString("usz!", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", "String", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", "", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_join", symbols.NewTypeFromString("DString", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("s", "String", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("joiner", "String", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_string_append_fn", symbols.NewTypeFromString("void!", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("data", "void", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("data", symbols.NewTypeFromString("StringData*", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reserve", symbols.NewTypeFromString("void", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("addition", "usz", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_from_stream", symbols.NewTypeFromString("usz!", "std::core::dstring"), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", "DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("reader", "InStream", "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::env
	module = moduleCollection["std::core::env"]
	module.AddVariable(symbols.NewVariableBuilder("AARCH64", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("ARCH_TYPE", "ArchType", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("BENCHMARKING", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("BIG_ENDIAN", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("COMPILER_OPT_LEVEL", "CompilerOptLevel", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("COMPILER_SAFE_MODE", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("DARWIN", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("DEBUG_SYMBOLS", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("DISABLE_BUILTIN_EXPECT", "", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("DISABLE_BUILTIN_PREFETCH", "", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("F128_SUPPORT", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("F16_SUPPORT", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("FREEBSD", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("I128_NATIVE_SUPPORT", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("LIBC", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("LINUX", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("LLVM_VERSION", "usz", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("MEMORY_ENV", "MemoryEnvironment", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("NATIVE_STACKTRACE", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("NETBSD", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_LIBC", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("OPENBSD", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("OS_TYPE", "OsType", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("POSIX", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("TESTING", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("TRACK_MEMORY", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("WASI", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("WASM_NOLIBC", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("WIN32", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("X86", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("X86_64", "bool", "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddEnum(symbols.NewEnumBuilder("ArchType", "", "std::core::env", "<stdlib-path>/core/env.c3").WithEnumerator(symbols.NewEnumeratorBuilder("UNKNOWN", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ARM", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ARMB", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AARCH64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AARCH64_BE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AARCH64_32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ARC", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVR", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BPFEL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BPFEB", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HEXAGON", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MIPS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MIPSEL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MIPS64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MIPS64EL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MSP430", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PPC", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PPC64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PPC64LE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("R600", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMDGCN", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RISCV32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RISCV64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SPARC", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SPARCV9", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SPARCEL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYSTEMZ", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TCE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TCELE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("THUMB", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("THUMBEB", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("X86", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("X86_64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XCORE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NVPTX", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NVPTX64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LE32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LE64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMDIL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMDIL64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HSAIL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HSAIL64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SPIR", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SPIR64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KALIMBA", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHAVE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LANAI", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WASM32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WASM64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RSCRIPT32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RSCRIPT64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).Build()).AddEnum(symbols.NewEnumBuilder("CompilerOptLevel", "", "std::core::env", "<stdlib-path>/core/env.c3").WithEnumerator(symbols.NewEnumeratorBuilder("O0", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CompilerOptLevel").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("O1", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CompilerOptLevel").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("O2", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CompilerOptLevel").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("O3", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CompilerOptLevel").Build()).Build()).AddEnum(symbols.NewEnumBuilder("MemoryEnvironment", "", "std::core::env", "<stdlib-path>/core/env.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NORMAL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MemoryEnvironment").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SMALL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MemoryEnvironment").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TINY", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MemoryEnvironment").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NONE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MemoryEnvironment").Build()).Build()).AddEnum(symbols.NewEnumBuilder("OsType", "", "std::core::env", "<stdlib-path>/core/env.c3").WithEnumerator(symbols.NewEnumeratorBuilder("UNKNOWN", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NONE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANANAS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLOUD_ABI", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DRAGON_FLY", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FREEBSD", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FUCHSIA", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("IOS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KFREEBSD", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LINUX", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PS3", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MACOS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NETBSD", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OPENBSD", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SOLARIS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WIN32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HAIKU", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MINIX", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RTEMS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NACL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CNK", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AIX", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CUDA", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NVOPENCL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMDHSA", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PS4", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ELFIAMCU", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TVOS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WATCHOS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MESA3D", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CONTIKI", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMDPAL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HERMITCORE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HURD", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WASI", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EMSCRIPTEN", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("os_is_darwin", symbols.NewTypeFromString("bool", "std::core::env"), "std::core::env", "<stdlib-path>/core/env.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("os_is_posix", symbols.NewTypeFromString("bool", "std::core::env"), "std::core::env", "<stdlib-path>/core/env.c3").IsMacro().WithoutSourceCode().Build())

	// Define module std::core::mem
	module = moduleCollection["std::core::mem"]
	module.AddVariable(symbols.NewVariableBuilder("DEFAULT_MEM_ALIGNMENT", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAX_MEMORY_ALIGNMENT", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).AddVariable(symbols.NewVariableBuilder("__heap_base", "int", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).AddVariable(symbols.NewVariableBuilder("wasm_allocator", "SimpleHeapAllocator", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).AddStruct(symbols.NewStructBuilder("TempState", "std::core::mem", "<stdlib-path>/core/mem.c3").WithStructMember("old", "TempAllocator", "std::core::mem", "<stdlib-path>/core/mem.c3").WithStructMember("current", "TempAllocator", "std::core::mem", "<stdlib-path>/core/mem.c3").WithStructMember("mark", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("AtomicOrdering", "int", "std::core::mem", "<stdlib-path>/core/mem.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NOT_ATOMIC", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UNORDERED", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RELAXED", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ACQUIRE", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RELEASE", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ACQUIRE_RELEASE", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SEQ_CONSISTENT", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("masked_load", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("passthru", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@masked_load_aligned", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("passthru", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gather", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptrvec", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("passthru", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@gather_aligned", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptrvec", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("passthru", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("masked_store", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@masked_store_aligned", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scatter", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptrvec", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@scatter_aligned", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptrvec", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@volatile_load", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@volatile_store", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@atomic_load", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "AtomicOrdering", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@atomic_store", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "AtomicOrdering", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compare_exchange", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "AtomicOrdering", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", "AtomicOrdering", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg5", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg6", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg7", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compare_exchange_volatile", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "AtomicOrdering", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", "AtomicOrdering", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("aligned_offset", symbols.NewTypeFromString("usz", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("aligned_pointer", symbols.NewTypeFromString("void*", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ptr_is_aligned", symbols.NewTypeFromString("bool", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear_inline", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg5", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg6", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_inline", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg5", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("move", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg5", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("val", "char", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_inline", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("val", "char", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", "bool", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewTypeFromString("bool", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("a", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", "isz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("type_alloc_must_be_aligned", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@scoped", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", "fn void()", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@report_heap_allocs_in_scope", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("@body", "fn void()", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@stack_mem", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", "fn void(Allocator* mem)", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@stack_pool", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", "fn void()", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_push", symbols.NewTypeFromString("TempState", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("other", "TempAllocator", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_pop", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("old_state", "TempState", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@pool", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "TempAllocator", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", "fn void()", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp", symbols.NewTypeFromString("TempAllocator*", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("current_allocator", symbols.NewTypeFromString("Allocator*", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("heap", symbols.NewTypeFromString("Allocator*", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("initialize_wasm_mem", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_tracking_env", symbols.NewTypeFromString("TrackingEnv*", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@clone", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("value", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@tclone", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("value", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc", symbols.NewTypeFromString("void*", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tmalloc", symbols.NewTypeFromString("void*", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_aligned", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_aligned", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_clear", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_temp", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_new", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_alloc", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_temp_clear", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_array", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_array_aligned", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_array", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_array_aligned", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("talloc_array", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_alloc_array", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_array", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_new_array", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_zero_array", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_zero_array", symbols.NewTypeFromString("", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc", symbols.NewTypeFromString("void*", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc_aligned", symbols.NewTypeFromString("void*", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcalloc", symbols.NewTypeFromString("void*", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc", symbols.NewTypeFromString("void*", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc_aligned", symbols.NewTypeFromString("void*", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_aligned", symbols.NewTypeFromString("void", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trealloc", symbols.NewTypeFromString("void*", "std::core::mem"), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddVariable(symbols.NewVariableBuilder("DEFAULT_SIZE_PREFIX", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("DEFAULT_SIZE_PREFIX_ALIGNMENT", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("temp_allocator_pair", "TempAllocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("temp_base_allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("thread_allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("thread_temp_allocator", "TempAllocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddStruct(symbols.NewStructBuilder("AlignedBlock", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithStructMember("len", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithStructMember("start", "void", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TrackingEnv", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithStructMember("file", "String", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithStructMember("function", "String", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithStructMember("line", "uint", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MemoryAllocFn", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithResolvesTo("fn char[]!(usz)").WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("AllocationFailure", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithConstant(symbols.NewFaultConstantBuilder("OUT_OF_MEMORY", "std::core::mem::allocator", "../../../assets/c3c/lib/std/core/mem_allocator.c3").WithFaultName("AllocationFailure").Build()).WithConstant(symbols.NewFaultConstantBuilder("CHUNK_TOO_LARGE", "std::core::mem::allocator", "../../../assets/c3c/lib/std/core/mem_allocator.c3").WithFaultName("AllocationFailure").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("alignment_for_allocation", symbols.NewTypeFromString("usz", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc", symbols.NewTypeFromString("void*", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_try", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc", symbols.NewTypeFromString("void*", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc_try", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc", symbols.NewTypeFromString("void*", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc_try", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_aligned", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc_aligned", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc_aligned", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_aligned", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_try", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_with_padding", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_try", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_with_padding", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_array", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_array_try", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_array_aligned", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_array", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_array_aligned", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_array_try", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clone", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clone_any", symbols.NewTypeFromString("any*", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "any", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Allocator.alloc_checked", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Allocator.calloc_checked", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Allocator.realloc_checked", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Allocator.new_array", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("end_padding", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Allocator.new_array_checked", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("end_padding", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Allocator.new_zero_array", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("end_padding", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Allocator.new_zero_array_checked", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("end_padding", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Allocator.new", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("end_padding", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Allocator.new_checked", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("end_padding", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Allocator.new_clear", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("end_padding", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Allocator.new_clear_checked", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("end_padding", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Allocator.clone", symbols.NewTypeFromString("", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc", symbols.NewTypeFromString("void*", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("Allocator").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc", symbols.NewTypeFromString("void*", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("Allocator").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc", symbols.NewTypeFromString("void*", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("Allocator").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_aligned", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("Allocator").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc_aligned", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("Allocator").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc_aligned", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("Allocator").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("Allocator").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_aligned", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("Allocator").WithArgument(symbols.NewVariableBuilder("self", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@aligned_alloc", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@aligned_free", symbols.NewTypeFromString("void!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", "void", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@aligned_realloc", symbols.NewTypeFromString("void*!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", "void", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create_default_sized_temp_allocator", symbols.NewTypeFromString("TempAllocator*", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("heap", symbols.NewTypeFromString("Allocator*", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp", symbols.NewTypeFromString("TempAllocator*", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_default_temp_allocators", symbols.NewTypeFromString("void", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_allocator_next", symbols.NewTypeFromString("TempAllocator*", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddVariable(symbols.NewVariableBuilder("WASM_BLOCK_SIZE", "usz", "std::core::mem::allocator", "<stdlib-path>/core/os/wasm_memory.c3").Build()).AddVariable(symbols.NewVariableBuilder("wasm_memory", "WasmMemory", "std::core::mem::allocator", "<stdlib-path>/core/os/wasm_memory.c3").Build()).AddStruct(symbols.NewStructBuilder("WasmMemory", "std::core::mem::allocator", "<stdlib-path>/core/os/wasm_memory.c3").WithStructMember("allocation", "usz", "std::core::mem::allocator", "<stdlib-path>/core/os/wasm_memory.c3").WithStructMember("use", "uptr", "std::core::mem::allocator", "<stdlib-path>/core/os/wasm_memory.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocate_block", symbols.NewTypeFromString("char[]!", "std::core::mem::allocator"), "std::core::mem::allocator", "<stdlib-path>/core/os/wasm_memory.c3").WithTypeIdentifier("WasmMemory").WithArgument(symbols.NewVariableBuilder("self", "WasmMemory", "std::core::mem::allocator", "<stdlib-path>/core/os/wasm_memory.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "usz", "std::core::mem::allocator", "<stdlib-path>/core/os/wasm_memory.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::cpudetect
	module = moduleCollection["std::core::cpudetect"]
	module.AddVariable(symbols.NewVariableBuilder("x86_features", "uint128", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).AddStruct(symbols.NewStructBuilder("CpuId", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember("eax", "uint", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember(",", "uint", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember("ebx", "uint", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember(",", "uint", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember("ecx", "uint", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember(",", "uint", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember("edx", "uint", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("X86Feature", "", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithEnumerator(symbols.NewEnumeratorBuilder("ADX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AES", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_BF16", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_COMPLEX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_FP16", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_INT8", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_TILE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX10_1_256", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX10_1_512", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX2", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX5124FMAPS", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX5124VNNIW", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512BF16", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512BITALG", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512BW", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512CD", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512DQ", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512ER", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512F", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512FP16", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512IFMA", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512PF", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VBMI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VBMI2", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VL", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VNNI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VP2INTERSECT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VPOPCNTDQ", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVXIFMA", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVXNECONVERT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVXVNNI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVXVNNIINT16", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVXVNNIINT8", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BMI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BMI2", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLDEMOTE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLFLUSHOPT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLWB", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLZERO", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CMOV", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CMPCCXADD", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CMPXCHG16B", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CX8", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ENQCMD", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("F16C", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FMA", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FMA4", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FSGSBASE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FXSR", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("GFNI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HRESET", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("INVPCID", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KL", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LWP", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LZCNT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MMX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOVBE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOVDIR64B", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOVDIRI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MWAITX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PCLMUL", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PCONFIG", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PKU", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("POPCNT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PREFETCHI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PREFETCHWT1", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PRFCHW", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PTWRITE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RAOINT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RDPID", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RDPRU", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RDRND", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RDSEED", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RTM", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SAHF", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SERIALIZE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SGX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHA", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHA512", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHSTK", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SM3", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SM4", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE2", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE3", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE4_1", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE4_2", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE4_A", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSSE3", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TBM", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TSXLDTRK", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UINTR", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("USERMSR", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VAES", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VPCLMULQDQ", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WAITPKG", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WBNOINVD", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WIDEKL", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("X87", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XOP", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XSAVE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XSAVEC", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XSAVEOPT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XSAVES", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("x86_cpuid", symbols.NewTypeFromString("CpuId", "std::core::cpudetect"), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithArgument(symbols.NewVariableBuilder("eax", "uint", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).WithArgument(symbols.NewVariableBuilder("ecx", "uint", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_feature_if_bit", symbols.NewTypeFromString("void", "std::core::cpudetect"), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithArgument(symbols.NewVariableBuilder("feature", "X86Feature", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).WithArgument(symbols.NewVariableBuilder("register", "uint", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).WithArgument(symbols.NewVariableBuilder("bit", "int", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("x86_initialize_cpu_features", symbols.NewTypeFromString("void", "std::core::cpudetect"), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithoutSourceCode().Build())

	// Define module std::core::main_stub
	module = moduleCollection["std::core::main_stub"]
	module.AddFunction(symbols.NewFunctionBuilder("_strlen", symbols.NewTypeFromString("usz", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("ptr", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_err_main", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "char", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_int_main", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "char", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_void_main", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "char", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("args_to_strings", symbols.NewTypeFromString("String[]", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("argc", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", "char", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_err_main_args", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", "char", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_int_main_args", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", "char", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_void_main_args", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", "char", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_win_command_line_to_argv_w", symbols.NewTypeFromString("Char16*", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("cmd_line", "ushort", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc_ptr", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("win_command_line_to_strings", symbols.NewTypeFromString("String[]", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("cmd_line", "ushort", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wargs_strings", symbols.NewTypeFromString("String[]", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("argc", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", "Char16", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release_wargs", symbols.NewTypeFromString("void", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("list", "String", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_err_main_noargs", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", "void", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", "Char16", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_int_main_noargs", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", "void", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", "Char16", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_void_main_noargs", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", "void", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", "Char16", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_err_main_args", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", "void", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", "Char16", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_int_main_args", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", "void", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", "Char16", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_void_main_args", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", "void", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", "Char16", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_err_main", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", "void", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", "Char16", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_int_main", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", "void", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", "Char16", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_void_main", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", "void", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", "Char16", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@wmain_to_err_main_args", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", "Char16", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@wmain_to_int_main_args", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", "Char16", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@wmain_to_void_main_args", symbols.NewTypeFromString("int", "std::core::main_stub"), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", "int", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", "Char16", "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::runtime
	module = moduleCollection["std::core::runtime"]
	module.AddVariable(symbols.NewVariableBuilder("DEFAULT_BENCHMARK_MAX_ITERATIONS", "", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).AddVariable(symbols.NewVariableBuilder("DEFAULT_BENCHMARK_WARMUP_ITERATIONS", "", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).AddVariable(symbols.NewVariableBuilder("benchmark_max_iterations", "uint", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).AddVariable(symbols.NewVariableBuilder("benchmark_warmup_iterations", "uint", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).AddVariable(symbols.NewVariableBuilder("test_context", "TestContext", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).AddStruct(symbols.NewStructBuilder("AnyStruct", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("ptr", "void", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("type", "typeid", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("BenchmarkUnit", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("name", "String", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("func", "BenchmarkFn", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("SubArrayStruct", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("ptr", "void", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("len", "usz", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TestContext", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("buf", "JmpBuf", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TestUnit", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("name", "String", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("func", "TestFn", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("BenchmarkFn", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithResolvesTo("fn void!()").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("TestFn", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithResolvesTo("fn void!()").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("benchmark_collection_create", symbols.NewTypeFromString("BenchmarkUnit[]", "std::core::runtime"), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_benchmark_warmup_iterations", symbols.NewTypeFromString("void", "std::core::runtime"), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithArgument(symbols.NewVariableBuilder("value", "uint", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_benchmark_max_iterations", symbols.NewTypeFromString("void", "std::core::runtime"), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithArgument(symbols.NewVariableBuilder("value", "uint", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("run_benchmarks", symbols.NewTypeFromString("bool", "std::core::runtime"), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithArgument(symbols.NewVariableBuilder("benchmarks", "BenchmarkUnit", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("default_benchmark_runner", symbols.NewTypeFromString("bool", "std::core::runtime"), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("test_collection_create", symbols.NewTypeFromString("TestUnit[]", "std::core::runtime"), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cmp_test_unit", symbols.NewTypeFromString("int", "std::core::runtime"), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithArgument(symbols.NewVariableBuilder("a", "TestUnit", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "TestUnit", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("test_panic", symbols.NewTypeFromString("void", "std::core::runtime"), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithArgument(symbols.NewVariableBuilder("message", "String", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", "String", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", "String", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", "uint", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("run_tests", symbols.NewTypeFromString("bool", "std::core::runtime"), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithArgument(symbols.NewVariableBuilder("tests", "TestUnit", "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("default_test_runner", symbols.NewTypeFromString("bool", "std::core::runtime"), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__wasm_call_ctors", symbols.NewTypeFromString("void", "std::core::runtime"), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wasm_initialize", symbols.NewTypeFromString("void", "std::core::runtime"), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build())

	// Define module std::core::string
	module = moduleCollection["std::core::string"]
	module.AddVariable(symbols.NewVariableBuilder("SURROGATE_BITS", "uint", "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_CODEPOINT_MASK", "uint", "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_GENERIC_MASK", "uint", "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_HIGH_VALUE", "uint", "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_LOW_VALUE", "uint", "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_MASK", "uint", "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_OFFSET", "uint", "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddStruct(symbols.NewStructBuilder("Splitter", "std::core::string", "<stdlib-path>/core/string.c3").WithStructMember("string", "String", "std::core::string", "<stdlib-path>/core/string.c3").WithStructMember("split", "String", "std::core::string", "<stdlib-path>/core/string.c3").WithStructMember("current", "usz", "std::core::string", "<stdlib-path>/core/string.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Char16", "std::core::string", "<stdlib-path>/core/string.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Char32", "std::core::string", "<stdlib-path>/core/string.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("NumberConversion", "", "std::core::string", "<stdlib-path>/core/string.c3").WithConstant(symbols.NewFaultConstantBuilder("EMPTY_STRING", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("NumberConversion").Build()).WithConstant(symbols.NewFaultConstantBuilder("NEGATIVE_VALUE", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("NumberConversion").Build()).WithConstant(symbols.NewFaultConstantBuilder("MALFORMED_INTEGER", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("NumberConversion").Build()).WithConstant(symbols.NewFaultConstantBuilder("INTEGER_OVERFLOW", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("NumberConversion").Build()).WithConstant(symbols.NewFaultConstantBuilder("MALFORMED_FLOAT", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("NumberConversion").Build()).WithConstant(symbols.NewFaultConstantBuilder("FLOAT_OUT_OF_RANGE", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("NumberConversion").Build()).Build()).AddFault(symbols.NewFaultBuilder("UnicodeResult", "", "std::core::string", "<stdlib-path>/core/string.c3").WithConstant(symbols.NewFaultConstantBuilder("INVALID_UTF8", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("UnicodeResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_UTF16", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("UnicodeResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("CONVERSION_FAILED", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("UnicodeResult").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("tformat", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("fmt", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_format", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("fmt", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char_in_set", symbols.NewTypeFromString("bool", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("set", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("join_new", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("s", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("joiner", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trim", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("string", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("to_trim", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("starts_with", symbols.NewTypeFromString("bool", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("string", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ends_with", symbols.NewTypeFromString("bool", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("string", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strip", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("string", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strip_end", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("string", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("split", symbols.NewTypeFromString("String[]", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", "usz", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tsplit", symbols.NewTypeFromString("String[]", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", "usz", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains", symbols.NewTypeFromString("bool", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_of_char", symbols.NewTypeFromString("usz!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", "char", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rindex_of_char", symbols.NewTypeFromString("usz!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", "char", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_of", symbols.NewTypeFromString("usz!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rindex_of", symbols.NewTypeFromString("usz!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("ZString").WithArgument(symbols.NewVariableBuilder("str", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char_len", symbols.NewTypeFromString("usz", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("ZString").WithArgument(symbols.NewVariableBuilder("str", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewTypeFromString("usz", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("ZString").WithArgument(symbols.NewVariableBuilder("str", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("zstr_copy", symbols.NewTypeFromString("ZString", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("concat", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s1", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tconcat", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s1", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("zstr_tcopy", symbols.NewTypeFromString("ZString", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("ZString").WithArgument(symbols.NewVariableBuilder("z", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("ZString").WithArgument(symbols.NewVariableBuilder("z", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_utf16", symbols.NewTypeFromString("Char16[]!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_temp_utf16", symbols.NewTypeFromString("Char16[]!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_wstring", symbols.NewTypeFromString("WString!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_temp_wstring", symbols.NewTypeFromString("WString!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_utf32", symbols.NewTypeFromString("Char32[]!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_temp_utf32", symbols.NewTypeFromString("Char32[]!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("convert_ascii_to_lower", symbols.NewTypeFromString("void", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_ascii_to_lower", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_ascii_to_lower", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("convert_ascii_to_upper", symbols.NewTypeFromString("void", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_ascii_to_upper", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("iterator", symbols.NewTypeFromString("StringIterator", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_ascii_to_upper", symbols.NewTypeFromString("String", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_from_utf32", symbols.NewTypeFromString("String!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("utf32", "Char32", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_from_utf16", symbols.NewTypeFromString("String!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("utf16", "Char16", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_from_wstring", symbols.NewTypeFromString("String!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("wstring", "WString", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_from_wstring", symbols.NewTypeFromString("String!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("wstring", "WString", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_from_utf16", symbols.NewTypeFromString("String!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("utf16", "Char16", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8_codepoints", symbols.NewTypeFromString("usz", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("String.to_integer", symbols.NewTypeFromString("", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("string", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "int", "std::core::string", "<stdlib-path>/core/string.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_int128", symbols.NewTypeFromString("int128!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "int", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_long", symbols.NewTypeFromString("long!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "int", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_int", symbols.NewTypeFromString("int!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "int", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_short", symbols.NewTypeFromString("short!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "int", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_ichar", symbols.NewTypeFromString("ichar!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "int", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_uint128", symbols.NewTypeFromString("uint128!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "int", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_ulong", symbols.NewTypeFromString("ulong!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "int", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_uint", symbols.NewTypeFromString("uint!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "int", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_ushort", symbols.NewTypeFromString("ushort!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "int", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_uchar", symbols.NewTypeFromString("char!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "int", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_double", symbols.NewTypeFromString("double!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_float", symbols.NewTypeFromString("float!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", "", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("splitter", symbols.NewTypeFromString("Splitter", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("split", "String", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewTypeFromString("void", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("Splitter").WithArgument(symbols.NewVariableBuilder("self", "Splitter", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next", symbols.NewTypeFromString("String!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("Splitter").WithArgument(symbols.NewVariableBuilder("self", "Splitter", "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::string::iterator
	module = moduleCollection["std::core::string::iterator"]
	module.AddStruct(symbols.NewStructBuilder("StringIterator", "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithStructMember("utf8", "String", "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithStructMember("current", "usz", "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewTypeFromString("void", "std::core::string::iterator"), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithTypeIdentifier("StringIterator").WithArgument(symbols.NewVariableBuilder("self", "StringIterator", "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next", symbols.NewTypeFromString("Char32!", "std::core::string::iterator"), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithTypeIdentifier("StringIterator").WithArgument(symbols.NewVariableBuilder("self", "StringIterator", "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::string
	module = moduleCollection["std::core::string"]
	module.AddVariable(symbols.NewVariableBuilder("B1B_DIG", "", "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).AddVariable(symbols.NewVariableBuilder("B1B_MAX", "uint[2]", "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).AddVariable(symbols.NewVariableBuilder("KMAX", "", "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).AddVariable(symbols.NewVariableBuilder("MASK", "", "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).AddFunction(symbols.NewFunctionBuilder("decfloat", symbols.NewTypeFromString("double!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string_to_real.c3").WithArgument(symbols.NewVariableBuilder("chars", "char", "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "int", "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "int", "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("sign", "int", "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hexfloat", symbols.NewTypeFromString("double!", "std::core::string"), "std::core::string", "<stdlib-path>/core/string_to_real.c3").WithArgument(symbols.NewVariableBuilder("chars", "char", "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "int", "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "int", "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("sign", "int", "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("String.to_real", symbols.NewTypeFromString("", "std::core::string"), "std::core::string", "<stdlib-path>/core/string_to_real.c3").WithArgument(symbols.NewVariableBuilder("chars", "", "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::types
	module = moduleCollection["std::core::types"]
	module.AddStruct(symbols.NewStructBuilder("TypeEnum", "std::core::types", "<stdlib-path>/core/types.c3").WithStructMember("type", "TypeKind", "std::core::types", "<stdlib-path>/core/types.c3").WithStructMember("elements", "usz", "std::core::types", "<stdlib-path>/core/types.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("TypeKind", "char", "std::core::types", "<stdlib-path>/core/types.c3").WithEnumerator(symbols.NewEnumeratorBuilder("VOID", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BOOL", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SIGNED_INT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UNSIGNED_INT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FLOAT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TYPEID", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANYFAULT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANY", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ENUM", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FAULT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("STRUCT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UNION", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BITSTRUCT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FUNC", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OPTIONAL", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ARRAY", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SUBARRAY", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VECTOR", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DISTINCT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("POINTER", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).Build()).AddFault(symbols.NewFaultBuilder("ConversionResult", "", "std::core::types", "<stdlib-path>/core/types.c3").WithConstant(symbols.NewFaultConstantBuilder("VALUE_OUT_OF_RANGE", "std::core::types", "../../../assets/c3c/lib/std/core/types.c3").WithFaultName("ConversionResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("VALUE_OUT_OF_UNSIGNED_RANGE", "std::core::types", "../../../assets/c3c/lib/std/core/types.c3").WithFaultName("ConversionResult").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("any_to_int", symbols.NewTypeFromString("", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("v", "any", "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_subtype_of", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithTypeIdentifier("typeid").WithArgument(symbols.NewVariableBuilder("self", "typeid", "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", "typeid", "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_subtype_of", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_numerical", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_int", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithTypeIdentifier("TypeKind").WithArgument(symbols.NewVariableBuilder("kind", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_subarray_convertable", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bool", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_int", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_intlike", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_underlying_int", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_float", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_floatlike", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_vector", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("inner_kind", symbols.NewTypeFromString("TypeKind", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_same", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@has_same", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("may_load_atomic", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lower_to_atomic_compatible_type", symbols.NewTypeFromString("", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_promotable_to_floatlike", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_promotable_to_float", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_same_vector_type", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_equatable_type", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("implements_copy", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_equatable_value", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("value", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_comparable_value", symbols.NewTypeFromString("bool", "std::core::types"), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("value", "", "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::values
	module = moduleCollection["std::core::values"]
	module.AddFunction(symbols.NewFunctionBuilder("@typeid", symbols.NewTypeFromString("typeid", "std::core::values"), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@typekind", symbols.NewTypeFromString("TypeKind", "std::core::values"), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@typeis", symbols.NewTypeFromString("bool", "std::core::values"), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_same_type", symbols.NewTypeFromString("bool", "std::core::values"), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_bool", symbols.NewTypeFromString("bool", "std::core::values"), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_int", symbols.NewTypeFromString("bool", "std::core::values"), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_floatlike", symbols.NewTypeFromString("bool", "std::core::values"), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_float", symbols.NewTypeFromString("bool", "std::core::values"), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_promotable_to_floatlike", symbols.NewTypeFromString("bool", "std::core::values"), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_promotable_to_float", symbols.NewTypeFromString("bool", "std::core::values"), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_vector", symbols.NewTypeFromString("bool", "std::core::values"), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_same_vector_type", symbols.NewTypeFromString("bool", "std::core::values"), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@assign_to", symbols.NewTypeFromString("bool", "std::core::values"), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("promote_int", symbols.NewTypeFromString("", "std::core::values"), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@inner_kind", symbols.NewTypeFromString("TypeKind", "std::core::values"), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::crypto::rc4
	module = moduleCollection["std::crypto::rc4"]
	module.AddStruct(symbols.NewStructBuilder("Rc4", "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithStructMember("i", "uint", "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithStructMember(",", "uint", "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithStructMember("j", "uint", "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithStructMember("state", "char", "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::crypto::rc4"), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithTypeIdentifier("Rc4").WithArgument(symbols.NewVariableBuilder("self", "Rc4", "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", "char", "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("crypt", symbols.NewTypeFromString("void", "std::crypto::rc4"), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithTypeIdentifier("Rc4").WithArgument(symbols.NewVariableBuilder("self", "Rc4", "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithArgument(symbols.NewVariableBuilder("in", "char", "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithArgument(symbols.NewVariableBuilder("out", "char", "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewTypeFromString("void", "std::crypto::rc4"), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithTypeIdentifier("Rc4").WithArgument(symbols.NewVariableBuilder("self", "Rc4", "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithoutSourceCode().Build())

	// Define module std::encoding::base64
	module = moduleCollection["std::encoding::base64"]
	module.AddVariable(symbols.NewVariableBuilder("MASK", "", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddVariable(symbols.NewVariableBuilder("STD_ALPHABET", "", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddVariable(symbols.NewVariableBuilder("URL_ALPHABET", "", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddStruct(symbols.NewStructBuilder("Base64Decoder", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithStructMember("padding", "int", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithStructMember("alphabet", "String", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithStructMember("reverse", "char", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithStructMember("invalid", "char", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Base64Encoder", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithStructMember("padding", "int", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithStructMember("alphabet", "String", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("Base64Error", "", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithConstant(symbols.NewFaultConstantBuilder("DUPLICATE_IN_ALPHABET", "std::encoding::base64", "../../../assets/c3c/lib/std/encoding/base64.c3").WithFaultName("Base64Error").Build()).WithConstant(symbols.NewFaultConstantBuilder("PADDING_IN_ALPHABET", "std::encoding::base64", "../../../assets/c3c/lib/std/encoding/base64.c3").WithFaultName("Base64Error").Build()).WithConstant(symbols.NewFaultConstantBuilder("DESTINATION_TOO_SMALL", "std::encoding::base64", "../../../assets/c3c/lib/std/encoding/base64.c3").WithFaultName("Base64Error").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_PADDING", "std::encoding::base64", "../../../assets/c3c/lib/std/encoding/base64.c3").WithFaultName("Base64Error").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_CHARACTER", "std::encoding::base64", "../../../assets/c3c/lib/std/encoding/base64.c3").WithFaultName("Base64Error").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void!", "std::encoding::base64"), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithTypeIdentifier("Base64Encoder").WithArgument(symbols.NewVariableBuilder("self", "Base64Encoder", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", "String", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", "int", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_len", symbols.NewTypeFromString("usz", "std::encoding::base64"), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithTypeIdentifier("Base64Encoder").WithArgument(symbols.NewVariableBuilder("self", "Base64Encoder", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "usz", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewTypeFromString("usz!", "std::encoding::base64"), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithTypeIdentifier("Base64Encoder").WithArgument(symbols.NewVariableBuilder("self", "Base64Encoder", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", "char", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", "char", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void!", "std::encoding::base64"), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithTypeIdentifier("Base64Decoder").WithArgument(symbols.NewVariableBuilder("self", "Base64Decoder", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", "String", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", "int", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_len", symbols.NewTypeFromString("usz!", "std::encoding::base64"), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithTypeIdentifier("Base64Decoder").WithArgument(symbols.NewVariableBuilder("self", "Base64Decoder", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "usz", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode", symbols.NewTypeFromString("usz!", "std::encoding::base64"), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithTypeIdentifier("Base64Decoder").WithArgument(symbols.NewVariableBuilder("self", "Base64Decoder", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", "char", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", "char", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("check_alphabet", symbols.NewTypeFromString("void!", "std::encoding::base64"), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("alphabet", "String", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", "int", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build())

	// Define module std::encoding::csv
	module = moduleCollection["std::encoding::csv"]
	module.AddStruct(symbols.NewStructBuilder("CsvReader", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithStructMember("stream", "InStream", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithStructMember("separator", "String", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::encoding::csv"), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvReader").WithArgument(symbols.NewVariableBuilder("self", "CsvReader", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "InStream", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("separator", "String", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_new_row", symbols.NewTypeFromString("String[]!", "std::encoding::csv"), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvReader").WithArgument(symbols.NewVariableBuilder("self", "CsvReader", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_new_row_with_allocator", symbols.NewTypeFromString("String[]!", "std::encoding::csv"), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvReader").WithArgument(symbols.NewVariableBuilder("self", "CsvReader", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_temp_row", symbols.NewTypeFromString("String[]!", "std::encoding::csv"), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvReader").WithArgument(symbols.NewVariableBuilder("self", "CsvReader", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("skip_row", symbols.NewTypeFromString("void!", "std::encoding::csv"), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvReader").WithArgument(symbols.NewVariableBuilder("self", "CsvReader", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CsvReader.@each_row", symbols.NewTypeFromString("", "std::encoding::csv"), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithArgument(symbols.NewVariableBuilder("self", "CsvReader", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("rows", "int", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", "fn void(String[] row)", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::encoding::json
	module = moduleCollection["std::encoding::json"]
	module.AddStruct(symbols.NewStructBuilder("JsonContext", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("line", "uint", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("stream", "InStream", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("allocator", "Allocator", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("token", "JsonTokenType", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("last_string", "DString", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("last_number", "double", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("current", "char", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("skip_comments", "bool", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("reached_end", "bool", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("pushed_back", "bool", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("JsonTokenType", "", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NO_TOKEN", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LBRACE", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LBRACKET", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("COMMA", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("COLON", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RBRACE", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RBRACKET", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("STRING", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NUMBER", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TRUE", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FALSE", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NULL", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EOF", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).Build()).AddFault(symbols.NewFaultBuilder("JsonParsingError", "", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithConstant(symbols.NewFaultConstantBuilder("EOF", "std::encoding::json", "../../../assets/c3c/lib/std/encoding/json.c3").WithFaultName("JsonParsingError").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNEXPECTED_CHARACTER", "std::encoding::json", "../../../assets/c3c/lib/std/encoding/json.c3").WithFaultName("JsonParsingError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_ESCAPE_SEQUENCE", "std::encoding::json", "../../../assets/c3c/lib/std/encoding/json.c3").WithFaultName("JsonParsingError").Build()).WithConstant(symbols.NewFaultConstantBuilder("DUPLICATE_MEMBERS", "std::encoding::json", "../../../assets/c3c/lib/std/encoding/json.c3").WithFaultName("JsonParsingError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_NUMBER", "std::encoding::json", "../../../assets/c3c/lib/std/encoding/json.c3").WithFaultName("JsonParsingError").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("parse", symbols.NewTypeFromString("Object*!", "std::encoding::json"), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("s", "InStream", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_from_token", symbols.NewTypeFromString("Object*!", "std::encoding::json"), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", "JsonContext", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("token", "JsonTokenType", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_any", symbols.NewTypeFromString("Object*!", "std::encoding::json"), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", "JsonContext", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lex_number", symbols.NewTypeFromString("JsonTokenType!", "std::encoding::json"), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", "JsonContext", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_map", symbols.NewTypeFromString("Object*!", "std::encoding::json"), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", "JsonContext", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_array", symbols.NewTypeFromString("Object*!", "std::encoding::json"), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", "JsonContext", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pushback", symbols.NewTypeFromString("void", "std::encoding::json"), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", "JsonContext", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_next", symbols.NewTypeFromString("char!", "std::encoding::json"), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", "JsonContext", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("advance", symbols.NewTypeFromString("JsonTokenType!", "std::encoding::json"), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", "JsonContext", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("match", symbols.NewTypeFromString("void!", "std::encoding::json"), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", "JsonContext", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", "String", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_expected", symbols.NewTypeFromString("void!", "std::encoding::json"), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", "JsonContext", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("token", "JsonTokenType", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lex_string", symbols.NewTypeFromString("JsonTokenType!", "std::encoding::json"), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", "JsonContext", "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::adler32
	module = moduleCollection["std::hash::adler32"]
	module.AddVariable(symbols.NewVariableBuilder("ADLER_CONST", "uint", "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).AddStruct(symbols.NewStructBuilder("Adler32", "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithStructMember("a", "uint", "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithStructMember("b", "uint", "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::hash::adler32"), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithTypeIdentifier("Adler32").WithArgument(symbols.NewVariableBuilder("self", "Adler32", "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("updatec", symbols.NewTypeFromString("void", "std::hash::adler32"), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithTypeIdentifier("Adler32").WithArgument(symbols.NewVariableBuilder("self", "Adler32", "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewTypeFromString("void", "std::hash::adler32"), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithTypeIdentifier("Adler32").WithArgument(symbols.NewVariableBuilder("self", "Adler32", "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", "char", "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewTypeFromString("uint", "std::hash::adler32"), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithTypeIdentifier("Adler32").WithArgument(symbols.NewVariableBuilder("self", "Adler32", "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewTypeFromString("uint", "std::hash::adler32"), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithArgument(symbols.NewVariableBuilder("data", "char", "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::crc32
	module = moduleCollection["std::hash::crc32"]
	module.AddVariable(symbols.NewVariableBuilder("CRC32_TABLE", "uint[256]", "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).AddStruct(symbols.NewStructBuilder("Crc32", "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithStructMember("result", "uint", "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::hash::crc32"), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithTypeIdentifier("Crc32").WithArgument(symbols.NewVariableBuilder("self", "Crc32", "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", "uint", "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("updatec", symbols.NewTypeFromString("void", "std::hash::crc32"), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithTypeIdentifier("Crc32").WithArgument(symbols.NewVariableBuilder("self", "Crc32", "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewTypeFromString("void", "std::hash::crc32"), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithTypeIdentifier("Crc32").WithArgument(symbols.NewVariableBuilder("self", "Crc32", "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", "char", "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewTypeFromString("uint", "std::hash::crc32"), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithTypeIdentifier("Crc32").WithArgument(symbols.NewVariableBuilder("self", "Crc32", "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewTypeFromString("uint", "std::hash::crc32"), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithArgument(symbols.NewVariableBuilder("data", "char", "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::crc64
	module = moduleCollection["std::hash::crc64"]
	module.AddVariable(symbols.NewVariableBuilder("CRC64_TABLE", "ulong[256]", "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).AddStruct(symbols.NewStructBuilder("Crc64", "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithStructMember("result", "ulong", "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::hash::crc64"), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithTypeIdentifier("Crc64").WithArgument(symbols.NewVariableBuilder("self", "Crc64", "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", "uint", "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("updatec", symbols.NewTypeFromString("void", "std::hash::crc64"), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithTypeIdentifier("Crc64").WithArgument(symbols.NewVariableBuilder("self", "Crc64", "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewTypeFromString("void", "std::hash::crc64"), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithTypeIdentifier("Crc64").WithArgument(symbols.NewVariableBuilder("self", "Crc64", "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", "char", "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewTypeFromString("ulong", "std::hash::crc64"), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithTypeIdentifier("Crc64").WithArgument(symbols.NewVariableBuilder("self", "Crc64", "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewTypeFromString("ulong", "std::hash::crc64"), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithArgument(symbols.NewVariableBuilder("data", "char", "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::fnv32a
	module = moduleCollection["std::hash::fnv32a"]
	module.AddVariable(symbols.NewVariableBuilder("FNV32A_MUL", "", "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).AddVariable(symbols.NewVariableBuilder("FNV32A_START", "", "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).AddFunction(symbols.NewFunctionBuilder("@update", symbols.NewTypeFromString("void", "std::hash::fnv32a"), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithArgument(symbols.NewVariableBuilder("h", "uint", "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", "char", "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::hash::fnv32a"), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithTypeIdentifier("Fnv32a").WithArgument(symbols.NewVariableBuilder("self", "Fnv32a", "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewTypeFromString("void", "std::hash::fnv32a"), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithTypeIdentifier("Fnv32a").WithArgument(symbols.NewVariableBuilder("self", "Fnv32a", "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", "char", "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Fnv32a.update_char", symbols.NewTypeFromString("void", "std::hash::fnv32a"), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithArgument(symbols.NewVariableBuilder("self", "Fnv32a", "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewTypeFromString("uint", "std::hash::fnv32a"), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithArgument(symbols.NewVariableBuilder("data", "char", "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::fnv64a
	module = moduleCollection["std::hash::fnv64a"]
	module.AddVariable(symbols.NewVariableBuilder("FNV64A_MUL", "", "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).AddVariable(symbols.NewVariableBuilder("FNV64A_START", "", "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).AddFunction(symbols.NewFunctionBuilder("@update", symbols.NewTypeFromString("void", "std::hash::fnv64a"), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithArgument(symbols.NewVariableBuilder("h", "ulong", "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", "char", "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::hash::fnv64a"), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithTypeIdentifier("Fnv64a").WithArgument(symbols.NewVariableBuilder("self", "Fnv64a", "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewTypeFromString("void", "std::hash::fnv64a"), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithTypeIdentifier("Fnv64a").WithArgument(symbols.NewVariableBuilder("self", "Fnv64a", "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", "char", "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Fnv64a.update_char", symbols.NewTypeFromString("void", "std::hash::fnv64a"), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithArgument(symbols.NewVariableBuilder("self", "Fnv64a", "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewTypeFromString("ulong", "std::hash::fnv64a"), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithArgument(symbols.NewVariableBuilder("data", "char", "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::sha1
	module = moduleCollection["std::hash::sha1"]
	module.AddStruct(symbols.NewStructBuilder("Long16", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithStructMember("c", "char", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithStructMember("l", "uint", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Sha1", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithStructMember("state", "uint", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithStructMember("count", "uint", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithStructMember("buffer", "char", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::hash::sha1"), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithTypeIdentifier("Sha1").WithArgument(symbols.NewVariableBuilder("self", "Sha1", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewTypeFromString("void", "std::hash::sha1"), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithTypeIdentifier("Sha1").WithArgument(symbols.NewVariableBuilder("self", "Sha1", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", "char", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewTypeFromString("char[20]", "std::hash::sha1"), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithTypeIdentifier("Sha1").WithArgument(symbols.NewVariableBuilder("self", "Sha1", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@blk", symbols.NewTypeFromString("", "std::hash::sha1"), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@blk0", symbols.NewTypeFromString("", "std::hash::sha1"), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@r0", symbols.NewTypeFromString("", "std::hash::sha1"), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("wref", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@r1", symbols.NewTypeFromString("", "std::hash::sha1"), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("wref", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@r2", symbols.NewTypeFromString("", "std::hash::sha1"), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("wref", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@r3", symbols.NewTypeFromString("", "std::hash::sha1"), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("wref", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@r4", symbols.NewTypeFromString("", "std::hash::sha1"), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("wref", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", "", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sha1_transform", symbols.NewTypeFromString("void", "std::hash::sha1"), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("state", "uint", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("BitReader", "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("reader", "InStream", "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("bits", "uint", "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("len", "uint", "std::io", "<stdlib-path>/io/bits.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("BitWriter", "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("writer", "OutStream", "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("bits", "uint", "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("len", "uint", "std::io", "<stdlib-path>/io/bits.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::io"), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitReader").WithArgument(symbols.NewVariableBuilder("self", "BitReader", "std::io", "<stdlib-path>/io/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("byte_reader", "InStream", "std::io", "<stdlib-path>/io/bits.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewTypeFromString("void", "std::io"), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitReader").WithArgument(symbols.NewVariableBuilder("self", "BitReader", "std::io", "<stdlib-path>/io/bits.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_bits", symbols.NewTypeFromString("char!", "std::io"), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitReader").WithArgument(symbols.NewVariableBuilder("self", "BitReader", "std::io", "<stdlib-path>/io/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("nbits", "uint", "std::io", "<stdlib-path>/io/bits.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::io"), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitWriter").WithArgument(symbols.NewVariableBuilder("self", "BitWriter", "std::io", "<stdlib-path>/io/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("byte_writer", "OutStream", "std::io", "<stdlib-path>/io/bits.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flush", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitWriter").WithArgument(symbols.NewVariableBuilder("self", "BitWriter", "std::io", "<stdlib-path>/io/bits.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_bits", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitWriter").WithArgument(symbols.NewVariableBuilder("self", "BitWriter", "std::io", "<stdlib-path>/io/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("bits", "uint", "std::io", "<stdlib-path>/io/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("nbits", "uint", "std::io", "<stdlib-path>/io/bits.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("File", "std::io", "<stdlib-path>/io/file.c3").WithStructMember("file", "CFile", "std::io", "<stdlib-path>/io/file.c3").WithoutSourceCode().Build())

	// Define module std::io::file
	module = moduleCollection["std::io::file"]
	module.AddFunction(symbols.NewFunctionBuilder("open", symbols.NewTypeFromString("File!", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("filename", "String", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "String", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("open_path", symbols.NewTypeFromString("File!", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("path", "Path", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "String", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_handle", symbols.NewTypeFromString("File", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("file", "CFile", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_file", symbols.NewTypeFromString("bool", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("path", "String", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_size", symbols.NewTypeFromString("usz!", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("path", "String", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("delete", symbols.NewTypeFromString("void!", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("filename", "String", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reopen", symbols.NewTypeFromString("void!", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", "File", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", "String", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "String", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seek", symbols.NewTypeFromString("usz!", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", "File", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "isz", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("seek_mode", "Seek", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewTypeFromString("void!", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", "File", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewTypeFromString("void!", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", "File", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eof", symbols.NewTypeFromString("bool", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", "File", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewTypeFromString("usz!", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", "File", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewTypeFromString("usz!", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", "File", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewTypeFromString("char!", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", "File", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load_buffer", symbols.NewTypeFromString("char[]!", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("filename", "String", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load_new", symbols.NewTypeFromString("char[]!", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("filename", "String", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load_temp", symbols.NewTypeFromString("char[]!", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("filename", "String", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flush", symbols.NewTypeFromString("void!", "std::io::file"), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", "File", "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddVariable(symbols.NewVariableBuilder("PRINTF_NTOA_BUFFER_SIZE", "int", "std::io", "<stdlib-path>/io/formatter.c3").Build()).AddStruct(symbols.NewStructBuilder("Formatter", "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("data", "void", "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("out_fn", "OutputFn", "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("flags", "PrintFlags", "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("width", "uint", "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("prec", "uint", "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("idx", "usz", "std::io", "<stdlib-path>/io/formatter.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("PrintFlags", "uint", "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("zeropad", "bool", "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("left", "bool", "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("plus", "bool", "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("space", "bool", "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("hash", "bool", "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("uppercase", "bool", "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("precision", "bool", "std::io", "<stdlib-path>/io/formatter.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FloatType", "std::io", "<stdlib-path>/io/formatter.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("OutputFn", "std::io", "<stdlib-path>/io/formatter.c3").WithResolvesTo("fn void!(void* buffer, char c)").WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("FormattingFault", "", "std::io", "<stdlib-path>/io/formatter.c3").WithConstant(symbols.NewFaultConstantBuilder("UNTERMINATED_FORMAT", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("FormattingFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("MISSING_ARG", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("FormattingFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_WIDTH_ARG", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("FormattingFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_FORMAT_TYPE", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("FormattingFault").Build()).Build()).AddFault(symbols.NewFaultBuilder("PrintFault", "", "std::io", "<stdlib-path>/io/formatter.c3").WithConstant(symbols.NewFaultConstantBuilder("BUFFER_EXCEEDED", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("PrintFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("INTERNAL_BUFFER_EXCEEDED", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("PrintFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_FORMAT_STRING", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("PrintFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("MISSING_ARG", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("PrintFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_ARGUMENT_TYPE", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("PrintFault").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("printf", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", "String", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", "", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::io"), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("out_fn", "OutputFn", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", "void", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print_with_function", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", "Printable", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_str", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", "any", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_null_fn", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/formatter.c3").WithArgument(symbols.NewVariableBuilder("data", "void", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("vprintf", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", "String", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("anys", "any", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", "String", "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddVariable(symbols.NewVariableBuilder("XDIGITS_H", "char[16]", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).AddVariable(symbols.NewVariableBuilder("XDIGITS_L", "char[16]", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).AddEnum(symbols.NewEnumBuilder("FloatFormatting", "", "std::io", "<stdlib-path>/io/formatter_private.c3").WithEnumerator(symbols.NewEnumeratorBuilder("FLOAT", "<stdlib-path>/io/formatter_private.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("FloatFormatting").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EXPONENTIAL", "<stdlib-path>/io/formatter_private.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("FloatFormatting").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ADAPTIVE", "<stdlib-path>/io/formatter_private.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("FloatFormatting").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HEX", "<stdlib-path>/io/formatter_private.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("FloatFormatting").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("adjust", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", "usz", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int_from_any", symbols.NewTypeFromString("uint128!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("arg", "any", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("is_neg", "bool", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float_from_any", symbols.NewTypeFromString("FloatType!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("arg", "any", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("simple_atoi", symbols.NewTypeFromString("uint", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("buf", "char", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("maxlen", "usz", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("len_ptr", "usz", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_substr", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", "String", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pad", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("width", "isz", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", "isz", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fmt_u", symbols.NewTypeFromString("char*", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "char", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_chars", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "char", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("etoa", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ftoa", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gtoa", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atoa", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("floatformat", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatting", "FloatFormatting", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ntoa", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "uint128", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("negative", "bool", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "uint", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ntoa_format", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", "String", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", "usz", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("negative", "bool", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "uint", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ntoa_any", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", "any", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "uint", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_char", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", "any", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_reverse", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", "Formatter", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", "char", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printf_advance_format", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("format_len", "usz", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("index_ptr", "usz", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_any", symbols.NewTypeFromString("any*!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("args_ptr", "any", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("args_len", "usz", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg_index_ptr", "usz", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printf_parse_format_field", symbols.NewTypeFromString("int!", "std::io"), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("args_ptr", "any", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("args_len", "usz", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("args_index_ptr", "usz", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("format_ptr", "char", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("format_len", "usz", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("index_ptr", "usz", "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddVariable(symbols.NewVariableBuilder("stderr_file", "File", "std::io", "<stdlib-path>/io/io.c3").Build()).AddVariable(symbols.NewVariableBuilder("stdin_file", "File", "std::io", "<stdlib-path>/io/io.c3").Build()).AddVariable(symbols.NewVariableBuilder("stdout_file", "File", "std::io", "<stdlib-path>/io/io.c3").Build()).AddStruct(symbols.NewStructBuilder("BufferData", "std::io", "<stdlib-path>/io/io.c3").WithStructMember("buffer", "char", "std::io", "<stdlib-path>/io/io.c3").WithStructMember("written", "usz", "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("Seek", "", "std::io", "<stdlib-path>/io/io.c3").WithEnumerator(symbols.NewEnumeratorBuilder("SET", "<stdlib-path>/io/io.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Seek").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CURSOR", "<stdlib-path>/io/io.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Seek").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("END", "<stdlib-path>/io/io.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Seek").Build()).Build()).AddFault(symbols.NewFaultBuilder("IoError", "", "std::io", "<stdlib-path>/io/io.c3").WithConstant(symbols.NewFaultConstantBuilder("ALREADY_EXISTS", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("BUSY", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("CANNOT_READ_DIR", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("DIR_NOT_EMPTY", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("EOF", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_CANNOT_DELETE", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_IS_DIR", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_IS_PIPE", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_NOT_DIR", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_NOT_FOUND", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_NOT_VALID", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("GENERAL_ERROR", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("ILLEGAL_ARGUMENT", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INCOMPLETE_WRITE", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INTERRUPTED", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_POSITION", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_PUSHBACK", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("NAME_TOO_LONG", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("NOT_SEEKABLE", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("NO_PERMISSION", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("OUT_OF_SPACE", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("OVERFLOW", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("READ_ONLY", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("SYMLINK_FAILED", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("TOO_MANY_DESCRIPTORS", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNEXPECTED_EOF", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNKNOWN_ERROR", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNSUPPORTED_OPERATION", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("WOULD_BLOCK", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("readline", symbols.NewTypeFromString("String!", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("stream", "", "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("treadline", symbols.NewTypeFromString("String!", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("stream", "", "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprint", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("out", "", "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", "", "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprintf", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("out", "OutStream", "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", "String", "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", "", "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprintfn", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("out", "OutStream", "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", "String", "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", "", "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprintn", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("out", "", "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", "", "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print", symbols.NewTypeFromString("void", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printn", symbols.NewTypeFromString("void", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eprint", symbols.NewTypeFromString("void", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eprintn", symbols.NewTypeFromString("void", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_putstream_fn", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("data", "void", "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_putchar_fn", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("data", "void", "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printf", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("format", "String", "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", "", "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printfn", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("format", "String", "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", "", "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eprintf", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("format", "String", "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", "", "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eprintfn", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("format", "String", "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", "", "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bprintf", symbols.NewTypeFromString("char[]!", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", "String", "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", "", "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_buffer_fn", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("data", "void", "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putchar", symbols.NewTypeFromString("void", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeFromString("File*", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeFromString("File*", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeFromString("File*", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putchar", symbols.NewTypeFromString("void", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeFromString("File*", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeFromString("File*", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeFromString("File*", "std::io"), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_chdir", symbols.NewTypeFromString("void!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/chdir.c3").WithArgument(symbols.NewVariableBuilder("path", "Path", "std::io::os", "<stdlib-path>/io/os/chdir.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_fopen", symbols.NewTypeFromString("void*!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("filename", "String", "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "String", "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_remove", symbols.NewTypeFromString("void!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("filename", "String", "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_freopen", symbols.NewTypeFromString("void*!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("file", "void", "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", "String", "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "String", "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fseek", symbols.NewTypeFromString("void!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("file", "void", "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "isz", "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("seek_mode", "Seek", "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_ftell", symbols.NewTypeFromString("usz!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("file", "CFile", "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fwrite", symbols.NewTypeFromString("usz!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("file", "CFile", "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fread", symbols.NewTypeFromString("usz!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("file", "CFile", "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("file_open_errno", symbols.NewTypeFromString("anyfault", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("file_seek_errno", symbols.NewTypeFromString("anyfault", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").IsMacro().WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddVariable(symbols.NewVariableBuilder("native_fclose_fn", "FcloseFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_fopen_fn", "FopenFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_fread_fn", "FreadFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_freopen_fn", "FreopenFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_fseek_fn", "FseekFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_ftell_fn", "FtellFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_fwrite_fn", "FwriteFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_remove_fn", "RemoveFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddDef(symbols.NewDefBuilder("FcloseFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void!(void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FopenFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void*!(String, String)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FreadFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn usz!(void*, char[] buffer)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FreopenFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void*!(void*, String, String)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FseekFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void!(void*, isz, Seek)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FtellFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn usz!(void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FwriteFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn usz!(void*, char[] buffer)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("RemoveFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void!(String)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fopen", symbols.NewTypeFromString("void*!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("filename", "String", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "String", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_remove", symbols.NewTypeFromString("void!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("filename", "String", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_freopen", symbols.NewTypeFromString("void*!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("file", "void", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", "String", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "String", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fseek", symbols.NewTypeFromString("void!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("file", "void", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "isz", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("seek_mode", "Seek", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_ftell", symbols.NewTypeFromString("usz!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("file", "CFile", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fwrite", symbols.NewTypeFromString("usz!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("file", "CFile", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fread", symbols.NewTypeFromString("usz!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("file", "CFile", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_stat", symbols.NewTypeFromString("void!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("stat", "Stat", "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithArgument(symbols.NewVariableBuilder("path", "String", "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_file_size", symbols.NewTypeFromString("usz!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", "String", "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_file_size", symbols.NewTypeFromString("usz!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", "String", "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_file_size", symbols.NewTypeFromString("usz!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", "String", "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_file_or_dir_exists", symbols.NewTypeFromString("bool", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", "String", "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_is_file", symbols.NewTypeFromString("bool", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", "String", "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_is_dir", symbols.NewTypeFromString("bool", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", "String", "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("getcwd", symbols.NewTypeFromString("String!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/getcwd.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::os", "<stdlib-path>/io/os/getcwd.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_ls", symbols.NewTypeFromString("PathList!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/ls.c3").WithArgument(symbols.NewVariableBuilder("dir", "Path", "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_dirs", "bool", "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_symlinks", "bool", "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", "String", "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_ls", symbols.NewTypeFromString("PathList!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/ls.c3").WithArgument(symbols.NewVariableBuilder("dir", "Path", "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_dirs", "bool", "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_symlinks", "bool", "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", "String", "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_mkdir", symbols.NewTypeFromString("bool!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/mkdir.c3").WithArgument(symbols.NewVariableBuilder("path", "Path", "std::io::os", "<stdlib-path>/io/os/mkdir.c3").Build()).WithArgument(symbols.NewVariableBuilder("permissions", "MkdirPermissions", "std::io::os", "<stdlib-path>/io/os/mkdir.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_rmdir", symbols.NewTypeFromString("bool!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/rmdir.c3").WithArgument(symbols.NewVariableBuilder("path", "Path", "std::io::os", "<stdlib-path>/io/os/rmdir.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_rmtree", symbols.NewTypeFromString("void!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/rmtree.c3").WithArgument(symbols.NewVariableBuilder("dir", "Path", "std::io::os", "<stdlib-path>/io/os/rmtree.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_rmtree", symbols.NewTypeFromString("void!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/rmtree.c3").WithArgument(symbols.NewVariableBuilder("path", "Path", "std::io::os", "<stdlib-path>/io/os/rmtree.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_temp_directory", symbols.NewTypeFromString("Path!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_temp_directory", symbols.NewTypeFromString("Path!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_temp_directory", symbols.NewTypeFromString("Path!", "std::io::os"), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io::path
	module = moduleCollection["std::io::path"]
	module.AddVariable(symbols.NewVariableBuilder("DEFAULT_PATH_ENV", "PathEnv", "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddVariable(symbols.NewVariableBuilder("PREFERRED_SEPARATOR", "char", "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddVariable(symbols.NewVariableBuilder("PREFERRED_SEPARATOR_POSIX", "char", "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddVariable(symbols.NewVariableBuilder("PREFERRED_SEPARATOR_WIN32", "char", "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddVariable(symbols.NewVariableBuilder("RESERVED_PATH_CHAR_POSIX", "bool[256]", "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddVariable(symbols.NewVariableBuilder("RESERVED_PATH_CHAR_WIN32", "bool[256]", "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddStruct(symbols.NewStructBuilder("Path", "std::io::path", "<stdlib-path>/io/path.c3").WithStructMember("path_string", "String", "std::io::path", "<stdlib-path>/io/path.c3").WithStructMember("env", "PathEnv", "std::io::path", "<stdlib-path>/io/path.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("PathList", "std::io::path", "<stdlib-path>/io/path.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("PathWalker", "std::io::path", "<stdlib-path>/io/path.c3").WithResolvesTo("fn bool! (Path, bool is_dir, void*)").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("MkdirPermissions", "", "std::io::path", "<stdlib-path>/io/path.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NORMAL", "<stdlib-path>/io/path.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MkdirPermissions").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("USER_ONLY", "<stdlib-path>/io/path.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MkdirPermissions").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("USER_AND_ADMIN", "<stdlib-path>/io/path.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MkdirPermissions").Build()).Build()).AddEnum(symbols.NewEnumBuilder("PathEnv", "", "std::io::path", "<stdlib-path>/io/path.c3").WithEnumerator(symbols.NewEnumeratorBuilder("WIN32", "<stdlib-path>/io/path.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PathEnv").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("POSIX", "<stdlib-path>/io/path.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PathEnv").Build()).Build()).AddFault(symbols.NewFaultBuilder("PathResult", "", "std::io::path", "<stdlib-path>/io/path.c3").WithConstant(symbols.NewFaultConstantBuilder("INVALID_PATH", "std::io::path", "../../../assets/c3c/lib/std/io/path.c3").WithFaultName("PathResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("NO_PARENT", "std::io::path", "../../../assets/c3c/lib/std/io/path.c3").WithFaultName("PathResult").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("getcwd", symbols.NewTypeFromString("Path!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_dir", symbols.NewTypeFromString("bool", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_file", symbols.NewTypeFromString("bool", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("file_size", symbols.NewTypeFromString("usz!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exists", symbols.NewTypeFromString("bool", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tgetcwd", symbols.NewTypeFromString("Path!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("chdir", symbols.NewTypeFromString("void!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_directory", symbols.NewTypeFromString("Path!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("delete", symbols.NewTypeFromString("void!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_separator", symbols.NewTypeFromString("bool", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", "PathEnv", "std::io::path", "<stdlib-path>/io/path.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_posix_separator", symbols.NewTypeFromString("bool", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::io::path", "<stdlib-path>/io/path.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_win32_separator", symbols.NewTypeFromString("bool", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::io::path", "<stdlib-path>/io/path.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ls", symbols.NewTypeFromString("PathList!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("dir", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_dirs", "bool", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_symlinks", "bool", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", "String", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mkdir", symbols.NewTypeFromString("bool!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("recursive", "bool", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("permissions", "MkdirPermissions", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rmdir", symbols.NewTypeFromString("bool!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rmtree", symbols.NewTypeFromString("void!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new", symbols.NewTypeFromString("Path!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", "String", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", "PathEnv", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_new", symbols.NewTypeFromString("Path!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", "String", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", "PathEnv", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_win32_wstring", symbols.NewTypeFromString("Path!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", "WString", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_windows", symbols.NewTypeFromString("Path!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", "String", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_posix", symbols.NewTypeFromString("Path!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", "String", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewTypeFromString("bool", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("p2", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append", symbols.NewTypeFromString("Path!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", "String", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tappend", symbols.NewTypeFromString("Path!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", "String", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("start_of_base_name", symbols.NewTypeFromString("usz", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_absolute", symbols.NewTypeFromString("bool!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("absolute", symbols.NewTypeFromString("Path!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("basename", symbols.NewTypeFromString("String", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dirname", symbols.NewTypeFromString("String", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("extension", symbols.NewTypeFromString("String!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("volume_name", symbols.NewTypeFromString("String", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("volume_name_len", symbols.NewTypeFromString("usz!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", "String", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", "PathEnv", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parent", symbols.NewTypeFromString("Path!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("normalize", symbols.NewTypeFromString("String!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path_str", "String", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", "PathEnv", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("as_zstr", symbols.NewTypeFromString("ZString", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("root_directory", symbols.NewTypeFromString("String", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("walk", symbols.NewTypeFromString("bool!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("w", "PathWalker", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", "void", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeFromString("String", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_suffix", symbols.NewTypeFromString("bool", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", "String", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewTypeFromString("usz!", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", "Formatter", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeFromString("String", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", "Path", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_reserved_win32_path_char", symbols.NewTypeFromString("bool", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::io::path", "<stdlib-path>/io/path.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_reserved_path_char", symbols.NewTypeFromString("bool", "std::io::path"), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("c", "char", "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", "PathEnv", "std::io::path", "<stdlib-path>/io/path.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddVariable(symbols.NewVariableBuilder("MAX_VARS", "char[*]", "std::io", "<stdlib-path>/io/stream.c3").Build()).AddDef(symbols.NewDefBuilder("ReadByteFn", "std::io", "<stdlib-path>/io/stream.c3").WithResolvesTo("fn char!()").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("available", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", "InStream", "std::io", "<stdlib-path>/io/stream.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_instream", symbols.NewTypeFromString("bool", "std::io"), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_outstream", symbols.NewTypeFromString("bool", "std::io"), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_any", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", "", "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("ref", "any", "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_any", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", "", "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("ref", "any", "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_all", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", "", "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_all", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", "", "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@read_using_read_byte", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", "", "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@write_byte_using_write", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", "", "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@read_byte_using_read", symbols.NewTypeFromString("char!", "std::io"), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", "", "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@write_using_write_byte", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", "", "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@pushback_using_seek", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", "", "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_to", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("in", "InStream", "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", "OutStream", "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::io", "<stdlib-path>/io/stream.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_through_buffer", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("in", "InStream", "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", "OutStream", "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_varint", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", "", "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("x_ptr", "", "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_varint", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", "", "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", "", "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("ReadBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("wrapped_stream", "InStream", "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("bytes", "char", "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("read_idx", "usz", "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("write_idx", "usz", "std::io", "<stdlib-path>/io/stream/buffer.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("WriteBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("wrapped_stream", "OutStream", "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("bytes", "char", "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("index", "usz", "std::io", "<stdlib-path>/io/stream/buffer.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("ReadBuffer*", "std::io"), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", "ReadBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("wrapped_stream", "InStream", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeFromString("String", "std::io"), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", "ReadBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", "ReadBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", "ReadBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewTypeFromString("char!", "std::io"), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", "ReadBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("refill", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", "ReadBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("WriteBuffer*", "std::io"), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", "WriteBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("wrapped_stream", "OutStream", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeFromString("String", "std::io"), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", "WriteBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", "WriteBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flush", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", "WriteBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", "WriteBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", "WriteBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_pending", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", "WriteBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("allocator", "Allocator", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("max_read", "usz", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("bytes", "char", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("read_idx", "usz", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("write_idx", "usz", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("has_last", "bool", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_new", symbols.NewTypeFromString("ByteBuffer*!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", "ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_read", "usz", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeFromString("ByteBuffer*!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", "ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_read", "usz", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_temp", symbols.NewTypeFromString("ByteBuffer*!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", "ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_read", "usz", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeFromString("ByteBuffer*!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", "ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_read", "usz", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", "usz", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_with_buffer", symbols.NewTypeFromString("ByteBuffer*!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", "ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", "char", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::io"), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", "ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", "ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", "ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", "ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewTypeFromString("char!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", "ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pushback_byte", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", "ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seek", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", "ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "isz", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("seek", "Seek", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("available", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", "ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("grow", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", "ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "usz", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ByteBuffer.shrink", symbols.NewTypeFromString("", "std::io"), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithArgument(symbols.NewVariableBuilder("self", "ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("ByteReader", "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithStructMember("bytes", "char", "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithStructMember("index", "usz", "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewTypeFromString("usz", "std::io"), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", "ByteReader", "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("ByteReader*", "std::io"), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", "ByteReader", "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", "ByteReader", "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewTypeFromString("char!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", "ByteReader", "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pushback_byte", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", "ByteReader", "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seek", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", "ByteReader", "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "isz", "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("seek", "Seek", "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_to", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", "ByteReader", "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("writer", "OutStream", "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("available", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", "ByteReader", "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("ByteWriter", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithStructMember("bytes", "char", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithStructMember("index", "usz", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithStructMember("allocator", "Allocator", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeFromString("ByteWriter*", "std::io"), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", "ByteWriter", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_new", symbols.NewTypeFromString("ByteWriter*", "std::io"), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", "ByteWriter", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeFromString("ByteWriter*", "std::io"), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", "ByteWriter", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_temp", symbols.NewTypeFromString("ByteWriter*", "std::io"), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", "ByteWriter", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_with_buffer", symbols.NewTypeFromString("ByteWriter*", "std::io"), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", "ByteWriter", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", "char", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", "ByteWriter", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeFromString("String", "std::io"), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", "ByteWriter", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ensure_capacity", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", "ByteWriter", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", "usz", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", "ByteWriter", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", "ByteWriter", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "char", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_from", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", "ByteWriter", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("reader", "InStream", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("LimitReader", "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithStructMember("wrapped_stream", "InStream", "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithStructMember("limit", "usz", "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("LimitReader*", "std::io"), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithTypeIdentifier("LimitReader").WithArgument(symbols.NewVariableBuilder("self", "LimitReader", "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithArgument(symbols.NewVariableBuilder("wrapped_stream", "InStream", "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithArgument(symbols.NewVariableBuilder("limit", "usz", "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithTypeIdentifier("LimitReader").WithArgument(symbols.NewVariableBuilder("self", "LimitReader", "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithTypeIdentifier("LimitReader").WithArgument(symbols.NewVariableBuilder("self", "LimitReader", "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewTypeFromString("char!", "std::io"), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithTypeIdentifier("LimitReader").WithArgument(symbols.NewVariableBuilder("self", "LimitReader", "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("available", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithTypeIdentifier("LimitReader").WithArgument(symbols.NewVariableBuilder("self", "LimitReader", "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("Scanner", "std::io", "<stdlib-path>/io/stream/scanner.c3").WithStructMember("wrapped_stream", "InStream", "std::io", "<stdlib-path>/io/stream/scanner.c3").WithStructMember("buf", "char", "std::io", "<stdlib-path>/io/stream/scanner.c3").WithStructMember("pattern_idx", "usz", "std::io", "<stdlib-path>/io/stream/scanner.c3").WithStructMember("read_idx", "usz", "std::io", "<stdlib-path>/io/stream/scanner.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void", "std::io"), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", "Scanner", "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "InStream", "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flush", symbols.NewTypeFromString("char[]", "std::io"), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", "Scanner", "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewTypeFromString("void!", "std::io"), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", "Scanner", "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scan", symbols.NewTypeFromString("char[]!", "std::io"), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", "Scanner", "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("pattern", "String", "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Scanner.find", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithArgument(symbols.NewVariableBuilder("self", "Scanner", "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", "", "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("pattern", "", "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Scanner.refill", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithArgument(symbols.NewVariableBuilder("self", "Scanner", "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", "", "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewTypeFromString("usz!", "std::io"), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", "Scanner", "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewTypeFromString("char!", "std::io"), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", "Scanner", "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddVariable(symbols.NewVariableBuilder("BSD_FLAVOR_SIG", "bool", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("BUFSIZ", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCKS_PER_SEC", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EOF", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXIT_FAILURE", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXIT_SUCCESS", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILENAME_MAX", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("FOPEN_MAX", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("HAS_MALLOC_SIZE", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("RAND_MAX", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SEEK_CUR", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SEEK_END", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SEEK_SET", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGABTR", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGALRM", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGBUS", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGCHLD", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGCONT", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGFPE", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGHUP", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGILL", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGINT", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGKILL", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGPIPE", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGQUIT", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGSEGV", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGSTOP", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGSYS", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGTERM", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGTRAP", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGTSTP", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGURG", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("STDERR_FD", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("STDIN_FD", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("STDOUT_FD", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFBLK", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFCHR", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFDIR", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFIFO", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFLNK", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFMT", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFREG", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFSOCK", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IRUSR", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_ISGID", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_ISUID", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_ISVTX", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IWUSR", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IXUSR", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("TIME_UTC", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("_IOFBF", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("_IOLBF", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("_IONBF", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stderr", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stderrp", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stdin", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stdinp", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stdout", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stdoutp", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).AddStruct(symbols.NewStructBuilder("DivResult", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("quot", "CInt", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("rem", "CInt", "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("LongDivResult", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("quot", "CLong", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("rem", "CLong", "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TimeSpec", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("s", "Time_t", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("ns", "ulong", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("ns", "CLong", "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Timespec", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tv_sec", "Time_t", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tv_nsec", "CLong", "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Tm", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_sec", "CInt", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_min", "CInt", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_hour", "CInt", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_mday", "CInt", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_mon", "CInt", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_year", "CInt", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_wday", "CInt", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_yday", "CInt", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_isdst", "CInt", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_gmtoff", "TimeOffset", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_zone", "char", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_nsec", "CInt", "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CFile", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Clock_t", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CompareFunction", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("fn int(void*, void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Fd", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Fpos_t", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("JmpBuf", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Off_t", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("SeekIndex", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("SignalFunction", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("fn void(CInt)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("TerminateFunction", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("fn void()").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("TimeOffset", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Time_t", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewTypeFromString("Errno", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewTypeFromString("void", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("e", "Errno", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("abort", symbols.NewTypeFromString("void", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("abs", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("n", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("asctime", symbols.NewTypeFromString("ZString", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timeptr", "Tm", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("asctime_r", symbols.NewTypeFromString("ZString", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timeptr", "Tm", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atexit", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("func", "TerminateFunction", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atof", symbols.NewTypeFromString("double", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atoi", symbols.NewTypeFromString("int", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atoll", symbols.NewTypeFromString("CLongLong", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bsearch", symbols.NewTypeFromString("void", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("key", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("items", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", "CompareFunction", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("count", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clearerr", symbols.NewTypeFromString("void", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clock", symbols.NewTypeFromString("Clock_t", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("fd", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("difftime", symbols.NewTypeFromString("double", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("time1", "Time_t", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("time2", "Time_t", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("div", symbols.NewTypeFromString("DivResult", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("numer", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("denom", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exit", symbols.NewTypeFromString("void", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("status", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fclose", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fdopen", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("fd", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("feof", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ferror", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fflush", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fgetc", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fgets", symbols.NewTypeFromString("ZString", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("string", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fgetpos", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("pos", "Fpos_t", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fileno", symbols.NewTypeFromString("Fd", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fopen", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("filename", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprintf", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fputc", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fputs", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("string", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fread", symbols.NewTypeFromString("usz", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("nmemb", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("freopen", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("filename", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fscanf", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fseek", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "SeekIndex", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("whence", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fsetpos", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("pos", "Fpos_t", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ftell", symbols.NewTypeFromString("SeekIndex", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fwrite", symbols.NewTypeFromString("usz", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("nmemb", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getc", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getchar", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getenv", symbols.NewTypeFromString("ZString", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("name", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gets", symbols.NewTypeFromString("ZString", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gmtime", symbols.NewTypeFromString("Tm*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", "Time_t", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gmtime_r", symbols.NewTypeFromString("Tm*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", "Time_t", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", "Tm", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("labs", symbols.NewTypeFromString("CLong", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("x", "CLong", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ldiv", symbols.NewTypeFromString("LongDivResult", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("number", "CLong", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("denom", "CLong", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("localtime", symbols.NewTypeFromString("Tm*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", "Time_t", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("localtime_r", symbols.NewTypeFromString("Tm*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", "Time_t", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", "Tm", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("longjmp", symbols.NewTypeFromString("void", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", "JmpBuf", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memchr", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memcmp", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buf1", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf2", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("count", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memcpy", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memmove", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memset", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mktime", symbols.NewTypeFromString("Time_t*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("time", "Tm", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("perror", symbols.NewTypeFromString("void", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("string", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printf", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("format", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putc", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putchar", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("puts", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("qsort", symbols.NewTypeFromString("void", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("base", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("items", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", "CompareFunction", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("raise", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("signal", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rand", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewTypeFromString("isz", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("fd", "Fd", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("nbyte", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("filename", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rename", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("old_name", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_name", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rewind", symbols.NewTypeFromString("void", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scanf", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("format", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setbuf", symbols.NewTypeFromString("void", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setenv", symbols.NewTypeFromString("int", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("name", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("overwrite", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setjmp", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", "JmpBuf", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setvbuf", symbols.NewTypeFromString("void", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("signal", symbols.NewTypeFromString("SignalFunction", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("sig", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", "SignalFunction", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("snprintf", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sprintf", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("srand", symbols.NewTypeFromString("void", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("seed", "uint", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sscanf", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strcat", symbols.NewTypeFromString("ZString", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strchr", symbols.NewTypeFromString("char*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strcmp", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strcoll", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strcspn", symbols.NewTypeFromString("usz", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strcpy", symbols.NewTypeFromString("ZString", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dst", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strerror", symbols.NewTypeFromString("ZString", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("errn", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strftime", symbols.NewTypeFromString("usz", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("maxsize", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeptr", "Tm", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strlen", symbols.NewTypeFromString("usz", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strncat", symbols.NewTypeFromString("ZString", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strncmp", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strncpy", symbols.NewTypeFromString("char*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dst", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stroul", symbols.NewTypeFromString("CULong", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("endptr", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strpbrk", symbols.NewTypeFromString("char*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strspn", symbols.NewTypeFromString("usz", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strptime", symbols.NewTypeFromString("ZString", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buf", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("tm", "Tm", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strrchr", symbols.NewTypeFromString("char*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strstr", symbols.NewTypeFromString("char*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("haystack", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strtod", symbols.NewTypeFromString("double", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("endptr", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strtof", symbols.NewTypeFromString("float", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("endptr", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strtok", symbols.NewTypeFromString("ZString", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("delim", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strtol", symbols.NewTypeFromString("CLong", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("endptr", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strtul", symbols.NewTypeFromString("CULong", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("endptr", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strxfrm", symbols.NewTypeFromString("usz", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("system", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("timegm", symbols.NewTypeFromString("Time_t", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timeptr", "Tm", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tmpnam", symbols.NewTypeFromString("ZString", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ungetc", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unsetenv", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("name", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewTypeFromString("isz", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("fd", "Fd", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("count", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fmemopen", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getline", symbols.NewTypeFromString("isz", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("linep", "char", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("linecapp", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("timespec_get", symbols.NewTypeFromString("int", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ts", "TimeSpec", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("nanosleep", symbols.NewTypeFromString("int", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("req", "TimeSpec", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("remaining", "TimeSpec", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ctime", symbols.NewTypeFromString("ZString", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", "Time_t", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("time", symbols.NewTypeFromString("Time_t", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", "Time_t", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_usable_size", symbols.NewTypeFromString("usz", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_size", symbols.NewTypeFromString("usz", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("aligned_alloc", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("align", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_size", symbols.NewTypeFromString("usz", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("aligned_alloc", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("align", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_size", symbols.NewTypeFromString("usz", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("longjmp", symbols.NewTypeFromString("void", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", "JmpBuf", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setjmp", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", "JmpBuf", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("count", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memcpy", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memmove", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memset", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "CInt", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fseek", symbols.NewTypeFromString("int", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "SeekIndex", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("whence", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fopen", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("filename", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("freopen", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("filename", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fwrite", symbols.NewTypeFromString("usz", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("nmemb", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fread", symbols.NewTypeFromString("usz", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("nmemb", "usz", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fclose", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fflush", symbols.NewTypeFromString("int", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fputc", symbols.NewTypeFromString("int", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fgets", symbols.NewTypeFromString("char*", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fgetc", symbols.NewTypeFromString("int", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("feof", symbols.NewTypeFromString("int", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putc", symbols.NewTypeFromString("int", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putchar", symbols.NewTypeFromString("int", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", "int", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("puts", symbols.NewTypeFromString("int", "libc"), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", "ZString", "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build())

	// Define module libc::errno
	module = moduleCollection["libc::errno"]
	module.AddVariable(symbols.NewVariableBuilder("E2BIG", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EACCES", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EADDRINUSE", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EADDRNOTAVAIL", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EAFNOSUPPORT", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EAGAIN", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EALREADY", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EAUTH", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADARCH", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADEXEC", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADF", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADMACHO", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADMSG", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADRPC", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBUSY", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECANCELED", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECHILD", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNABORTED", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNREFUSED", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNRESET", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDEADLK", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDESTADDRREQ", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDEVERR", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDOM", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDQUOT", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EEXIST", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EFAULT", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EFBIG", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EFTYPE", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EHOSTDOWN", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EHOSTUNREACH", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EIDRM", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EILSEQ", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINPROGRESS", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINTR", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINVAL", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EIO", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EISCONN", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EISDIR", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ELOOP", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMFILE", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMLINK", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMSGSIZE", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMULTIHOP", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENAMETOOLONG", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENEEDAUTH", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETDOWN", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETRESET", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETUNREACH", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENFILE", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOATTR", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOBUFS", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENODATA", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENODEV", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOENT", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOEXEC", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOLCK", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOLINK", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOMEM", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOMSG", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOPROTOOPT", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOSPC", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOSR", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOSTR", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOSYS", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTBLK", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTCONN", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTDIR", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTEMPTY", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTSOCK", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTSUP", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTTY", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENXIO", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EOPNOTSUPP", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EOVERFLOW", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPERM", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPFNOSUPPORT", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPIPE", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROCLIM", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROCUNAVAIL", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROGMISMATCH", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROGUNAVAIL", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROTO", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROTONOSUPPORT", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROTOTYPE", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPWROFF", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERANGE", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EROFS", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERPCMISMATCH", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESHLIBVERS", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESHUTDOWN", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESOCKTNOSUPPORT", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESPIPE", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESRCH", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESTALE", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ETIME", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ETIMEDOUT", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ETXTBSY", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EUSERS", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EWOULDBLOCK", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXDEV", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("OK", "Errno", "libc::errno", "<stdlib-path>/libc/libc.c3").Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddFunction(symbols.NewFunctionBuilder("to_timespec", symbols.NewTypeFromString("TimeSpec", "libc"), "libc", "<stdlib-path>/libc/libc_extra.c3").WithTypeIdentifier("NanoDuration").WithArgument(symbols.NewVariableBuilder("self", "NanoDuration", "libc", "<stdlib-path>/libc/libc_extra.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_timespec", symbols.NewTypeFromString("TimeSpec", "libc"), "libc", "<stdlib-path>/libc/libc_extra.c3").WithTypeIdentifier("Duration").WithArgument(symbols.NewVariableBuilder("self", "Duration", "libc", "<stdlib-path>/libc/libc_extra.c3").Build()).WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddStruct(symbols.NewStructBuilder("Stat", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_dev", "Dev_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_mode", "Mode_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_nlink", "Nlink_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_ino", "Ino_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_uid", "Uid_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_gid", "Gid_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_rdev", "Dev_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_atimespec", "Timespec", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_mtimespec", "Timespec", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_ctimespec", "Timespec", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_birthtimespec", "Timespec", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_size", "Off_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_blocks", "Blkcnt_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_blocksize", "Blksize_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_flags", "uint", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_gen", "uint", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_lspare", "int", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_qspare", "long", "libc", "<stdlib-path>/libc/os/darwin.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blkcnt_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blksize_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Dev_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ino_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Mode_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Nlink_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stat", symbols.NewTypeFromString("int", "libc"), "libc", "<stdlib-path>/libc/os/darwin.c3").WithArgument(symbols.NewVariableBuilder("str", "ZString", "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("stat", "Stat", "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sysctl", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/os/darwin.c3").WithArgument(symbols.NewVariableBuilder("name", "CInt", "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("namelen", "CUInt", "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldp", "void", "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldlenp", "usz", "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("newp", "void", "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("newlen", "usz", "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithoutSourceCode().Build())

	// Define module libc::os
	module = moduleCollection["libc::os"]
	module.AddVariable(symbols.NewVariableBuilder("ERRNO_DEFAULT", "", "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).AddVariable(symbols.NewVariableBuilder("_errno_c3", "int", "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).AddFunction(symbols.NewFunctionBuilder("__errno_location", symbols.NewTypeFromString("int*", "libc::os"), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewTypeFromString("int", "libc::os"), "libc::os", "<stdlib-path>/libc/os/errno.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewTypeFromString("void", "libc::os"), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", "int", "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__error", symbols.NewTypeFromString("int*", "libc::os"), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewTypeFromString("int", "libc::os"), "libc::os", "<stdlib-path>/libc/os/errno.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewTypeFromString("void", "libc::os"), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", "int", "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewTypeFromString("int", "libc::os"), "libc::os", "<stdlib-path>/libc/os/errno.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewTypeFromString("void", "libc::os"), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", "int", "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_get_errno", symbols.NewTypeFromString("void", "libc::os"), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("result", "int", "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_set_errno", symbols.NewTypeFromString("void", "libc::os"), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", "int", "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewTypeFromString("void", "libc::os"), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", "int", "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewTypeFromString("int", "libc::os"), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddStruct(symbols.NewStructBuilder("Stat", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_dev", "Dev_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_ino", "Ino_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_mode", "Mode_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_nlink", "Nlink_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_uid", "Uid_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_gid", "Gid_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_rdev", "Dev_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("__pad1", "CInt", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_size", "Off_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_blksize", "Blksize_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("__pad2", "CInt", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_blocks", "Blkcnt_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_atime", "Time_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_atime_nsec", "long", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_mtime", "Time_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_mtime_nsec", "long", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_ctime", "Time_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_ctime_nsec", "long", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("__unused", "CInt", "libc", "<stdlib-path>/libc/os/linux.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blkcnt64_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blkcnt_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blksize_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Dev_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ino64_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ino_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Mode_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Nlink_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stat", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/os/linux.c3").WithArgument(symbols.NewVariableBuilder("path", "ZString", "libc", "<stdlib-path>/libc/os/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("stat", "Stat", "libc", "<stdlib-path>/libc/os/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/os/linux.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs_conf", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/os/linux.c3").WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddVariable(symbols.NewVariableBuilder("RTLD_GLOBAL", "int", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("RTLD_LAZY", "int", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("RTLD_LOCAL", "int", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("RTLD_NOW", "int", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("SA_ONSTACK", "CUInt", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("SA_RESETHAND", "CUInt", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("SA_RESTART", "CUInt", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("SA_SIGINFO", "CUInt", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddStruct(symbols.NewStructBuilder("Sigaction", "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_handler", "SignalFunction", "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_sigaction", "SigActionFunction", "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_flags", "CInt", "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_mask", "Sigset_t", "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_flags", "CInt", "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_restorer", "void", "libc", "<stdlib-path>/libc/os/posix.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Stack_t", "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ss_sp", "void", "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ss_size", "usz", "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ss_flags", "CInt", "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ss_flags", "CInt", "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ss_size", "usz", "libc", "<stdlib-path>/libc/os/posix.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Gid_t", "libc", "<stdlib-path>/libc/os/posix.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Pid_t", "libc", "<stdlib-path>/libc/os/posix.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("SigActionFunction", "libc", "<stdlib-path>/libc/os/posix.c3").WithResolvesTo("fn void(CInt, void*, void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Sigset_t", "libc", "<stdlib-path>/libc/os/posix.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Uid_t", "libc", "<stdlib-path>/libc/os/posix.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dlopen", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("path", "ZString", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", "int", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dlclose", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "void", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dlsym", symbols.NewTypeFromString("void*", "libc"), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("handle", "void", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("symbol", "ZString", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sigaltstack", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("ss", "Stack_t", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ss", "Stack_t", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sigaction", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("signum", "CInt", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("action", "Sigaction", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldaction", "Sigaction", "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddStruct(symbols.NewStructBuilder("SystemInfo", "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwOemId", "uint", "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("wProcessorArchitecture", "ushort", "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("wReserved", "ushort", "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwPageSize", "uint", "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("lpMinimumApplicationAddress", "void", "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("lpMaximumApplicationAddress", "void", "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwActiveProcessorMask", "usz", "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwNumberOfProcessors", "uint", "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwProcessorType", "uint", "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwAllocationGranularity", "uint", "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("wProcessorLevel", "ushort", "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("wProcessorRevision", "ushort", "libc", "<stdlib-path>/libc/os/win32.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("close", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_close").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("difftime", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_difftime64").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("fdopen", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_fdopen").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("fileno", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_fileno").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("fseek", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_fseeki64").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ftell", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_ftelli64").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("mktime", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_mktime64").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("timegm", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_mkgmtime64").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__acrt_iob_func", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("c", "CInt", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_close", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", "Fd", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_difftime64", symbols.NewTypeFromString("double", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("time1", "Time_t", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("time2", "Time_t", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_fdopen", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", "Fd", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "ZString", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_fileno", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("stream", "CFile", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_fseeki64", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "CFile", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "long", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "int", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_ftelli64", symbols.NewTypeFromString("CLong", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "CFile", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_get_timezone", symbols.NewTypeFromString("Errno", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("timezone", "CLong", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_gmtime64_s", symbols.NewTypeFromString("Tm*", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("buf", "Tm", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("timer", "Time_t", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_localtime64_s", symbols.NewTypeFromString("Tm*", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("buf", "Tm", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("timer", "Time_t", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_mkgmtime64", symbols.NewTypeFromString("Time_t", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("timeptr", "Tm", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_mktime64", symbols.NewTypeFromString("Time_t", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("timeptr", "Tm", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_msize", symbols.NewTypeFromString("usz", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_read", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", "Fd", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "void", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer_size", "CUInt", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_setjmp", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("frameptr", "void", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "JmpBuf", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_wfopen", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "WString", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "WString", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_wfreopen", symbols.NewTypeFromString("CFile", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "WString", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "WString", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "CFile", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_write", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", "Fd", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "void", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("count", "CUInt", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_wremove", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "WString", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_system_info", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "SystemInfo", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("localtime_r", symbols.NewTypeFromString("Tm*", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("timer", "Time_t", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", "Tm", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setjmp", symbols.NewTypeFromString("CInt", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("buffer", "JmpBuf", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gmtime_r", symbols.NewTypeFromString("Tm*", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("timer", "Time_t", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", "Tm", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewTypeFromString("isz", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", "Fd", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "void", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer_size", "usz", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewTypeFromString("isz", "libc"), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", "Fd", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "void", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("count", "usz", "libc", "<stdlib-path>/libc/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math
	module = moduleCollection["std::math"]
	module.AddVariable(symbols.NewVariableBuilder("DIV_1_SQRT2", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DIV_2_PI", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DIV_2_SQRTPI", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DIV_PI", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_DEC_DIGITS", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_DENORM_MIN", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_DIG", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_EPSILON", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MANT_DIG", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MAX", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MAX_10_EXP", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MAX_EXP", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MIN", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MIN_10_EXP", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MIN_EXP", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("E", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_DEC_DIGITS", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_DENORM_MIN", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_DIG", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_EPSILON", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MANT_DIG", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MAX", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MAX_10_EXP", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MAX_EXP", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MIN", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MIN_10_EXP", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MIN_EXP", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_DEC_DIGITS", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_DENORM_MIN", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_DIG", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_EPSILON", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MANT_DIG", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MAX", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MAX_10_EXP", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MAX_EXP", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MIN", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MIN_10_EXP", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MIN_EXP", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("LN10", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("LN2", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG10E", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG2E", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI_2", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI_4", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("QUAD_MANT_DIG", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("SQRT2", "", "std::math", "<stdlib-path>/math/math.c3").Build()).AddDef(symbols.NewDefBuilder("Complex", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Complexf", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX2F_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::IDENTITY2(<float>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX2_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::IDENTITY2(<double>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX3F_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::IDENTITY3(<float>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX3_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::IDENTITY3(<double>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX4F_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::IDENTITY4(<float>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX4_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::IDENTITY4(<double>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix2", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix2f", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix3", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix3f", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix4", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix4f", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("QUATERNIONF_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("quaternion::IDENTITY(<float>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("QUATERNION_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("quaternion::IDENTITY(<double>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Quaternion", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Quaternionf", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("complex_identity", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("complex::identity(<double>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("complexf_identity", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("complex::identity(<float>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("matrix4_ortho", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::ortho(<double>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("matrix4_perspective", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::perspective(<double>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("matrix4f_ortho", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::ortho(<float>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("matrix4f_perspective", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::perspective(<float>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("quaternion_identity", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("quaternion::identity(<double>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("quaternionf_identity", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("quaternion::identity(<float>)").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("RoundingMode", "int", "std::math", "<stdlib-path>/math/math.c3").WithEnumerator(symbols.NewEnumeratorBuilder("TOWARD_ZERO", "<stdlib-path>/math/math.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("RoundingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TO_NEAREST", "<stdlib-path>/math/math.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("RoundingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TOWARD_INFINITY", "<stdlib-path>/math/math.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("RoundingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TOWARD_NEG_INFINITY", "<stdlib-path>/math/math.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("RoundingMode").Build()).Build()).AddFault(symbols.NewFaultBuilder("MathError", "", "std::math", "<stdlib-path>/math/math.c3").WithConstant(symbols.NewFaultConstantBuilder("OVERFLOW", "std::math", "../../../assets/c3c/lib/std/math/math.c3").WithFaultName("MathError").Build()).Build()).AddFault(symbols.NewFaultBuilder("MatrixError", "", "std::math", "<stdlib-path>/math/math.c3").WithConstant(symbols.NewFaultConstantBuilder("MATRIX_INVERSE_DOESNT_EXIST", "std::math", "../../../assets/c3c/lib/std/math/math.c3").WithFaultName("MatrixError").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("deg_to_rad", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("abs", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sign", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atan2", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sincos", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atan", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atanh", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acos", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acosh", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("asin", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("asinh", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ceil", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clamp", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("lower", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("upper", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copysign", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mag", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sgn", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cos", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cosec", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cosech", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cosh", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cotan", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cotanh", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exp", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exp2", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("floor", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fma", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hypot", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ln", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log2", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log10", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("max", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("min", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("muladd", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("nearbyint", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pow", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("frexp", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("e", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("signbit", symbols.NewTypeFromString("int", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rint", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("round", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("round_to_decimals", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("decimal_places", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("roundeven", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sec", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sech", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sin", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sinh", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sqr", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sqrt", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tan", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_finite", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_nan", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_inf", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tanh", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trunc", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lerp", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reflect", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("normalize", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("select", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mask", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("then_value", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("else_value", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.ceil", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.clamp", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("lower", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("upper", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.copysign", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mag", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sgn", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.floor", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.fma", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.muladd", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.nearbyint", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.pow", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.rint", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.round", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.roundeven", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.trunc", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].sum", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].product", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].max", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].min", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].ceil", symbols.NewTypeFromString("float[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].clamp", symbols.NewTypeFromString("float[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("lower", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("upper", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].copysign", symbols.NewTypeFromString("float[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mag", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sgn", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].fma", symbols.NewTypeFromString("float[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].floor", symbols.NewTypeFromString("float[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].nearbyint", symbols.NewTypeFromString("float[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].pow", symbols.NewTypeFromString("float[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].rint", symbols.NewTypeFromString("float[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].round", symbols.NewTypeFromString("float[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].roundeven", symbols.NewTypeFromString("float[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].trunc", symbols.NewTypeFromString("float[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].dot", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].length", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].distance", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].normalize", symbols.NewTypeFromString("float[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].lerp", symbols.NewTypeFromString("float[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].reflect", symbols.NewTypeFromString("float[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].equals", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_lt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_le", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_eq", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_gt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_ge", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_ne", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.ceil", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.clamp", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("lower", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("upper", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.copysign", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mag", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sgn", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.floor", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.fma", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.muladd", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.nearbyint", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.pow", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.rint", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.round", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.roundeven", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.trunc", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].sum", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].product", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].max", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].min", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].ceil", symbols.NewTypeFromString("double[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].clamp", symbols.NewTypeFromString("double[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("lower", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("upper", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].copysign", symbols.NewTypeFromString("double[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mag", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sgn", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].floor", symbols.NewTypeFromString("double[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].fma", symbols.NewTypeFromString("double[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].nearbyint", symbols.NewTypeFromString("double[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].pow", symbols.NewTypeFromString("double[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].rint", symbols.NewTypeFromString("double[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].round", symbols.NewTypeFromString("double[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].roundeven", symbols.NewTypeFromString("double[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].trunc", symbols.NewTypeFromString("double[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].dot", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].length", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].distance", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].normalize", symbols.NewTypeFromString("double[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].reflect", symbols.NewTypeFromString("double[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].lerp", symbols.NewTypeFromString("double[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].equals", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_lt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_le", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_eq", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_gt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_ge", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_ne", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_lt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_le", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_eq", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_gt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_ge", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_ne", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].sum", symbols.NewTypeFromString("ichar", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].product", symbols.NewTypeFromString("ichar", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].and", symbols.NewTypeFromString("ichar", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].or", symbols.NewTypeFromString("ichar", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].xor", symbols.NewTypeFromString("ichar", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].max", symbols.NewTypeFromString("ichar", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].min", symbols.NewTypeFromString("ichar", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_lt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_le", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_eq", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_gt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_ge", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_ne", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].sum", symbols.NewTypeFromString("short", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].product", symbols.NewTypeFromString("short", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].and", symbols.NewTypeFromString("short", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].or", symbols.NewTypeFromString("short", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].xor", symbols.NewTypeFromString("short", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].max", symbols.NewTypeFromString("short", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].min", symbols.NewTypeFromString("short", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_lt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_le", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_eq", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_gt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_ge", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_ne", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].sum", symbols.NewTypeFromString("int", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].product", symbols.NewTypeFromString("int", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].and", symbols.NewTypeFromString("int", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].or", symbols.NewTypeFromString("int", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].xor", symbols.NewTypeFromString("int", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].max", symbols.NewTypeFromString("int", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].min", symbols.NewTypeFromString("int", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_lt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_le", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_eq", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_gt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_ge", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_ne", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].sum", symbols.NewTypeFromString("long", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].product", symbols.NewTypeFromString("long", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].and", symbols.NewTypeFromString("long", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].or", symbols.NewTypeFromString("long", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].xor", symbols.NewTypeFromString("long", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].max", symbols.NewTypeFromString("long", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].min", symbols.NewTypeFromString("long", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_lt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_le", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_eq", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_gt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_ge", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_ne", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].sum", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].product", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].and", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].or", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].xor", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].max", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].min", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_lt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_le", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_eq", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_gt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_ge", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_ne", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].sum", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].product", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].and", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].or", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].xor", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].max", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].min", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "bool", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_lt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_le", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_eq", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_gt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_ge", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_ne", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].sum", symbols.NewTypeFromString("char", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].product", symbols.NewTypeFromString("char", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].and", symbols.NewTypeFromString("char", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].or", symbols.NewTypeFromString("char", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].xor", symbols.NewTypeFromString("char", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].max", symbols.NewTypeFromString("char", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].min", symbols.NewTypeFromString("char", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_lt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_le", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_eq", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_gt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_ge", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_ne", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].sum", symbols.NewTypeFromString("ushort", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].product", symbols.NewTypeFromString("ushort", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].and", symbols.NewTypeFromString("ushort", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].or", symbols.NewTypeFromString("ushort", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].xor", symbols.NewTypeFromString("ushort", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].max", symbols.NewTypeFromString("ushort", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].min", symbols.NewTypeFromString("ushort", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_lt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_le", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_eq", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_gt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_ge", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_ne", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].sum", symbols.NewTypeFromString("uint", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].product", symbols.NewTypeFromString("uint", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].and", symbols.NewTypeFromString("uint", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].or", symbols.NewTypeFromString("uint", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].xor", symbols.NewTypeFromString("uint", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].max", symbols.NewTypeFromString("uint", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].min", symbols.NewTypeFromString("uint", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_lt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_le", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_eq", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_gt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_ge", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_ne", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].sum", symbols.NewTypeFromString("ulong", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].product", symbols.NewTypeFromString("ulong", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].and", symbols.NewTypeFromString("ulong", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].or", symbols.NewTypeFromString("ulong", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].xor", symbols.NewTypeFromString("ulong", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].max", symbols.NewTypeFromString("ulong", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].min", symbols.NewTypeFromString("ulong", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_lt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_le", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_eq", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_gt", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_ge", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_ne", symbols.NewTypeFromString("bool[]", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].sum", symbols.NewTypeFromString("uint128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].product", symbols.NewTypeFromString("uint128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].and", symbols.NewTypeFromString("uint128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].or", symbols.NewTypeFromString("uint128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].xor", symbols.NewTypeFromString("uint128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].max", symbols.NewTypeFromString("uint128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].min", symbols.NewTypeFromString("uint128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.sat_add", symbols.NewTypeFromString("char", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.sat_sub", symbols.NewTypeFromString("char", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.sat_mul", symbols.NewTypeFromString("char", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.sat_shl", symbols.NewTypeFromString("char", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.overflow_add", symbols.NewTypeFromString("char!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.overflow_sub", symbols.NewTypeFromString("char!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.overflow_mul", symbols.NewTypeFromString("char!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.sat_add", symbols.NewTypeFromString("ichar", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.sat_sub", symbols.NewTypeFromString("ichar", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.sat_mul", symbols.NewTypeFromString("ichar", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.sat_shl", symbols.NewTypeFromString("ichar", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.overflow_add", symbols.NewTypeFromString("ichar!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.overflow_sub", symbols.NewTypeFromString("ichar!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.overflow_mul", symbols.NewTypeFromString("ichar!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.sat_add", symbols.NewTypeFromString("ushort", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.sat_sub", symbols.NewTypeFromString("ushort", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.sat_mul", symbols.NewTypeFromString("ushort", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.sat_shl", symbols.NewTypeFromString("ushort", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.overflow_add", symbols.NewTypeFromString("ushort!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.overflow_sub", symbols.NewTypeFromString("ushort!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.overflow_mul", symbols.NewTypeFromString("ushort!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.sat_add", symbols.NewTypeFromString("short", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.sat_sub", symbols.NewTypeFromString("short", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.sat_mul", symbols.NewTypeFromString("short", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.sat_shl", symbols.NewTypeFromString("short", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.overflow_add", symbols.NewTypeFromString("short!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.overflow_sub", symbols.NewTypeFromString("short!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.overflow_mul", symbols.NewTypeFromString("short!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.sat_add", symbols.NewTypeFromString("uint", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.sat_sub", symbols.NewTypeFromString("uint", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.sat_mul", symbols.NewTypeFromString("uint", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.sat_shl", symbols.NewTypeFromString("uint", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.overflow_add", symbols.NewTypeFromString("uint!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.overflow_sub", symbols.NewTypeFromString("uint!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.overflow_mul", symbols.NewTypeFromString("uint!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.sat_add", symbols.NewTypeFromString("int", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.sat_sub", symbols.NewTypeFromString("int", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.sat_mul", symbols.NewTypeFromString("int", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.sat_shl", symbols.NewTypeFromString("int", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.overflow_add", symbols.NewTypeFromString("int!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.overflow_sub", symbols.NewTypeFromString("int!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.overflow_mul", symbols.NewTypeFromString("int!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.sat_add", symbols.NewTypeFromString("ulong", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.sat_sub", symbols.NewTypeFromString("ulong", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.sat_mul", symbols.NewTypeFromString("ulong", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.sat_shl", symbols.NewTypeFromString("ulong", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.overflow_add", symbols.NewTypeFromString("ulong!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.overflow_sub", symbols.NewTypeFromString("ulong!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.overflow_mul", symbols.NewTypeFromString("ulong!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.sat_add", symbols.NewTypeFromString("long", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.sat_sub", symbols.NewTypeFromString("long", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.sat_mul", symbols.NewTypeFromString("long", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.sat_shl", symbols.NewTypeFromString("long", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.overflow_add", symbols.NewTypeFromString("long!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.overflow_sub", symbols.NewTypeFromString("long!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.overflow_mul", symbols.NewTypeFromString("long!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.sat_add", symbols.NewTypeFromString("uint128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.sat_sub", symbols.NewTypeFromString("uint128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.sat_mul", symbols.NewTypeFromString("uint128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.sat_shl", symbols.NewTypeFromString("uint128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.overflow_add", symbols.NewTypeFromString("uint128!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.overflow_sub", symbols.NewTypeFromString("uint128!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.overflow_mul", symbols.NewTypeFromString("uint128!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.sat_add", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.sat_sub", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.sat_mul", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.sat_shl", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.overflow_add", symbols.NewTypeFromString("int128!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.overflow_sub", symbols.NewTypeFromString("int128!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.overflow_mul", symbols.NewTypeFromString("int128!", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_odd", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_even", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_even", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_odd", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "char", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.is_even", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.is_odd", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ichar", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.is_even", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.is_odd", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ushort", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.is_even", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.is_odd", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "short", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.is_even", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.is_odd", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.is_even", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.is_odd", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.is_even", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.is_odd", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "ulong", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.is_even", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.is_odd", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "long", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.is_even", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.is_odd", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "uint128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.is_even", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.is_odd", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "int128", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_power_of_2", symbols.NewTypeFromString("bool", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_power_of_2", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals_vec", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("v1", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.high_word", symbols.NewTypeFromString("uint", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("d", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.low_word", symbols.NewTypeFromString("uint", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("d", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.word", symbols.NewTypeFromString("uint", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("d", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scalbn", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atan", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atanf", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atan2", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atan2f", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_sincos", symbols.NewTypeFromString("void", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_sincosf", symbols.NewTypeFromString("void", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_tan", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_tanf", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_scalbn", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_acos", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_asin", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_acosh", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_asinh", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atanh", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_acosf", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_asinf", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_acoshf", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_asinhf", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atanhf", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_frexp", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("e", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_frexpf", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("e", "int", "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("overflow_add_helper", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("overflow_sub_helper", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("overflow_mul_helper", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "", "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math
	module = moduleCollection["std::math"]
	module.AddFunction(symbols.NewFunctionBuilder("__roundevenf", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math_builtin.c3").WithArgument(symbols.NewVariableBuilder("f", "float", "std::math", "<stdlib-path>/math/math_builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__roundeven", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math_builtin.c3").WithArgument(symbols.NewVariableBuilder("d", "double", "std::math", "<stdlib-path>/math/math_builtin.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::complex
	module = moduleCollection["std::math::complex"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Real": symbols.NewGenericParameter("Real", "std::math::complex", "<stdlib-path>/math/math_complex.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("Complex", "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithStructMember("r", "Real", "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithStructMember(",", "Real", "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithStructMember("c", "Real", "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithStructMember("v", "Real", "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("identity", symbols.NewTypeFromString("Complex", "std::math::complex"), "std::math::complex", "<stdlib-path>/math/math_complex.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.add", symbols.NewTypeFromString("Complex", "std::math::complex"), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", "Complex", "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Complex", "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.add_each", symbols.NewTypeFromString("Complex", "std::math::complex"), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", "Complex", "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Real", "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.sub", symbols.NewTypeFromString("Complex", "std::math::complex"), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", "Complex", "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Complex", "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.sub_each", symbols.NewTypeFromString("Complex", "std::math::complex"), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", "Complex", "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Real", "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.scale", symbols.NewTypeFromString("Complex", "std::math::complex"), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", "Complex", "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "Real", "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.mul", symbols.NewTypeFromString("Complex", "std::math::complex"), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", "Complex", "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Complex", "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.div", symbols.NewTypeFromString("Complex", "std::math::complex"), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", "Complex", "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Complex", "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math::easing
	module = moduleCollection["std::math::easing"]
	module.AddFunction(symbols.NewFunctionBuilder("linear_none", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("linear_in", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("linear_out", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("linear_inout", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sine_in", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sine_out", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sine_inout", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("circ_in", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("circ_out", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("circ_inout", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cubic_in", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cubic_out", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cubic_inout", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("quad_in", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("quad_out", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("quad_inout", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("expo_in", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("expo_out", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("expo_inout", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("back_in", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("back_out", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("back_inout", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bounce_out", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bounce_in", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bounce_inout", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("elastic_in", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("elastic_out", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("elastic_inout", symbols.NewTypeFromString("float", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "float", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sq", symbols.NewTypeFromString("", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cube", symbols.NewTypeFromString("", "std::math::easing"), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math
	module = moduleCollection["std::math"]
	module.AddStruct(symbols.NewStructBuilder("Int128bits", "std::math", "<stdlib-path>/math/math_i128.c3").WithStructMember("ulow", "ulong", "std::math", "<stdlib-path>/math/math_i128.c3").WithStructMember(",", "ulong", "std::math", "<stdlib-path>/math/math_i128.c3").WithStructMember("uhigh", "ulong", "std::math", "<stdlib-path>/math/math_i128.c3").WithStructMember("ilow", "long", "std::math", "<stdlib-path>/math/math_i128.c3").WithStructMember(",", "long", "std::math", "<stdlib-path>/math/math_i128.c3").WithStructMember("ihigh", "long", "std::math", "<stdlib-path>/math/math_i128.c3").WithStructMember("all", "uint128", "std::math", "<stdlib-path>/math/math_i128.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__divti3", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "int128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "int128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__umodti3", symbols.NewTypeFromString("uint128", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("n", "uint128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "uint128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__udivti3", symbols.NewTypeFromString("uint128", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("n", "uint128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", "uint128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__modti3", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "int128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "int128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__lshrti3", symbols.NewTypeFromString("uint128", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "uint128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "uint", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__ashrti3", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "int128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "uint", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__ashlti3", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "int128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "uint", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__mulddi3", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "ulong", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "ulong", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__multi3", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "int128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "int128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__floattisf", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "int128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__floattidf", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "int128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__floatuntisf", symbols.NewTypeFromString("float", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "uint128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__floatuntidf", symbols.NewTypeFromString("double", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "uint128", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__fixunsdfti", symbols.NewTypeFromString("uint128", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "double", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__fixunssfti", symbols.NewTypeFromString("uint128", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "float", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__fixdfti", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "double", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__fixsfti", symbols.NewTypeFromString("int128", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "float", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float_from_i128", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", "", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float_from_u128", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", "", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fixuint", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fixint", symbols.NewTypeFromString("", "std::math"), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", "", "std::math", "<stdlib-path>/math/math_i128.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math::matrix
	module = moduleCollection["std::math::matrix"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Real": symbols.NewGenericParameter("Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("IDENTITY2", "Matrix2x2", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IDENTITY3", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IDENTITY4", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).AddStruct(symbols.NewStructBuilder("Matrix2x2", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m00", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m01", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m10", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m11", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m00", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m01", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m02", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m10", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m11", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m12", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m20", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m21", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m22", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m00", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m01", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m02", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m03", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m10", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m11", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m12", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m13", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m20", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m21", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m22", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m23", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m30", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m31", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m32", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m33", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("apply", symbols.NewTypeFromString("Real[2]", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", "Matrix2x2", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("vec", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("apply", symbols.NewTypeFromString("Real[3]", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("vec", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("apply", symbols.NewTypeFromString("Real[4]", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("vec", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mul", symbols.NewTypeFromString("Matrix2x2", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", "Matrix2x2", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Matrix2x2", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mul", symbols.NewTypeFromString("Matrix3x3", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mul", symbols.NewTypeFromString("Matrix4x4", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("a", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("component_mul", symbols.NewTypeFromString("Matrix2x2", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", "Matrix2x2", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("component_mul", symbols.NewTypeFromString("Matrix3x3", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("component_mul", symbols.NewTypeFromString("Matrix4x4", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add", symbols.NewTypeFromString("Matrix2x2", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", "Matrix2x2", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", "Matrix2x2", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add", symbols.NewTypeFromString("Matrix3x3", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add", symbols.NewTypeFromString("Matrix4x4", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sub", symbols.NewTypeFromString("Matrix2x2", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", "Matrix2x2", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", "Matrix2x2", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sub", symbols.NewTypeFromString("Matrix3x3", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sub", symbols.NewTypeFromString("Matrix4x4", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transpose", symbols.NewTypeFromString("Matrix2x2", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", "Matrix2x2", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transpose", symbols.NewTypeFromString("Matrix3x3", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transpose", symbols.NewTypeFromString("Matrix4x4", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("determinant", symbols.NewTypeFromString("Real", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", "Matrix2x2", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("determinant", symbols.NewTypeFromString("Real", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("determinant", symbols.NewTypeFromString("Real", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("adjoint", symbols.NewTypeFromString("Matrix2x2", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", "Matrix2x2", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("adjoint", symbols.NewTypeFromString("Matrix3x3", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("adjoint", symbols.NewTypeFromString("Matrix4x4", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("inverse", symbols.NewTypeFromString("Matrix2x2!", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", "Matrix2x2", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("inverse", symbols.NewTypeFromString("Matrix3x3!", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("inverse", symbols.NewTypeFromString("Matrix4x4!", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("translate", symbols.NewTypeFromString("Matrix3x3", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("translate", symbols.NewTypeFromString("Matrix4x4", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate", symbols.NewTypeFromString("Matrix3x3", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_z", symbols.NewTypeFromString("Matrix4x4", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_y", symbols.NewTypeFromString("Matrix4x4", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_x", symbols.NewTypeFromString("Matrix4x4", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scale", symbols.NewTypeFromString("Matrix3x3", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trace", symbols.NewTypeFromString("Real", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", "Matrix2x2", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trace", symbols.NewTypeFromString("Real", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", "Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trace", symbols.NewTypeFromString("Real", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scale", symbols.NewTypeFromString("Matrix4x4", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", "Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ortho", symbols.NewTypeFromString("Matrix4x4", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithArgument(symbols.NewVariableBuilder("left", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("right", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("top", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("bottom", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("near", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("far", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("perspective", symbols.NewTypeFromString("Matrix4x4", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithArgument(symbols.NewVariableBuilder("fov", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("aspect_ratio", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("near", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("far", "Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("matrix_component_mul", symbols.NewTypeFromString("", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithArgument(symbols.NewVariableBuilder("mat", "", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("val", "", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("matrix_add", symbols.NewTypeFromString("", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithArgument(symbols.NewVariableBuilder("mat", "", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", "", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("matrix_sub", symbols.NewTypeFromString("", "std::math::matrix"), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithArgument(symbols.NewVariableBuilder("mat", "", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", "", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("__cos", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cos.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cos.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cos.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("C0", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").Build()).AddVariable(symbols.NewVariableBuilder("C1", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").Build()).AddVariable(symbols.NewVariableBuilder("C2", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").Build()).AddVariable(symbols.NewVariableBuilder("C3", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").Build()).AddFunction(symbols.NewFunctionBuilder("__cosdf", symbols.NewTypeFromString("float", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("__sin", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sin.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sin.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sin.c3").Build()).WithArgument(symbols.NewVariableBuilder("iy", "int", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sin.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("__sindf", symbols.NewTypeFromString("float", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sindf.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sindf.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("TAN_T", "double[*]", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tan.c3").Build()).AddFunction(symbols.NewFunctionBuilder("__tan", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tan.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tan.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tan.c3").Build()).WithArgument(symbols.NewVariableBuilder("odd", "int", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tan.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("TANDF", "double[*]", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tandf.c3").Build()).AddFunction(symbols.NewFunctionBuilder("__tandf", symbols.NewTypeFromString("float", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tandf.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tandf.c3").Build()).WithArgument(symbols.NewVariableBuilder("odd", "int", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tandf.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("AT", "double[*]", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("ATANHI", "double[*]", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("ATANHIF", "float[*]", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("ATANLO", "double[*]", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("ATANLOF", "float[*]", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("ATF", "float[*]", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI_F", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI_LO", "", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI_LO_F", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddFunction(symbols.NewFunctionBuilder("_atan", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atanf", symbols.NewTypeFromString("float", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("extract_words", symbols.NewTypeFromString("void", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").WithArgument(symbols.NewVariableBuilder("d", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithArgument(symbols.NewVariableBuilder("hi", "uint", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", "uint", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atan2", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").WithArgument(symbols.NewVariableBuilder("y", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atan2f", symbols.NewTypeFromString("float", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").WithArgument(symbols.NewVariableBuilder("y", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_ceil", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ceil.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ceil.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_ceilf", symbols.NewTypeFromString("float", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ceil.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ceil.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_cosf", symbols.NewTypeFromString("float", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/cos.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/cos.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_cos", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/cos.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/cos.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_top12f", symbols.NewTypeFromString("uint", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_exp2f", symbols.NewTypeFromString("float", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_exp2_specialcase", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").WithArgument(symbols.NewVariableBuilder("tmp", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).WithArgument(symbols.NewVariableBuilder("sbits", "ulong", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).WithArgument(symbols.NewVariableBuilder("ki", "ulong", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_top12d", symbols.NewTypeFromString("uint", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_exp2", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_floor", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/floor.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/floor.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_floorf", symbols.NewTypeFromString("float", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/floor.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/floor.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("EXP2F_POLY_ORDER", "", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP2F_TABLE_BITS", "", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP2_POLY_ORDER", "", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_DATA_WIDTH", "", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_POLY_ORDER", "", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_TABLE_BITS", "", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S1PI2", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S2PI2", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S3PI2", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S4PI2", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("TOINT", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("TOINT15", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("TOINTF", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("WANT_ROUNDING", "bool", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__EXP2F_DATA", "Exp2fData", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__EXP2_DATA", "Exp2Data", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddStruct(symbols.NewStructBuilder("Exp2Data", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("invln2N", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("shift", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("negln2hiN", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("negln2loN", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("poly", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("exp2_shift", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("exp2_poly", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("tab", "ulong", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Exp2fData", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("tab", "ulong", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("shift_scaled", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("poly", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("shift", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("invln2_scaled", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("poly_scaled", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__math_uflowf", symbols.NewTypeFromString("float", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("sign", "uint", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__math_uflow", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("sign", "ulong", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__math_oflowf", symbols.NewTypeFromString("float", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("sign", "uint", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__math_oflow", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("sign", "ulong", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__math_xflow", symbols.NewTypeFromString("", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("sign", "", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", "", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("force_eval_add", symbols.NewTypeFromString("", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("x", "", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", "", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("powf_broken", symbols.NewTypeFromString("float", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pow_broken", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("INIT_JK", "int[*]", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPIO2", "int[*]", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIO2", "double[*]", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).AddFunction(symbols.NewFunctionBuilder("__rem_pio2f", symbols.NewTypeFromString("int", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__rem_pio2_large", symbols.NewTypeFromString("int", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("e0", "int", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("nx", "int", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("prec", "int", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__rem_pio2", symbols.NewTypeFromString("int", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_round", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/round.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/round.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_roundf", symbols.NewTypeFromString("float", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/round.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/round.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_scalbn", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/scalbn.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/scalbn.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "int", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/scalbn.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_sinf", symbols.NewTypeFromString("float", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sin.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sin", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sin.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sin.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("sincosf", symbols.NewTypeFromString("void", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithArgument(symbols.NewVariableBuilder("sin", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithArgument(symbols.NewVariableBuilder("cos", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sincos", symbols.NewTypeFromString("void", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithArgument(symbols.NewVariableBuilder("sin", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithArgument(symbols.NewVariableBuilder("cos", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("tan", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/tan.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/tan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tanf", symbols.NewTypeFromString("float", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/tan.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/tan.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("sincos_broken", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trig.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trig.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_trunc", symbols.NewTypeFromString("double", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trunc.c3").WithArgument(symbols.NewVariableBuilder("x", "double", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trunc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_truncf", symbols.NewTypeFromString("float", "std::math::nolibc"), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trunc.c3").WithArgument(symbols.NewVariableBuilder("x", "float", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trunc.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::quaternion
	module = moduleCollection["std::math::quaternion"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Real": symbols.NewGenericParameter("Real", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("IDENTITY", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).AddStruct(symbols.NewStructBuilder("Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithStructMember("i", "Real", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithStructMember(",", "Real", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithStructMember("j", "Real", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithStructMember(",", "Real", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithStructMember("k", "Real", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithStructMember(",", "Real", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithStructMember("l", "Real", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithStructMember("v", "Real", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("identity", symbols.NewTypeFromString("Quaternion", "std::math::quaternion"), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.add", symbols.NewTypeFromString("Quaternion", "std::math::quaternion"), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("a", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.add_each", symbols.NewTypeFromString("Quaternion", "std::math::quaternion"), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("a", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Real", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.sub", symbols.NewTypeFromString("Quaternion", "std::math::quaternion"), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("a", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.sub_each", symbols.NewTypeFromString("Quaternion", "std::math::quaternion"), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("a", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Real", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.scale", symbols.NewTypeFromString("Quaternion", "std::math::quaternion"), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("a", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", "Real", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.normalize", symbols.NewTypeFromString("Quaternion", "std::math::quaternion"), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("q", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.length", symbols.NewTypeFromString("Real", "std::math::quaternion"), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("q", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.lerp", symbols.NewTypeFromString("Quaternion", "std::math::quaternion"), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("q1", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("q2", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", "Real", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.to_matrixf", symbols.NewTypeFromString("Matrix4f", "std::math::quaternion"), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("q", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.to_matrix", symbols.NewTypeFromString("Matrix4", "std::math::quaternion"), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("q", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("nlerp", symbols.NewTypeFromString("Quaternion", "std::math::quaternion"), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithTypeIdentifier("Quaternion").WithArgument(symbols.NewVariableBuilder("q1", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("q2", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", "Real", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("invert", symbols.NewTypeFromString("Quaternion", "std::math::quaternion"), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithTypeIdentifier("Quaternion").WithArgument(symbols.NewVariableBuilder("q", "", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("slerp", symbols.NewTypeFromString("Quaternion", "std::math::quaternion"), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithTypeIdentifier("Quaternion").WithArgument(symbols.NewVariableBuilder("q1", "", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("q2", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", "Real", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mul", symbols.NewTypeFromString("Quaternion", "std::math::quaternion"), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithTypeIdentifier("Quaternion").WithArgument(symbols.NewVariableBuilder("a", "", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("into_matrix", symbols.NewTypeFromString("", "std::math::quaternion"), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("q", "Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddFunction(symbols.NewFunctionBuilder("is_random", symbols.NewTypeFromString("bool", "std::math::random"), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("random", "", "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("random", "", "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", "", "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seed_entropy", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("random", "", "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next", symbols.NewTypeFromString("int", "std::math::random"), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("random", "", "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", "int", "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rand", symbols.NewTypeFromString("int", "std::math::random"), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("max", "int", "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bool", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("random", "", "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_float", symbols.NewTypeFromString("float", "std::math::random"), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("random", "", "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_double", symbols.NewTypeFromString("double", "std::math::random"), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("random", "", "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@long_to_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@int_to_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@short_to_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@char_to_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@random_value_to_bytes", symbols.NewTypeFromString("", "std::math::random"), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math::vector
	module = moduleCollection["std::math::vector"]
	module.AddDef(symbols.NewDefBuilder("Vec2", "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Vec2f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Vec4", "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Vec4f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2f.length_sq", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec2f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec3f.length_sq", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec4f.length_sq", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec4f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2.length_sq", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec2", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec3.length_sq", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec4.length_sq", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec4", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2f.distance_sq", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec2f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "Vec2f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec3f.distance_sq", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec4f.distance_sq", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec4f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "Vec4f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2.distance_sq", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec2", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "Vec2", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec3.distance_sq", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec4.distance_sq", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec4", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "Vec4", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2f.transform", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec2f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", "Matrix4f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2f.rotate", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec2f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", "float", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2f.angle", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec2f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "Vec2f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2.transform", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec2", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", "Matrix4", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2.rotate", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec2", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", "double", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2.angle", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec2", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "Vec2", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2f.clamp_mag", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec2f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", "float", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", "float", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec3f.clamp_mag", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", "float", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", "float", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec4f.clamp_mag", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec4f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", "float", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", "float", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2.clamp_mag", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec2", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", "double", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", "double", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec3.clamp_mag", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", "double", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", "double", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec4.clamp_mag", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", "Vec4", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", "double", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", "double", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("towards", symbols.NewTypeFromString("Vec2f", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec2f").WithArgument(symbols.NewVariableBuilder("self", "Vec2f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", "Vec2f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", "float", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("towards", symbols.NewTypeFromString("Vec3f", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", "float", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("towards", symbols.NewTypeFromString("Vec4f", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec4f").WithArgument(symbols.NewVariableBuilder("self", "Vec4f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", "Vec4f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", "float", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("towards", symbols.NewTypeFromString("Vec2", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec2").WithArgument(symbols.NewVariableBuilder("self", "Vec2", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", "Vec2", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", "double", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("towards", symbols.NewTypeFromString("Vec3", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", "double", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("towards", symbols.NewTypeFromString("Vec4", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec4").WithArgument(symbols.NewVariableBuilder("self", "Vec4", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", "Vec4", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", "double", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cross", symbols.NewTypeFromString("Vec3f", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cross", symbols.NewTypeFromString("Vec3", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("perpendicular", symbols.NewTypeFromString("Vec3f", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("perpendicular", symbols.NewTypeFromString("Vec3", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("barycenter", symbols.NewTypeFromString("Vec3f", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("barycenter", symbols.NewTypeFromString("Vec3", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transform", symbols.NewTypeFromString("Vec3f", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", "Matrix4f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transform", symbols.NewTypeFromString("Vec3", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", "Matrix4", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("angle", symbols.NewTypeFromString("float", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("angle", symbols.NewTypeFromString("double", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("refract", symbols.NewTypeFromString("Vec3f", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", "float", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("refract", symbols.NewTypeFromString("Vec3", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", "double", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ortho_normalize", symbols.NewTypeFromString("void", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v1", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ortho_normalized", symbols.NewTypeFromString("void", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v1", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("matrix4f_look_at", symbols.NewTypeFromString("Matrix4f", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("eye", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("up", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("matrix4_look_at", symbols.NewTypeFromString("Matrix4", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("eye", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("up", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_quat", symbols.NewTypeFromString("Vec3f", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("q", "Quaternionf", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_quat", symbols.NewTypeFromString("Vec3", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("q", "Quaternion", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_axis", symbols.NewTypeFromString("Vec3f", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("axis", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", "float", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_axis", symbols.NewTypeFromString("Vec3", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("axis", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", "double", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unproject", symbols.NewTypeFromString("Vec3f", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", "Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("projection", "Matrix4f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("view", "Matrix4f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unproject", symbols.NewTypeFromString("Vec3", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", "Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("projection", "Matrix4", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("view", "Matrix4", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("towards", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clamp_magnitude", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("perpendicular3", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cross3", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v1", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transform2", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transform3", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("angle3", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v1", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ortho_normalize3", symbols.NewTypeFromString("void", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v1", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_by_quat3", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("q", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_axis_angle", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("axis", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("matrix_look_at", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("eye", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("up", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unproject3", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("m1", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("m2", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("barycenter3", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("p", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("refract3", symbols.NewTypeFromString("", "std::math::vector"), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", "", "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("MUL_LCG128", "", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG16", "", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG32", "", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG64", "", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI128", "", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI16", "", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI32", "", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI64", "", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg128Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg128Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg128Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg128Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg128Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg128Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg128Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg64Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", "char", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg64Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg64Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg64Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg64Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg64Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg64Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg32Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", "char", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg32Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg32Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg32Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg32Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg32Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg32Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg16Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", "char", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg16Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg16Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg16Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg16Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg16Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Lcg16Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("MUL_MCG128", "", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_MCG16", "", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_MCG32", "", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_MCG64", "", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg128Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", "char", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg128Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg128Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg128Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg128Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg128Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg128Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg64Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", "char", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg64Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg64Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg64Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg64Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg64Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg64Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg32Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", "char", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg32Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg32Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg32Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg32Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg32Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg32Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg16Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", "char", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg16Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg16Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg16Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg16Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg16Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Mcg16Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("ODD_PHI128", "", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI16", "", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI32", "", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI64", "", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI8", "", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).AddStruct(symbols.NewStructBuilder("Msws128Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state0", "uint128", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", "uint128", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state1", "uint128", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl0", "uint128", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", "uint128", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl1", "uint128", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Msws16Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state0", "ushort", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", "ushort", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state1", "ushort", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl0", "ushort", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", "ushort", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl1", "ushort", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Msws32Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state0", "uint", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", "uint", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state1", "uint", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl0", "uint", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", "uint", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl1", "uint", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Msws64Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state0", "ulong", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", "ulong", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state1", "ulong", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl0", "ulong", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", "ulong", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl1", "ulong", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Msws8Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state0", "char", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", "char", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state1", "char", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl0", "char", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", "char", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl1", "char", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", "Msws128Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", "Msws128Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", "Msws128Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", "Msws128Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", "Msws128Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", "Msws128Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", "Msws128Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", "Msws64Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", "Msws64Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", "Msws64Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", "Msws64Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", "Msws64Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", "Msws64Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", "Msws64Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", "Msws32Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", "Msws32Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", "Msws32Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", "Msws32Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", "Msws32Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", "Msws32Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", "Msws32Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", "Msws16Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", "Msws16Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", "Msws16Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", "Msws16Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", "Msws16Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", "Msws16Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", "Msws16Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", "Msws8Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", "Msws8Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", "Msws8Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", "Msws8Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", "Msws8Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", "Msws8Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", "Msws8Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("MUL_LCG128", "", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG16", "", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG32", "", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG64", "", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI128", "", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI16", "", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI32", "", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI64", "", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg128Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg128Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg128Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg128Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg128Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg128Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg128Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg64Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg64Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg64Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg64Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg64Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg64Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg64Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg32Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg32Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg32Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg32Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg32Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg32Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg32Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg16Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg16Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg16Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg16Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg16Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg16Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", "Pcg16Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("MUL_LCG64", "", "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_MCG64", "", "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI64", "", "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).AddFunction(symbols.NewFunctionBuilder("make_seed", symbols.NewTypeFromString("", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seeder", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).WithArgument(symbols.NewVariableBuilder("out_buffer", "char", "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").WithArgument(symbols.NewVariableBuilder("value", "", "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("entropy", symbols.NewTypeFromString("char[]", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("ODD_PHI128", "", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI16", "", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI32", "", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI64", "", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI8", "", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc128Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc128Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc128Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc128Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc128Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc128Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc128Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc64Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc64Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc64Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc64Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc64Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc64Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc64Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc32Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("sfc", "", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc32Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc32Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc32Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc32Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc32Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc16Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("seed", "", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc16Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc16Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc16Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc16Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc16Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc8Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", "char", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc8Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc8Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc8Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc8Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc8Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", "Sfc8Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("SIMPLE_RANDOM_ADDEND", "long", "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIMPLE_RANDOM_MASK", "long", "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIMPLE_RANDOM_MULTIPLIER", "long", "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", "SimpleRandom", "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", "char", "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewTypeFromString("uint", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", "SimpleRandom", "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewTypeFromString("void", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", "SimpleRandom", "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", "char", "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewTypeFromString("uint128", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", "SimpleRandom", "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewTypeFromString("ulong", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", "SimpleRandom", "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewTypeFromString("ushort", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", "SimpleRandom", "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewTypeFromString("char", "std::math::random"), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", "SimpleRandom", "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build())

	// Define module std::net
	module = moduleCollection["std::net"]
	module.AddStruct(symbols.NewStructBuilder("InetAddress", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("is_ipv6", "bool", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("a", "ushort", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("b", "ushort", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("c", "ushort", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("d", "ushort", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("e", "ushort", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("f", "ushort", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("g", "ushort", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("h", "ushort", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("ipv6", "char", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("val", "uint128", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("ip6", "char", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("ipv6arr", "UShortBE", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("a", "char", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("b", "char", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("c", "char", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("d", "char", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("ipv4", "char", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("val", "uint", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("ip4", "char", "std::net", "<stdlib-path>/net/inetaddr.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("IpProtocol", "char", "std::net", "<stdlib-path>/net/inetaddr.c3").WithEnumerator(symbols.NewEnumeratorBuilder("UNSPECIFIED", "<stdlib-path>/net/inetaddr.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("ai_family", "AIFamily", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()}).WithEnumName("IpProtocol").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("IPV4", "<stdlib-path>/net/inetaddr.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("ai_family", "AIFamily", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()}).WithEnumName("IpProtocol").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("IPV6", "<stdlib-path>/net/inetaddr.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("ai_family", "AIFamily", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()}).WithEnumName("IpProtocol").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewTypeFromString("usz!", "std::net"), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", "InetAddress", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", "Formatter", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeFromString("String", "std::net"), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", "InetAddress", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ipv6_from_str", symbols.NewTypeFromString("InetAddress!", "std::net"), "std::net", "<stdlib-path>/net/inetaddr.c3").WithArgument(symbols.NewVariableBuilder("s", "String", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ipv4_from_str", symbols.NewTypeFromString("InetAddress!", "std::net"), "std::net", "<stdlib-path>/net/inetaddr.c3").WithArgument(symbols.NewVariableBuilder("s", "String", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_loopback", symbols.NewTypeFromString("bool", "std::net"), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", "InetAddress", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_any_local", symbols.NewTypeFromString("bool", "std::net"), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", "InetAddress", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_link_local", symbols.NewTypeFromString("bool", "std::net"), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", "InetAddress", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_site_local", symbols.NewTypeFromString("bool", "std::net"), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", "InetAddress", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast", symbols.NewTypeFromString("bool", "std::net"), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", "InetAddress", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast_global", symbols.NewTypeFromString("bool", "std::net"), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", "InetAddress", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast_node_local", symbols.NewTypeFromString("bool", "std::net"), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", "InetAddress", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast_site_local", symbols.NewTypeFromString("bool", "std::net"), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", "InetAddress", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast_org_local", symbols.NewTypeFromString("bool", "std::net"), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", "InetAddress", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast_link_local", symbols.NewTypeFromString("bool", "std::net"), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", "InetAddress", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("addrinfo", symbols.NewTypeFromString("AddrInfo*!", "std::net"), "std::net", "<stdlib-path>/net/inetaddr.c3").WithArgument(symbols.NewVariableBuilder("host", "String", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", "uint", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithArgument(symbols.NewVariableBuilder("ai_family", "AIFamily", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithArgument(symbols.NewVariableBuilder("ai_socktype", "AISockType", "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build())

	// Define module std::net
	module = moduleCollection["std::net"]
	module.AddFault(symbols.NewFaultBuilder("NetError", "", "std::net", "<stdlib-path>/net/net.c3").WithConstant(symbols.NewFaultConstantBuilder("INVALID_URL", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("URL_TOO_LONG", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_SOCKET", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("GENERAL_ERROR", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_IP_STRING", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("ADDRINFO_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("CONNECT_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("LISTEN_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("ACCEPT_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("WRITE_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("READ_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("SOCKOPT_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("SOCKETS_NOT_INITIALIZED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("STILL_PROCESSING_CALLBACK", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("BAD_SOCKET_DESCRIPTOR", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("NOT_A_SOCKET", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("CONNECTION_REFUSED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("CONNECTION_TIMED_OUT", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("ADDRESS_IN_USE", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("CONNECTION_ALREADY_IN_PROGRESS", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("ALREADY_CONNECTED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("NETWORK_UNREACHABLE", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("OPERATION_NOT_SUPPORTED_ON_SOCKET", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("ipv4toint", symbols.NewTypeFromString("uint!", "std::net"), "std::net", "<stdlib-path>/net/net.c3").WithArgument(symbols.NewVariableBuilder("s", "String", "std::net", "<stdlib-path>/net/net.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int_to_new_ipv4", symbols.NewTypeFromString("String!", "std::net"), "std::net", "<stdlib-path>/net/net.c3").WithArgument(symbols.NewVariableBuilder("val", "uint", "std::net", "<stdlib-path>/net/net.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::net", "<stdlib-path>/net/net.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int_to_temp_ipv4", symbols.NewTypeFromString("String!", "std::net"), "std::net", "<stdlib-path>/net/net.c3").WithArgument(symbols.NewVariableBuilder("val", "uint", "std::net", "<stdlib-path>/net/net.c3").Build()).WithoutSourceCode().Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("AF_INET", "AIFamily", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AF_UNIX", "AIFamily", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AF_UNSPEC", "AIFamily", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_CANONNAME", "AIFlags", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_NUMERICHOST", "AIFlags", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_PASSIVE", "AIFlags", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPPOTO_IP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_3PC", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ADFS", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_AH", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_AHIP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_APES", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ARGUS", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_AX25", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_BHA", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_BLT", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_BRSATMON", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_CFTP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_CHAOS", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_CMTP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_CPHB", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_CPNX", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_DDP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_DGP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_DIVERT", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_DSTOPTS", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_EGP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_EMCON", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ENCAP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_EON", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ESP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ETHERIP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_FRAGMENT", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_GMTP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_GRE", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_HELLO", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_HMP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ICMP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ICMPV6", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IDP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IDPR", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IDRP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IGMP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IGP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IGRP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IL", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_INLSP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_INP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPCOMP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPCV", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPEIP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPPC", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPV4", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPV6", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IRTP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_KRYPTOLAN", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_LARP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_LEAF1", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_LEAF2", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_MEAS", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_MHRP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_MICP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_MTP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_MUX", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ND", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_NHRP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_NONE", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_NSP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_NVPII", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_OSPFIGP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PGM", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PIGP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PIM", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PRM", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PUP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PVP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_RAW", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_RCCMON", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_RDP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ROUTING", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_RSVP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_RVD", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SATEXPAK", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SATMON", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SCCSP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SCTP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SDRP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SEP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SRPC", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ST", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SVMTP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SWIPE", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TCF", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TCP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TPXX", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TRUNK1", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TRUNK2", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TTP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_UDP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_VINES", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_VISA", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_VMTP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_WBEXPAK", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_WBMON", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_WSN", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_XNET", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_XTP", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_APPLETALK", "AIFamily", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_INET6", "AIFamily", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IPX", "AIFamily", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_O_NONBLOCK", "", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_DGRAM", "AISockType", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_RAW", "AISockType", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_RDM", "AISockType", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_SEQPACKET", "AISockType", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_STREAM", "AISockType", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUPPORTS_INET", "bool", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddStruct(symbols.NewStructBuilder("AddrInfo", "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_flags", "AIFlags", "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_family", "AIFamily", "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_socktype", "AISockType", "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_protocol", "AIProtocol", "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_addrlen", "Socklen_t", "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_canonname", "ZString", "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_addr", "SockAddrPtr", "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_addr", "SockAddrPtr", "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_canonname", "ZString", "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_next", "AddrInfo", "std::net::os", "<stdlib-path>/net/os/common.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Socklen_t", "std::net::os", "<stdlib-path>/net/os/common.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getaddrinfo", symbols.NewTypeFromString("CInt", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/common.c3").WithArgument(symbols.NewVariableBuilder("nodename", "ZString", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("servname", "ZString", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("hints", "AddrInfo", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("res", "AddrInfo", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("freeaddrinfo", symbols.NewTypeFromString("void", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/common.c3").WithArgument(symbols.NewVariableBuilder("res", "AddrInfo", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setsockopt", symbols.NewTypeFromString("CInt", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/common.c3").WithArgument(symbols.NewVariableBuilder("socket", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("level", "CInt", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optname", "CInt", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optval", "void", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optlen", "Socklen_t", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getsockopt", symbols.NewTypeFromString("CInt", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/common.c3").WithArgument(symbols.NewVariableBuilder("socket", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("level", "CInt", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optname", "CInt", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optval", "void", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optlen", "Socklen_t", "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithoutSourceCode().Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("AI_ADDRCONFIG", "AIFlags", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_ALL", "AIFlags", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_DEFAULT", "AIFlags", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_NUMERICSERV", "AIFlags", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_UNUSABLE", "AIFlags", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_V4MAPPED", "AIFlags", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_V4MAPPED_CFG", "AIFlags", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_APPLETALK", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_CCITT", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_CHAOS", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_CNT", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_COIP", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_DATAKIT", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_DECNET", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_DLI", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ECMA", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_HYLINK", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IEEE80211", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IMPLINK", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_INET6", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IPX", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ISDN", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ISO", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_LAT", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_LINK", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_MAX", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NATM", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NDRV", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NETBIOS", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NS", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_PPP", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_PUP", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ROUTE", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_SIP", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_SNA", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_SYSTEM", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_UTUN", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_VSOCK", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_O_NONBLOCK", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_HDRCMPLT", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_KEY", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_PIP", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_RTIP", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_XTP", "AIFamily", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLATTRIB", "CShort", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLEXTEND", "CShort", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLNLINK", "CShort", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLOUT", "CShort", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDBAND", "CShort", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDNORM", "CShort", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRBAND", "CShort", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRITE", "CShort", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOL_SOCKET", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ACCEPTCONN", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BROADCAST", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DEBUG", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DONTROUTE", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DONTTRUNC", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ERROR", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_KEEPALIVE", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LABEL", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LINGER", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LINGER_SEC", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NKE", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NOADDRERR", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NOSIGPIPE", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NREAD", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NWRITE", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_OOBINLINE", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERLABEL", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVBUF", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVLOWAT", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVTIMEO", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEADDR", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEPORT", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSESHAREUID", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDBUF", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDLOWAT", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDTIMEO", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TIMESTAMP", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TIMESTAMP_MONOTONIC", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TYPE", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_USELOOPBACK", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_WANTMORE", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_WANTOOBFLAG", "int", "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_AAL5", "AIFamily", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_APPLETALK", "AIFamily", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_AX25", "AIFamily", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_BRIDGE", "AIFamily", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_INET6", "AIFamily", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IPX", "AIFamily", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NETROM", "AIFamily", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_X25", "AIFamily", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_O_NONBLOCK", "", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLFREE", "CUShort", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLMSG", "CUShort", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDBAND", "CUShort", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDHUP", "CUShort", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDNORM", "CUShort", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLREMOVE", "CUShort", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRBAND", "CUShort", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRNORM", "CUShort", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_BUSY_LOOP", "CUShort", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOL_SOCKET", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ACCEPTCONN", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ATTACH_BPF", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ATTACH_FILTER", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ATTACH_REUSEPORT_CBPF", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ATTACH_REUSEPORT_EBPF", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BINDTODEVICE", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BINDTOIFINDEX", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BPF_EXTENSIONS", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BROADCAST", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BSDCOMPAT", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BUF_LOCK", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BUSY_POLL", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BUSY_POLL_BUDGET", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_CNX_ADVICE", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_COOKIE", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DEBUG", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DETACH_FILTER", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DETACH_REUSEPORT_BPF", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DOMAIN", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DONTROUTE", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ERROR", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_INCOMING_CPU", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_INCOMING_NAPI_ID", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_KEEPALIVE", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LINGER", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LOCK_FILTER", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_MARK", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_MAX_PACING_RATE", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_MEMINFO", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NETNS_COOKIE", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NOFCS", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NO_CHECK", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_OOBINLINE", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PASSPIDFD", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PASSSEC", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEEK_OFF", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERGROUPS", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERNAME", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERPIDFD", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERSEC", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PREFER_BUSY_POLL", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PRIORITY", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PROTOCOL", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVBUF", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVBUFFORCE", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVLOWAT", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVMARK", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVTIMEO", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RESERVE_MEM", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEADDR", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEPORT", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RXQ_OVFL", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SELECT_ERR_QUEUE", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDBUF", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDBUFFORCE", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDLOWAT", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDTIMEO", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TIMESTAMP", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TXREHASH", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TXTIME", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TYPE", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_WIFI_STATUS", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ZEROCOPY", "int", "std::net::os", "<stdlib-path>/net/os/linux.c3").Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("F_GETFL", "int", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("F_SETFL", "int", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLERR", "CUShort", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLHUP", "CUShort", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLIN", "CUShort", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLNVAL", "CUShort", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLOUT", "CUShort", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLPRI", "CUShort", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddStruct(symbols.NewStructBuilder("Posix_pollfd", "std::net::os", "<stdlib-path>/net/os/posix.c3").WithStructMember("fd", "CInt", "std::net::os", "<stdlib-path>/net/os/posix.c3").WithStructMember("events", "CUShort", "std::net::os", "<stdlib-path>/net/os/posix.c3").WithStructMember("revents", "CUShort", "std::net::os", "<stdlib-path>/net/os/posix.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Posix_nfds_t", "std::net::os", "<stdlib-path>/net/os/posix.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect", symbols.NewTypeFromString("CInt", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", "SockAddrPtr", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", "Socklen_t", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("socket", symbols.NewTypeFromString("NativeSocket", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("af", "AIFamily", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", "AISockType", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", "AIProtocol", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fcntl", symbols.NewTypeFromString("int", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd", "int", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bind", symbols.NewTypeFromString("CInt", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", "SockAddrPtr", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", "Socklen_t", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("listen", symbols.NewTypeFromString("CInt", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("backlog", "CInt", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("accept", symbols.NewTypeFromString("NativeSocket", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", "SockAddrPtr", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", "Socklen_t", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("poll", symbols.NewTypeFromString("CInt", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("fds", "Posix_pollfd", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("nfds", "Posix_nfds_t", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", "CInt", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("convert_error", symbols.NewTypeFromString("anyfault", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("error", "Errno", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("socket_error", symbols.NewTypeFromString("anyfault", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeSocket.close", symbols.NewTypeFromString("void!", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeSocket.set_non_blocking", symbols.NewTypeFromString("void!", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("non_blocking", "bool", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeSocket.is_non_blocking", symbols.NewTypeFromString("bool", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("FIOASYNC", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("FIONBIO", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("FIONREAD", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_APPLETALK", "AIFamily", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_BTH", "AIFamily", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_INET6", "AIFamily", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IPX", "AIFamily", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IRDA", "AIFamily", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NETBIOS", "AIFamily", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLERR", "CUShort", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLHUP", "CUShort", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLIN", "CUShort", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLNVAL", "CUShort", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLOUT", "CUShort", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLPRI", "CUShort", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDBAND", "CUShort", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDNORM", "CUShort", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRBAND", "CUShort", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRNORM", "CUShort", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOL_SOCKET", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ACCEPTCONN", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BROADCAST", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DEBUG", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DONTROUTE", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ERROR", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_KEEPALIVE", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LINGER", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_OOBINLINE", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVBUF", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVLOWAT", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVTIMEO", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEADDR", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDBUF", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDLOWAT", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDTIMEO", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TYPE", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_USELOOPBACK", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddFunction(symbols.NewFunctionBuilder("ioctlsocket", symbols.NewTypeFromString("CInt", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd", "CLong", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("argp", "CULong", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("closesocket", symbols.NewTypeFromString("WSAError", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("socket", symbols.NewTypeFromString("NativeSocket", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("af", "AIFamily", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", "AISockType", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", "AIProtocol", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect", symbols.NewTypeFromString("int", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", "SockAddrPtr", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", "Socklen_t", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bind", symbols.NewTypeFromString("int", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", "SockAddrPtr", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", "Socklen_t", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("listen", symbols.NewTypeFromString("int", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("backlog", "int", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("accept", symbols.NewTypeFromString("NativeSocket", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", "SockAddrPtr", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", "Socklen_t", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_non_blocking", symbols.NewTypeFromString("void!", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithTypeIdentifier("NativeSocket").WithArgument(symbols.NewVariableBuilder("self", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("non_blocking", "bool", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeSocket.close", symbols.NewTypeFromString("void!", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("self", "NativeSocket", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("convert_error", symbols.NewTypeFromString("anyfault", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("error", "WSAError", "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("socket_error", symbols.NewTypeFromString("anyfault", "std::net::os"), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithoutSourceCode().Build())

	// Define module std::net
	module = moduleCollection["std::net"]
	module.AddVariable(symbols.NewVariableBuilder("POLL_EVENT_DISCONNECT", "PollEvents", "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_ERROR", "PollEvents", "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_INVALID", "PollEvents", "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_READ", "PollEvents", "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_READ_OOB", "PollEvents", "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_READ_PRIO", "PollEvents", "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_WRITE", "PollEvents", "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_WRITE_OOB", "PollEvents", "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_FOREVER", "Duration", "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_ANY_READ", "PollSubscribes", "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_ANY_WRITE", "PollSubscribes", "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_OOB_READ", "PollSubscribes", "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_OOB_WRITE", "PollSubscribes", "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_PRIO_READ", "PollSubscribes", "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_READ", "PollSubscribes", "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_WRITE", "PollSubscribes", "std::net", "<stdlib-path>/net/socket.c3").Build()).AddStruct(symbols.NewStructBuilder("Poll", "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("socket", "NativeSocket", "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("events", "PollSubscribes", "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("revents", "PollEvents", "std::net", "<stdlib-path>/net/socket.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Socket", "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("sock", "NativeSocket", "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("ai_addrlen", "Socklen_t", "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("ai_addr_storage", "char", "std::net", "<stdlib-path>/net/socket.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@loop_over_ai", symbols.NewTypeFromString("void", "std::net"), "std::net", "<stdlib-path>/net/socket.c3").WithArgument(symbols.NewVariableBuilder("ai", "AddrInfo", "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", "fn void(NativeSocket fd, AddrInfo* ai)", "std::net", "<stdlib-path>/net/socket.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("poll_ms", symbols.NewTypeFromString("ulong!", "std::net"), "std::net", "<stdlib-path>/net/socket.c3").WithArgument(symbols.NewVariableBuilder("polls", "Poll", "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout_ms", "long", "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("poll", symbols.NewTypeFromString("ulong!", "std::net"), "std::net", "<stdlib-path>/net/socket.c3").WithArgument(symbols.NewVariableBuilder("polls", "Poll", "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", "Duration", "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_socket", symbols.NewTypeFromString("Socket", "std::net"), "std::net", "<stdlib-path>/net/socket.c3").WithArgument(symbols.NewVariableBuilder("fd", "", "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("ai", "", "std::net", "<stdlib-path>/net/socket.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::net
	module = moduleCollection["std::net"]
	module.AddFunction(symbols.NewFunctionBuilder("apply_sockoptions", symbols.NewTypeFromString("", "std::net"), "std::net", "<stdlib-path>/net/socket_private.c3").WithArgument(symbols.NewVariableBuilder("sockfd", "", "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "", "std::net", "<stdlib-path>/net/socket_private.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_from_addrinfo", symbols.NewTypeFromString("Socket!", "std::net"), "std::net", "<stdlib-path>/net/socket_private.c3").WithArgument(symbols.NewVariableBuilder("addrinfo", "AddrInfo", "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "SocketOption", "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("last_error_is_delayed_connect", symbols.NewTypeFromString("bool", "std::net"), "std::net", "<stdlib-path>/net/socket_private.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_with_timeout_from_addrinfo", symbols.NewTypeFromString("Socket!", "std::net"), "std::net", "<stdlib-path>/net/socket_private.c3").WithArgument(symbols.NewVariableBuilder("addrinfo", "AddrInfo", "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "SocketOption", "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", "Duration", "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_async_from_addrinfo", symbols.NewTypeFromString("Socket!", "std::net"), "std::net", "<stdlib-path>/net/socket_private.c3").WithArgument(symbols.NewVariableBuilder("addrinfo", "AddrInfo", "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "SocketOption", "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@network_loop_over_ai", symbols.NewTypeFromString("", "std::net"), "std::net", "<stdlib-path>/net/socket_private.c3").WithArgument(symbols.NewVariableBuilder("network", "", "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("host", "", "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", "", "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", "fn void(fd, ai)", "std::net", "<stdlib-path>/net/socket_private.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::net::tcp
	module = moduleCollection["std::net::tcp"]
	module.AddFunction(symbols.NewFunctionBuilder("connect", symbols.NewTypeFromString("TcpSocket!", "std::net::tcp"), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("host", "String", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", "uint", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", "Duration", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "SocketOption", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", "IpProtocol", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_async", symbols.NewTypeFromString("TcpSocket!", "std::net::tcp"), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("host", "String", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", "uint", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "SocketOption", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", "IpProtocol", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_to", symbols.NewTypeFromString("TcpSocket!", "std::net::tcp"), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("ai", "AddrInfo", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "SocketOption", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_async_to", symbols.NewTypeFromString("TcpSocket!", "std::net::tcp"), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("ai", "AddrInfo", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "SocketOption", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("listen", symbols.NewTypeFromString("TcpServerSocket!", "std::net::tcp"), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("host", "String", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", "uint", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("backlog", "uint", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "SocketOption", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", "IpProtocol", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("accept", symbols.NewTypeFromString("TcpSocket!", "std::net::tcp"), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("server_socket", "TcpServerSocket", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("listen_to", symbols.NewTypeFromString("TcpServerSocket!", "std::net::tcp"), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("ai", "AddrInfo", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("backlog", "uint", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "SocketOption", "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithoutSourceCode().Build())

	// Define module std::net::udp
	module = moduleCollection["std::net::udp"]
	module.AddFunction(symbols.NewFunctionBuilder("connect", symbols.NewTypeFromString("UdpSocket!", "std::net::udp"), "std::net::udp", "<stdlib-path>/net/udp.c3").WithArgument(symbols.NewVariableBuilder("host", "String", "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", "uint", "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "SocketOption", "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", "IpProtocol", "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_to", symbols.NewTypeFromString("UdpSocket!", "std::net::udp"), "std::net::udp", "<stdlib-path>/net/udp.c3").WithArgument(symbols.NewVariableBuilder("ai", "AddrInfo", "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "SocketOption", "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_async", symbols.NewTypeFromString("UdpSocket!", "std::net::udp"), "std::net::udp", "<stdlib-path>/net/udp.c3").WithArgument(symbols.NewVariableBuilder("host", "String", "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", "uint", "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "SocketOption", "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", "IpProtocol", "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_async_to", symbols.NewTypeFromString("UdpSocket!", "std::net::udp"), "std::net::udp", "<stdlib-path>/net/udp.c3").WithArgument(symbols.NewVariableBuilder("ai", "AddrInfo", "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "SocketOption", "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::backtrace
	module = moduleCollection["std::os::backtrace"]
	module.AddVariable(symbols.NewVariableBuilder("BACKTRACE_UNKNOWN", "Backtrace", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).AddStruct(symbols.NewStructBuilder("Backtrace", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("offset", "uptr", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("function", "String", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("object_file", "String", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("file", "String", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("line", "uint", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("allocator", "Allocator", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("BacktraceList", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("symbolize_backtrace", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithResolvesTo("darwin::symbolize_backtrace").WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("BacktraceFault", "", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithConstant(symbols.NewFaultConstantBuilder("SEGMENT_NOT_FOUND", "std::os::backtrace", "../../../assets/c3c/lib/std/os/backtrace.c3").WithFaultName("BacktraceFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("EXECUTABLE_PATH_NOT_FOUND", "std::os::backtrace", "../../../assets/c3c/lib/std/os/backtrace.c3").WithFaultName("BacktraceFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("IMAGE_NOT_FOUND", "std::os::backtrace", "../../../assets/c3c/lib/std/os/backtrace.c3").WithFaultName("BacktraceFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("NO_BACKTRACE_SYMBOLS", "std::os::backtrace", "../../../assets/c3c/lib/std/os/backtrace.c3").WithFaultName("BacktraceFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("RESOLUTION_FAILED", "std::os::backtrace", "../../../assets/c3c/lib/std/os/backtrace.c3").WithFaultName("BacktraceFault").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("has_file", symbols.NewTypeFromString("bool", "std::os::backtrace"), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithTypeIdentifier("Backtrace").WithArgument(symbols.NewVariableBuilder("self", "Backtrace", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_unknown", symbols.NewTypeFromString("bool", "std::os::backtrace"), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithTypeIdentifier("Backtrace").WithArgument(symbols.NewVariableBuilder("self", "Backtrace", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewTypeFromString("usz!", "std::os::backtrace"), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithTypeIdentifier("Backtrace").WithArgument(symbols.NewVariableBuilder("self", "Backtrace", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", "Formatter", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewTypeFromString("void", "std::os::backtrace"), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithTypeIdentifier("Backtrace").WithArgument(symbols.NewVariableBuilder("self", "Backtrace", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("Backtrace*", "std::os::backtrace"), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithTypeIdentifier("Backtrace").WithArgument(symbols.NewVariableBuilder("self", "Backtrace", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "uptr", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", "String", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("object_file", "String", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", "String", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", "uint", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("capture_current", symbols.NewTypeFromString("void*[]", "std::os::backtrace"), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithArgument(symbols.NewVariableBuilder("buffer", "void", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symbolize_backtrace", symbols.NewTypeFromString("BacktraceList!", "std::os::backtrace"), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithArgument(symbols.NewVariableBuilder("backtrace", "void", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os
	module = moduleCollection["std::os"]
	module.AddFunction(symbols.NewFunctionBuilder("num_cpu", symbols.NewTypeFromString("uint", "std::os"), "std::os", "<stdlib-path>/os/cpu.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("num_cpu", symbols.NewTypeFromString("uint", "std::os"), "std::os", "<stdlib-path>/os/cpu.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("num_cpu", symbols.NewTypeFromString("uint", "std::os"), "std::os", "<stdlib-path>/os/cpu.c3").WithoutSourceCode().Build())

	// Define module std::os::env
	module = moduleCollection["std::os::env"]
	module.AddFunction(symbols.NewFunctionBuilder("get_var", symbols.NewTypeFromString("String!", "std::os::env"), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("name", "String", "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_var_temp", symbols.NewTypeFromString("String!", "std::os::env"), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("name", "String", "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_var", symbols.NewTypeFromString("bool", "std::os::env"), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("name", "String", "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "String", "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithArgument(symbols.NewVariableBuilder("overwrite", "bool", "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_home_dir", symbols.NewTypeFromString("String!", "std::os::env"), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("using", "Allocator", "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_config_dir", symbols.NewTypeFromString("Path!", "std::os::env"), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear_var", symbols.NewTypeFromString("bool", "std::os::env"), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("name", "String", "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("executable_path", symbols.NewTypeFromString("String!", "std::os::env"), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::linux
	module = moduleCollection["std::os::linux"]
	module.AddFunction(symbols.NewFunctionBuilder("malloc_usable_size", symbols.NewTypeFromString("usz", "std::os::linux"), "std::os::linux", "<stdlib-path>/os/linux/heap.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::os::linux", "<stdlib-path>/os/linux/heap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::linux
	module = moduleCollection["std::os::linux"]
	module.AddVariable(symbols.NewVariableBuilder("EI_NIDENT", "", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PT_PHDR", "", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).AddStruct(symbols.NewStructBuilder("Elf32_Ehdr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_ident", "char", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_type", "Elf32_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_machine", "Elf32_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_version", "Elf32_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_entry", "Elf32_Addr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phoff", "Elf32_Off", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shoff", "Elf32_Off", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_flags", "Elf32_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_ehsize", "Elf32_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phentsize", "Elf32_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phnum", "Elf32_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shentsize", "Elf32_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shnum", "Elf32_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shstrndx", "Elf32_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Elf32_Phdr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_type", "Elf32_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_offset", "Elf32_Off", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_vaddr", "Elf32_Addr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_paddr", "Elf32_Addr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_filesz", "Elf32_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_memsz", "Elf32_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_flags", "Elf32_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_align", "Elf32_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Elf64_Ehdr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_ident", "char", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_type", "Elf64_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_machine", "Elf64_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_version", "Elf64_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_entry", "Elf64_Addr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phoff", "Elf64_Off", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shoff", "Elf64_Off", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_flags", "Elf64_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_ehsize", "Elf64_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phentsize", "Elf64_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phnum", "Elf64_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shentsize", "Elf64_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shnum", "Elf64_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shstrndx", "Elf64_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Elf64_Phdr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_type", "Elf64_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_flags", "Elf64_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_offset", "Elf64_Off", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_vaddr", "Elf64_Addr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_paddr", "Elf64_Addr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_filesz", "Elf64_Xword", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_memsz", "Elf64_Xword", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_align", "Elf64_Xword", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Linux_Dl_info", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dli_fname", "ZString", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dli_fbase", "void", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dli_sname", "ZString", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dli_saddr", "void", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf32_Addr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf32_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf32_Off", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf32_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Addr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Lword", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Off", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Sword", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Sxword", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Xword", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("readlink", symbols.NewTypeFromString("isz", "std::os::linux"), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("path", "ZString", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", "char", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("bufsize", "usz", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dladdr", symbols.NewTypeFromString("CInt", "std::os::linux"), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("addr", "void", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("info", "Linux_Dl_info", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("elf_module_image_base", symbols.NewTypeFromString("ulong!", "std::os::linux"), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("path", "String", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_load_from_exec", symbols.NewTypeFromString("Backtrace!", "std::os::linux"), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("addr", "void", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_load_from_dlinfo", symbols.NewTypeFromString("Backtrace!", "std::os::linux"), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("addr", "void", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("info", "Linux_Dl_info", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_from_addr2line", symbols.NewTypeFromString("Backtrace!", "std::os::linux"), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("addr", "void", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("addr2line", "String", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("obj_name", "String", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("func_name", "String", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_load_element", symbols.NewTypeFromString("Backtrace!", "std::os::linux"), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("addr", "void", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symbolize_backtrace", symbols.NewTypeFromString("BacktraceList!", "std::os::linux"), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("backtrace", "void", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::macos::cf
	module = moduleCollection["std::os::macos::cf"]
	module.AddDef(symbols.NewDefBuilder("CFOptionFlags", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("default_allocator", symbols.NewTypeFromString("CFAllocatorRef", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CFAllocatorRef.dealloc", symbols.NewTypeFromString("void", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "CFAllocatorRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CFAllocatorRef.alloc", symbols.NewTypeFromString("void*", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "CFAllocatorRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CFAllocatorRef.get_preferred_size", symbols.NewTypeFromString("usz", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "CFAllocatorRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("req_size", "usz", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CFAllocatorRef.set_default", symbols.NewTypeFromString("void", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "CFAllocatorRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorCreate", symbols.NewTypeFromString("CFAllocatorRef", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "CFAllocatorRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", "CFAllocatorContextRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorDeallocate", symbols.NewTypeFromString("void", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "CFAllocatorRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorGetDefault", symbols.NewTypeFromString("CFAllocatorRef", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorSetDefault", symbols.NewTypeFromString("void", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "CFAllocatorRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorAllocate", symbols.NewTypeFromString("void*", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "CFAllocatorRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "CFIndex", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("hint", "CFOptionFlags", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorGetPreferredSizeForSize", symbols.NewTypeFromString("CFIndex", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", "CFAllocatorRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "CFIndex", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("hint", "CFOptionFlags", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::macos::cf
	module = moduleCollection["std::os::macos::cf"]
	module.AddFunction(symbols.NewFunctionBuilder("macos_CFArrayCreate", symbols.NewTypeFromString("CFArrayRef", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithArgument(symbols.NewVariableBuilder("allocator", "CFAllocatorRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", "void", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("num_values", "CFIndex", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("callBacks", "CFArrayCallBacksRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFArrayCopy", symbols.NewTypeFromString("CFArrayRef", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithArgument(symbols.NewVariableBuilder("allocator", "CFAllocatorRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("array", "CFArrayRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFArrayGetCount", symbols.NewTypeFromString("CFIndex", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithArgument(symbols.NewVariableBuilder("array", "CFArrayRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFArrayAppendArray", symbols.NewTypeFromString("void", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithArgument(symbols.NewVariableBuilder("theArray", "CFMutableArrayRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("otherArray", "CFArrayRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("otherRange", "CFRange", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFArrayCreateMutable", symbols.NewTypeFromString("CFMutableArrayRef", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithArgument(symbols.NewVariableBuilder("allocator", "CFAllocatorRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", "CFIndex", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("callBacks", "CFArrayCallBacksRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFArrayAppendValue", symbols.NewTypeFromString("void", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithArgument(symbols.NewVariableBuilder("theArray", "CFMutableArrayRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", "void", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::macos::cf
	module = moduleCollection["std::os::macos::cf"]
	module.AddStruct(symbols.NewStructBuilder("CFRange", "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithStructMember("location", "CFIndex", "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithStructMember("length", "CFIndex", "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CFIndex", "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFRetain", symbols.NewTypeFromString("CFTypeRef", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithArgument(symbols.NewVariableBuilder("cf", "CFTypeRef", "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFRelease", symbols.NewTypeFromString("void", "std::os::macos::cf"), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithArgument(symbols.NewVariableBuilder("cf", "CFTypeRef", "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::darwin
	module = moduleCollection["std::os::darwin"]
	module.AddVariable(symbols.NewVariableBuilder("CTL_DEBUG", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_HW", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_KERN", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_MACHDEP", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_MAXID", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_NET", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_UNSPEC", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_USER", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_VFS", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_VM", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_BUS_FREQ", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_BYTEORDER", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_CACHELINE", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_CPU_FREQ", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_DISKNAMES", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_DISKSTATS", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_EPOCH", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_FLOATINGPT", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L1DCACHESIZE", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L1ICACHESIZE", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L2CACHESIZE", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L2SETTINGS", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L3CACHESIZE", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L3SETTINGS", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MACHINE", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MACHINE_ARCH", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MAXID", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MODEL", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_NCPU", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PAGESIZE", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PHYSMEM", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_USERMEM", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_VECTORUNIT", "", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddStruct(symbols.NewStructBuilder("Darwin_Dl_info", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("dli_fname", "ZString", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("dli_fbase", "void", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("dli_sname", "ZString", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("dli_saddr", "void", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Darwin_segment_command_64", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("cmd", "uint", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("cmdsize", "uint", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("segname", "char", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("vmaddr", "ulong", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("vmsize", "ulong", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("fileoff", "ulong", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("filesize", "ulong", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("maxprot", "int", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("initprot", "int", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("nsects", "uint", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("flags", "uint", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sysctl", symbols.NewTypeFromString("CInt", "std::os::darwin"), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("name", "CInt", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("namelen", "CUInt", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldp", "void", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldlenp", "usz", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("newp", "void", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("newlen", "usz", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("darwin_NSGetExecutablePath", symbols.NewTypeFromString("CInt", "std::os::darwin"), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "uint", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getsegbyname", symbols.NewTypeFromString("Darwin_segment_command_64*", "std::os::darwin"), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("segname", "ZString", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_dyld_image_count", symbols.NewTypeFromString("uint", "std::os::darwin"), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_dyld_get_image_name", symbols.NewTypeFromString("ZString", "std::os::darwin"), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("image_index", "uint", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_dyld_get_image_vmaddr_slide", symbols.NewTypeFromString("iptr", "std::os::darwin"), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("image_index", "uint", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dladdr", symbols.NewTypeFromString("CInt", "std::os::darwin"), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("addr", "void", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("info", "Darwin_Dl_info", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("executable_path", symbols.NewTypeFromString("String!", "std::os::darwin"), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load_address", symbols.NewTypeFromString("uptr!", "std::os::darwin"), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_load_element", symbols.NewTypeFromString("Backtrace!", "std::os::darwin"), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("execpath", "String", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "void", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_address", "void", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symbolize_backtrace", symbols.NewTypeFromString("BacktraceList!", "std::os::darwin"), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("backtrace", "void", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::darwin
	module = moduleCollection["std::os::darwin"]
	module.AddFunction(symbols.NewFunctionBuilder("malloc_size", symbols.NewTypeFromString("usz", "std::os::darwin"), "std::os::darwin", "<stdlib-path>/os/macos/heap.c3").WithArgument(symbols.NewVariableBuilder("ptr", "void", "std::os::darwin", "<stdlib-path>/os/macos/heap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::macos::objc
	module = moduleCollection["std::os::macos::objc"]
	module.AddFault(symbols.NewFaultBuilder("ObjcFailure", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithConstant(symbols.NewFaultConstantBuilder("CLASS_NOT_FOUND", "std::os::macos::objc", "../../../assets/c3c/lib/std/os/macos/objc.c3").WithFaultName("ObjcFailure").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("Class.name", symbols.NewTypeFromString("ZString", "std::os::macos::objc"), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", "Class", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Class.superclass", symbols.NewTypeFromString("Class", "std::os::macos::objc"), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", "Class", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Class.responds_to", symbols.NewTypeFromString("bool", "std::os::macos::objc"), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", "Class", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("sel", "Selector", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Class.method", symbols.NewTypeFromString("Method", "std::os::macos::objc"), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", "Class", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", "Selector", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Selector.equals", symbols.NewTypeFromString("bool", "std::os::macos::objc"), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("a", "Selector", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Selector", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Class.equals", symbols.NewTypeFromString("bool", "std::os::macos::objc"), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("a", "Class", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", "Class", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_by_name", symbols.NewTypeFromString("Class!", "std::os::macos::objc"), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("c", "ZString", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_get_list", symbols.NewTypeFromString("Class[]", "std::os::macos::objc"), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_objc_getClass", symbols.NewTypeFromString("Class", "std::os::macos::objc"), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("name", "ZString", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_objc_getClassList", symbols.NewTypeFromString("int", "std::os::macos::objc"), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("buffer", "Class", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer_count", "int", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_class_getName", symbols.NewTypeFromString("ZString", "std::os::macos::objc"), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", "Class", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_class_getSuperclass", symbols.NewTypeFromString("Class", "std::os::macos::objc"), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", "Class", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_class_getClassMethod", symbols.NewTypeFromString("Method", "std::os::macos::objc"), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", "Class", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", "Selector", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_class_respondsToSelector", symbols.NewTypeFromString("bool", "std::os::macos::objc"), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", "Class", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", "Selector", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_sel_registerName", symbols.NewTypeFromString("Selector", "std::os::macos::objc"), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("str", "ZString", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_objc_lookUpClass", symbols.NewTypeFromString("Class", "std::os::macos::objc"), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("name", "ZString", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddVariable(symbols.NewVariableBuilder("DT_BLK", "", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_CHR", "", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_DIR", "", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_FIFO", "", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_LNK", "", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_REG", "", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_SOCK", "", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_UNKNOWN", "", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_WHT", "", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("USE_DARWIN_INODE64", "", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddStruct(symbols.NewStructBuilder("Posix_dirent", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_fileno", "Ino_t", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_off", "Off_t", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_reclen", "ushort", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_namelen", "ushort", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_type", "char", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_namelen", "char", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_pad0", "uint", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_pad0", "char", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("name", "char", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("name", "char", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Mode_t", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rmdir", symbols.NewTypeFromString("int", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "ZString", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mkdir", symbols.NewTypeFromString("int", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "ZString", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode_t", "ushort", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("chdir", symbols.NewTypeFromString("int", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "ZString", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getcwd", symbols.NewTypeFromString("ZString", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("pwd", "char", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", "usz", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pipe", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("pipes", "CInt", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fdopen", symbols.NewTypeFromString("CFile", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("fd", "CInt", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "ZString", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("access", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("path", "ZString", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "CInt", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("readdir", symbols.NewTypeFromString("Posix_dirent*", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "DIRPtr", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("opendir", symbols.NewTypeFromString("DIRPtr", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "ZString", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("closedir", symbols.NewTypeFromString("void", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "DIRPtr", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("readdir", symbols.NewTypeFromString("Posix_dirent*", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "DIRPtr", "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddVariable(symbols.NewVariableBuilder("environ", "ZString", "std::os::posix", "<stdlib-path>/os/posix/general.c3").Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddFunction(symbols.NewFunctionBuilder("posix_memalign", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/heap.c3").WithArgument(symbols.NewVariableBuilder("memptr", "void", "std::os::posix", "<stdlib-path>/os/posix/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::os::posix", "<stdlib-path>/os/posix/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::os::posix", "<stdlib-path>/os/posix/heap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddVariable(symbols.NewVariableBuilder("WNOHANG", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WUNTRACES", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("__WCOREFLAG", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("__W_CONTINUED", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("backtrace_jmpbuf", "JmpBuf", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).AddStruct(symbols.NewStructBuilder("Posix_spawn_file_actions_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithStructMember("__allocated", "int", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithStructMember("__used", "int", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithStructMember("__actions", "void", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithStructMember("__pad", "int", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Posix_spawnattr_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithStructMember("opaque", "void", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("BacktraceFn", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("fn CInt(void** buffer, CInt size)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawn", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawn").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawn_file_actions_addclose", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawn_file_actions_addclose").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawn_file_actions_adddup2", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawn_file_actions_adddup2").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawn_file_actions_destroy", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawn_file_actions_destroy").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawn_file_actions_init", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawn_file_actions_init").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawnp", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawnp").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawn_file_actions_init", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("file_actions", "Posix_spawn_file_actions_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawn_file_actions_destroy", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("file_actions", "Posix_spawn_file_actions_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawn_file_actions_addclose", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("file_actions", "Posix_spawn_file_actions_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawn_file_actions_adddup2", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("file_actions", "Posix_spawn_file_actions_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("newfd", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs_conf", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawnp", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("pid", "Pid_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", "char", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("file_actions", "Posix_spawn_file_actions_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("attrp", "Posix_spawnattr_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", "ZString", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("envp", "ZString", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawn", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("pid", "Pid_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", "char", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("file_actions", "Posix_spawn_file_actions_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("attrp", "Posix_spawnattr_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", "ZString", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("envp", "ZString", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getpid", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("kill", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("pid", "Pid_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("sig", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("waitpid", symbols.NewTypeFromString("Pid_t", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("pid", "Pid_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("stat_loc", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "int", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("raise", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("sig", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_symbols", symbols.NewTypeFromString("ZString*", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("buffer", "void", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_symbols_fd", symbols.NewTypeFromString("void", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("buffer", "void", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wEXITSTATUS", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wTERMSIG", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wSTOPSIG", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wIFEXITED", symbols.NewTypeFromString("bool", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wIFSIGNALED", symbols.NewTypeFromString("bool", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wIFSTOPPED", symbols.NewTypeFromString("bool", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wIFCONTINUED", symbols.NewTypeFromString("bool", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wWCOREDUMP", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("w_EXITCODE", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("ret", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("sig", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("w_STOPCODE", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("sig", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("buffer", "void", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "CInt", "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddVariable(symbols.NewVariableBuilder("PTHREAD_MUTEX_ERRORCHECK", "", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).AddVariable(symbols.NewVariableBuilder("PTHREAD_MUTEX_NORMAL", "", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).AddVariable(symbols.NewVariableBuilder("PTHREAD_MUTEX_RECURSIVE", "", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).AddDef(symbols.NewDefBuilder("PosixThreadFn", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithResolvesTo("fn void*(void*)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_create", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "PosixThreadFn", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", "void", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cancel", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_detach", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_equal", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("this", "Pthread_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", "Pthread_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_exit", symbols.NewTypeFromString("void", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("value_ptr", "void", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_join", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("value_ptr", "void", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_kill", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("sig", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_once", symbols.NewTypeFromString("void", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_once_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "OnceFn", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_self", symbols.NewTypeFromString("Pthread_t", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_setcancelstate", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("state", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldstate", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_setcanceltype", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("type", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldtype", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_testcancel", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_destroy", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getinheritsched", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getschedparam", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "Pthread_sched_param", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getschedpolicy", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getscope", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getstacksize", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "usz", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getstackaddr", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "void", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getdetachstate", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_init", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setinheritsched", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setschedparam", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "Pthread_sched_param", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setschedpolicy", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setscope", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setstacksize", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "usz", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setstackaddr", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "void", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setdetachstate", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_attr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_destroy", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_mutexattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_getprioceiling", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_mutexattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_getprotocol", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_mutexattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_gettype", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_mutexattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_init", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_mutexattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_setprioceiling", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_mutexattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_setprotocol", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_mutexattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_settype", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_mutexattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutex_destroy", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_mutex_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutex_init", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_mutex_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "Pthread_mutexattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutex_lock", symbols.NewTypeFromString("Errno", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_mutex_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutex_trylock", symbols.NewTypeFromString("Errno", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_mutex_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutex_unlock", symbols.NewTypeFromString("Errno", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_mutex_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_condattr_destroy", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_condattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_condattr_init", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_condattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_broadcast", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_cond_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_destroy", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_cond_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_init", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_cond_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "Pthread_condattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_signal", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_cond_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_timedwait", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_cond_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "Pthread_mutex_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "TimeSpec", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_wait", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_cond_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "Pthread_mutex_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_destroy", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_rwlock_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_init", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_rwlock_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "Pthread_rwlockattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_rdlock", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_rwlock_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_tryrdlock", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_rwlock_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_trywrlock", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_rwlock_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_unlock", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_rwlock_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_wrlock", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_rwlock_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlockattr_destroy", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_rwlockattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlockattr_getpshared", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_rwlockattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlockattr_init", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_rwlockattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlockattr_setpshared", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_rwlockattr_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_key_create", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_key_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("routine", "PosixThreadFn", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_key_delete", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_key_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_getspecific", symbols.NewTypeFromString("void*", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_key_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_setspecific", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Pthread_key_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("value_ptr", "void", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_atfork", symbols.NewTypeFromString("CInt", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("prepare", "OnceFn", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("parent", "OnceFn", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("child", "OnceFn", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cleanup_pop", symbols.NewTypeFromString("void", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("execute", "CInt", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cleanup_push", symbols.NewTypeFromString("void", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("routine", "PosixThreadFn", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("routine_arg", "void", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sched_yield", symbols.NewTypeFromString("int", "std::os::posix"), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithoutSourceCode().Build())

	// Define module std::os::process
	module = moduleCollection["std::os::process"]
	module.AddVariable(symbols.NewVariableBuilder("EMPTY_ENVIRONMENT", "ZString[1]", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).AddStruct(symbols.NewStructBuilder("SubProcess", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("stdin_file", "CFile", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("stdout_file", "CFile", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("stderr_file", "CFile", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("hProcess", "Win32_HANDLE", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("hStdInput", "Win32_HANDLE", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("hEventOutput", "Win32_HANDLE", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("hEventError", "Win32_HANDLE", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("child", "Pid_t", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("return_status", "int", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("is_alive", "bool", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("SubProcessOptions", "int", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("combined_stdout_stderr", "bool", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("inherit_environment", "bool", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("read_async", "bool", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("no_window", "bool", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("search_user_path", "bool", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("SubProcessResult", "", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_CREATE_PIPE", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_OPEN_STDIN", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_OPEN_STDOUT", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_OPEN_STDERR", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_START_PROCESS", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_INITIALIZE_ACTIONS", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("PROCESS_JOIN_FAILED", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("PROCESS_TERMINATION_FAILED", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("READ_FAILED", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("create_named_pipe_helper", symbols.NewTypeFromString("void!", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("rd", "void", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("wr", "void", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("convert_command_line_win32", symbols.NewTypeFromString("WString", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("command_line", "String", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create", symbols.NewTypeFromString("SubProcess!", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("command_line", "String", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "SubProcessOptions", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("environment", "String", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy_command_line", symbols.NewTypeFromString("ZString*", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("command_line", "String", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy_env", symbols.NewTypeFromString("ZString*", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("environment", "String", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("execute_stdout_to_buffer", symbols.NewTypeFromString("String!", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("command_line", "String", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "SubProcessOptions", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("environment", "String", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create", symbols.NewTypeFromString("SubProcess!", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("command_line", "String", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", "SubProcessOptions", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("environment", "String", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("join", symbols.NewTypeFromString("CInt!", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", "SubProcess", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeFromString("File", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", "SubProcess", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("join", symbols.NewTypeFromString("CInt!", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", "SubProcess", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewTypeFromString("bool", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", "SubProcess", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("terminate", symbols.NewTypeFromString("void!", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", "SubProcess", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_from_file_win32", symbols.NewTypeFromString("usz!", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("file", "CFile", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("event_handle", "Win32_HANDLE", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_from_file_posix", symbols.NewTypeFromString("usz!", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("file", "CFile", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_stdout", symbols.NewTypeFromString("usz!", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", "SubProcess", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_stderr", symbols.NewTypeFromString("usz!", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", "SubProcess", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", "char", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_running", symbols.NewTypeFromString("bool!", "std::os::process"), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", "SubProcess", "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_ARCHIVE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_COMPRESSED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_DEVICE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_DIRECTORY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_EA", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_ENCRYPTED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_HIDDEN", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_INTEGRITY_STREAM", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_NORMAL", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_NOT_CONTENT_INDEXED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_NO_SCRUB_DATA", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_OFFLINE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_PINNED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_READONLY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_RECALL_ON_OPEN", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_REPARSE_POINT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_SPARSE_FILE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_SYSTEM", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_TEMPORARY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_UNPINNED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_VIRTUAL", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("GENERIC_WRITE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAX_PATH", "", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("OPEN_EXISTING", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddStruct(symbols.NewStructBuilder("Win32_FILE_ATTRIBUTE_DATA", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwFileAttributes", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftCreationTime", "Win32_FILETIME", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftLastAccessTime", "Win32_FILETIME", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftLastWriteTime", "Win32_FILETIME", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("nFileSizeHigh", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("nFileSizeLow", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_WIN32_FIND_DATAW", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwFileAttributes", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftCreationTime", "Win32_FILETIME", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftLastAccessTime", "Win32_FILETIME", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftLastWriteTime", "Win32_FILETIME", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("nFileSizeHigh", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("nFileSizeLow", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwReserved0", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwReserved1", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("cFileName", "Win32_WCHAR", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("cAlternateFileName", "Win32_WCHAR", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwFileType", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwCreatorType", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("wFinderFlags", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWIN32_FIND_DATAW", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("Win32_GET_FILEEX_INFO_LEVELS", "", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithEnumerator(symbols.NewEnumeratorBuilder("STANDARD", "<stdlib-path>/os/win32/files.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_GET_FILEEX_INFO_LEVELS").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MAX", "<stdlib-path>/os/win32/files.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_GET_FILEEX_INFO_LEVELS").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("closeHandle", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createPipe", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("hReadPipe", "Win32_PHANDLE", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("hWritePipe", "Win32_PHANDLE", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpPipeAttributes", "Win32_LPSECURITY_ATTRIBUTES", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("nSize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getFileAttributesExW", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Win32_LPCWSTR", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "Win32_GET_FILEEX_INFO_LEVELS", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "Win32_LPVOID", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pathFileExistsW", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Win32_LPCWSTR", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getTempPathW", symbols.NewTypeFromString("Win32_DWORD", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("nBufferLength", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpBuffer", "Win32_LPWSTR", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setCurrentDirectoryW", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("buffer", "Win32_LPCTSTR", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("removeDirectoryW", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("lpPathName", "Win32_LPCWSTR", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createDirectoryW", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("lpPathName", "Win32_LPCWSTR", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpPipeAttributes", "Win32_LPSECURITY_ATTRIBUTES", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("deleteFileW", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("lpFileName", "Win32_LPCWSTR", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("findFirstFileW", symbols.NewTypeFromString("Win32_HANDLE", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("lpFileName", "Win32_LPCWSTR", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpFindFileData", "Win32_LPWIN32_FIND_DATAW", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("findNextFileW", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("hFindFile", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpFindFileData", "Win32_LPWIN32_FIND_DATAW", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("findClose", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("hFindFile", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createFileA", symbols.NewTypeFromString("Win32_HANDLE", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("lpFileName", "Win32_LPCSTR", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwDesiredAccess", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwShareMode", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpSecurityAttributes", "Win32_LPSECURITY_ATTRIBUTES", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwCreationDisposition", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwFlagsAndAttributes", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("hTemplateFile", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("readFile", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("hFile", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpBuffer", "Win32_LPVOID", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("nNumberOfBytesToRead", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpNumberOfBytesRead", "Win32_LPDWORD", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpOverlapped", "Win32_LPOVERLAPPED", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_wgetcwd", symbols.NewTypeFromString("WString", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("buffer", "Char16", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("maxlen", "int", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wcslen", symbols.NewTypeFromString("usz", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("str", "WString", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_open_osfhandle", symbols.NewTypeFromString("int", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("osfhandle", "iptr", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", "int", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_get_osfhandle", symbols.NewTypeFromString("iptr", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("fd", "int", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_fdopen", symbols.NewTypeFromString("CFile", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("fd", "int", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "ZString", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_access", symbols.NewTypeFromString("CInt", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("path", "ZString", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "CInt", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_waccess", symbols.NewTypeFromString("CInt", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("path", "WString", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", "CInt", "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("ERROR_ACCESS_DENIED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ADAP_HDW_ERR", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ALREADY_ASSIGNED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ALREADY_EXISTS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ARENA_TRASHED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ATOMIC_LOCKS_NOT_SUPPORTED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_AUTODATASEG_EXCEEDS_64K", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_ARGUMENTS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_COMMAND", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_DEV_TYPE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_DRIVER_LEVEL", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_ENVIRONMENT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_EXE_FORMAT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_FILE_TYPE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_FORMAT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_LENGTH", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_NETPATH", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_NET_NAME", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_NET_RESP", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_PATHNAME", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_PIPE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_REM_ADAP", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_THREADID_ADDR", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_UNIT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BROKEN_PIPE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BUFFER_OVERFLOW", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BUSY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BUSY_DRIVE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CALL_NOT_IMPLEMENTED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CANCEL_VIOLATION", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CANNOT_COPY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CANNOT_MAKE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CHECKOUT_REQUIRED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CHILD_NOT_COMPLETE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CRC", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CURRENT_DIRECTORY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DELETE_PENDING", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DEVICE_FEATURE_NOT_SUPPORTED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DEVICE_SUPPORT_IN_PROGRESS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DEV_NOT_EXIST", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DIRECTORY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DIRECT_ACCESS_HANDLE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DIR_NOT_EMPTY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DIR_NOT_ROOT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DISCARDED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DISK_CHANGE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DISK_FULL", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DISK_RESOURCES_EXHAUSTED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DISK_TOO_FRAGMENTED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DRIVE_LOCKED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DUPLICATE_PRIVILEGES", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DUP_NAME", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DYNLINK_FROM_INVALID_RING", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EAS_DIDNT_FIT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EAS_NOT_SUPPORTED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EA_FILE_CORRUPT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EA_LIST_INCONSISTENT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EA_TABLE_FULL", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ENVVAR_NOT_FOUND", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EXCL_SEM_ALREADY_OWNED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EXE_MACHINE_TYPE_MISMATCH", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EXE_MARKED_INVALID", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FAIL_I24", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FILENAME_EXCED_RANGE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FILE_CHECKED_OUT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FILE_EXISTS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FILE_NOT_FOUND", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FILE_TOO_LARGE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FORMS_AUTH_REQUIRED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_GEN_FAILURE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_HANDLE_DISK_FULL", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_HANDLE_EOF", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INFLOOP_IN_RELOC_CHAIN", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INSUFFICIENT_BUFFER", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_ACCESS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_AT_INTERRUPT_TIME", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_BLOCK", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_CATEGORY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_DATA", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_DRIVE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_EA_HANDLE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_EA_NAME", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_EVENT_COUNT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_EXCEPTION_HANDLER", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_EXE_SIGNATURE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_FLAG_NUMBER", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_FUNCTION", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_HANDLE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_LEVEL", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_LIST_FORMAT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_LOCK_RANGE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_MINALLOCSIZE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_MODULETYPE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_NAME", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_OPLOCK_PROTOCOL", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_ORDINAL", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_PARAMETER", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_PASSWORD", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_SEGDPL", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_SEGMENT_NUMBER", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_SIGNAL_NUMBER", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_STACKSEG", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_STARTING_CODESEG", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_TARGET_HANDLE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_TOKEN", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_VERIFY_SWITCH", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IOPL_NOT_ENABLED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IO_INCOMPLETE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IO_PENDING", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_JOINED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_JOIN_PATH", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_JOIN_TARGET", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_SUBSTED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_SUBST_PATH", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_SUBST_TARGET", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ITERATED_DATA_EXCEEDS_64K", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_JOIN_TO_JOIN", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_JOIN_TO_SUBST", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_LABEL_TOO_LONG", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_LOCKED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_LOCK_FAILED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_LOCK_VIOLATION", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_MAX_THRDS_REACHED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_META_EXPANSION_TOO_LONG", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_MOD_NOT_FOUND", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_MORE_DATA", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_MR_MID_NOT_FOUND", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NEGATIVE_SEEK", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NESTING_NOT_ALLOWED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NETNAME_DELETED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NETWORK_ACCESS_DENIED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NETWORK_BUSY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NET_WRITE_FAULT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOTIFICATION_GUID_ALREADY_DEFINED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_ALLOWED_ON_SYSTEM_FILE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_DOS_DISK", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_ENOUGH_MEMORY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_JOINED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_LOCKED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_OWNER", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_READY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_SAME_DEVICE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_SUBSTED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_SUPPORTED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_DATA", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_MORE_FILES", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_MORE_ITEMS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_MORE_SEARCH_HANDLES", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_PROC_SLOTS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_RANGES_PROCESSED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_SIGNAL_SENT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_SPOOL_SPACE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_VOLUME_LABEL", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_OPEN_FAILED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_OPLOCK_NOT_GRANTED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_OUTOFMEMORY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_OUT_OF_PAPER", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_OUT_OF_STRUCTURES", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PARTIAL_COPY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PATH_BUSY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PATH_NOT_FOUND", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PIPE_BUSY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PIPE_LOCAL", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PIPE_NOT_CONNECTED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PRINTQ_FULL", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PRINT_CANCELLED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PROC_NOT_FOUND", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_READ_FAULT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_REDIR_PAUSED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_RELOC_CHAIN_XEEDS_SEGLIM", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_REM_NOT_LIST", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_REQ_NOT_ACCEP", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_RING2SEG_MUST_BE_MOVABLE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_RING2_STACK_IN_USE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SAME_DRIVE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SCOPE_NOT_FOUND", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SECTOR_NOT_FOUND", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SECURITY_STREAM_IS_INCONSISTENT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEEK", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEEK_ON_DEVICE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEM_IS_SET", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEM_NOT_FOUND", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEM_OWNER_DIED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEM_TIMEOUT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEM_USER_LIMIT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SHARING_BUFFER_EXCEEDED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SHARING_PAUSED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SHARING_VIOLATION", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SIGNAL_PENDING", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SIGNAL_REFUSED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SUBST_TO_JOIN", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SUBST_TO_SUBST", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SYSTEM_TRACE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_THREAD_1_INACTIVE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_CMDS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_MODULES", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_MUXWAITERS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_NAMES", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_OPEN_FILES", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_POSTS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_SEMAPHORES", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_SEM_REQUESTS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_SESS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_TCBS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_UNDEFINED_SCOPE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_UNEXP_NET_ERR", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_VC_DISCONNECTED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_VIRUS_DELETED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_VIRUS_INFECTED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_WAIT_NO_CHILDREN", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_WRITE_FAULT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_WRITE_PROTECT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_WRONG_DISK", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("WAIT_TIMEOUT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddFunction(symbols.NewFunctionBuilder("getLastError", symbols.NewTypeFromString("Win32_DWORD", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/general.c3").WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddFunction(symbols.NewFunctionBuilder("_aligned_malloc", symbols.NewTypeFromString("void*", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("size", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_realloc", symbols.NewTypeFromString("void*", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", "void", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_recalloc", symbols.NewTypeFromString("void*", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", "void", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_free", symbols.NewTypeFromString("void", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", "void", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_msize", symbols.NewTypeFromString("void", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", "void", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_offset_malloc", symbols.NewTypeFromString("void*", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("size", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_offset_realloc", symbols.NewTypeFromString("void*", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", "void", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_offset_recalloc", symbols.NewTypeFromString("void*", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", "void", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", "usz", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_msize", symbols.NewTypeFromString("usz", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", "void", "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("ACCESS_SYSTEM_SECURITY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("CREATE_NO_WINDOW", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("CREATE_PROTECTED_PROCESS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("CREATE_UNICODE_ENVIRONMENT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_FLAG_FIRST_PIPE_INSTANCE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_FLAG_OVERLAPPED", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_FLAG_WRITE_THROUGH", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("HANDLE_FLAG_INHERIT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("HANDLE_FLAG_PROTECT_FROM_CLOSE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_AMD64", "", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_ARM64", "", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_I386", "", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_IA64", "", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_TARGET_HOST", "", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_UNKNOWN", "", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("INFINITE", "uint", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_ACCEPT_REMOTE_CLIENTS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_ACCESS_DUPLEX", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_ACCESS_INBOUND", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_ACCESS_OUTBOUND", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_NOWAIT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_READMODE_BYTE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_READMODE_MESSAGE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_REJECT_REMOTE_CLIENTS", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_TYPE_BYTE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_TYPE_MESSAGE", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_WAIT", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("STARTF_USESTDHANDLES", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_CASE_INSENSITIVE", "", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_DEFERRED_LOADS", "", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_IGNORE_CVREC", "", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_LOAD_ANYTHING", "", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_LOAD_LINES", "", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_NO_CPP", "", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_OMAP_FIND_NEAREST", "", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_UNDNAME", "", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("UNDNAME_COMPLETE", "", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WAIT_ABANDONED", "uint", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WAIT_FAILED", "uint", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WAIT_IO_COMPLETION", "uint", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WAIT_OBJECT_0", "uint", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WRITE_DAC", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WRITE_OWNER", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("displacement", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddStruct(symbols.NewStructBuilder("Symbol", "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithStructMember("sym", "Win32_SYMBOL_INFO", "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithStructMember("buffer", "char", "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("initializeCriticalSection", symbols.NewTypeFromString("void", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("section", "Win32_CRITICAL_SECTION", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("deleteCriticalSection", symbols.NewTypeFromString("void", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("section", "Win32_CRITICAL_SECTION", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createMutex", symbols.NewTypeFromString("Win32_HANDLE", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "void", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "bool", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "void", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("releaseMutex", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("enterCriticalSection", symbols.NewTypeFromString("void", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("section", "Win32_CRITICAL_SECTION", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("leaveCriticalSection", symbols.NewTypeFromString("void", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("section", "Win32_CRITICAL_SECTION", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tryEnterCriticalSection", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("section", "Win32_CRITICAL_SECTION", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("waitForSingleObject", symbols.NewTypeFromString("uint", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("milliseconds", "uint", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleep", symbols.NewTypeFromString("void", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("ms", "uint", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("waitForMultipleObjects", symbols.NewTypeFromString("uint", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("count", "uint", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("handles", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("wait_all", "bool", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", "uint", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resetEvent", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("event", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setEvent", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("handle", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("interlockedCompareExchange", symbols.NewTypeFromString("long", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("dest", "int", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("exchange", "int", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("comperand", "int", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleepEx", symbols.NewTypeFromString("Win32_DWORD", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("ms", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("alertable", "Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createThread", symbols.NewTypeFromString("Win32_HANDLE", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("attributes", "void", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("stack", "usz", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", "ThreadFn", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", "void", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", "uint", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("thread_id", "uint", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getExitCodeThread", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("handle", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("exit_code", "uint", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getExitCodeProcess", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpExitCode", "Win32_LPDWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getThreadId", symbols.NewTypeFromString("Win32_DWORD", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exitThread", symbols.NewTypeFromString("void", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("dwExitCode", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getCurrentThread", symbols.NewTypeFromString("Win32_HANDLE", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("terminateProcess", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("uExitCode", "Win32_UINT", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getCurrentProcessId", symbols.NewTypeFromString("Win32_DWORD", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getCurrentProcess", symbols.NewTypeFromString("Win32_HANDLE", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getCurrentThreadId", symbols.NewTypeFromString("Win32_DWORD", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setHandleInformation", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hObject", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwMask", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwFlags", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createEventA", symbols.NewTypeFromString("Win32_HANDLE", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpEventAttributes", "Win32_LPSECURITY_ATTRIBUTES", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bManualReset", "Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bInitialState", "Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpName", "Win32_LPCSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createProcessW", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpApplicationName", "Win32_LPCWSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpCommandLine", "Win32_LPWSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpProcessAttributes", "Win32_LPSECURITY_ATTRIBUTES", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpThreadAttributes", "Win32_LPSECURITY_ATTRIBUTES", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bInheritHandles", "Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwCreationFlags", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpEnvironment", "Win32_LPVOID", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpCurrentDirectory", "Win32_LPCWSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpStartupInfo", "Win32_LPSTARTUPINFOW", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpProcessInformation", "Win32_LPPROCESS_INFORMATION", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createNamedPipeA", symbols.NewTypeFromString("Win32_HANDLE", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpName", "Win32_LPCSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwOpenMode", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwPipeMode", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nMaxInstances", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nOutBufferSize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nInBufferSize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nDefaultTimeOut", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpSecurityAttributes", "Win32_LPSECURITY_ATTRIBUTES", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getOverlappedResult", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hFile", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpOverlapped", "Win32_LPOVERLAPPED", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpNumberOfBytesTransferred", "Win32_LPDWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bWait", "Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getEnvironmentVariableW", symbols.NewTypeFromString("Win32_DWORD", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpName", "Win32_LPCWSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpBuffer", "Win32_LPWSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nSize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setEnvironmentVariableW", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpName", "Win32_LPCWSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpValue", "Win32_LPCWSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getSystemInfo", symbols.NewTypeFromString("void", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpSystemInfo", "Win32_LPSYSTEM_INFO", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("enumProcessModules", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lphModule", "Win32_HMODULE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("cb", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpcbNeeded", "Win32_LPDWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleInformation", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hModule", "Win32_HMODULE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpmodinfo", "Win32_LPMODULEINFO", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("cb", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symAddrIncludeInlineTrace", symbols.NewTypeFromString("Win32_DWORD", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symQueryInlineTrace", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("startAddress", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("startContext", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("startRetAddress", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("curAddress", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("curContext", "Win32_LPDWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("curFrameIndex", "Win32_LPDWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symFromInlineContext", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("inlineContext", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("displacement", "Win32_PDWORD64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("symbol", "Win32_PSYMBOL_INFO", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symGetLineFromInlineContext", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("qwAddr", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("inlineContext", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("qwModuleBaseAddress", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("pdwDisplacement", "Win32_PDWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("line64", "Win32_PIMAGEHLP_LINE64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rtlWalkFrameChain", symbols.NewTypeFromString("Win32_ULONG", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Win32_PVOID", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symInitialize", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("userSearchPath", "Win32_PCSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("fInvadeProcess", "Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symCleanup", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleFileNameA", symbols.NewTypeFromString("Win32_DWORD", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hModule", "Win32_HMODULE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpFilename", "Win32_LPSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nSize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleFileNameExA", symbols.NewTypeFromString("Win32_DWORD", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hModule", "Win32_HMODULE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpFilename", "Win32_LPSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nSize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symLoadModuleEx", symbols.NewTypeFromString("Win32_DWORD64", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hFile", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("imageName", "Win32_PCSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("moduleName", "Win32_PCSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("baseOfDll", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dllSize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", "Win32_PMODLOAD_DATA", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stackWalk64", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("machineType", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hThread", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("stackFrame", "Win32_LPSTACKFRAME64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("contextRecord", "Win32_PVOID", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("readMemoryRoutine", "Win32_PREAD_PROCESS_MEMORY_ROUTINE64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("functionTableAccessRoutine", "Win32_PFUNCTION_TABLE_ACCESS_ROUTINE64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("getModuleBaseRoutine", "Win32_PGET_MODULE_BASE_ROUTINE64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("translateAddress", "Win32_PTRANSLATE_ADDRESS_ROUTINE64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rtlCaptureContext", symbols.NewTypeFromString("void", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("contextRecord", "Win32_PCONTEXT", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symFunctionTableAccess64", symbols.NewTypeFromString("void*", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("addrBase", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symGetModuleBase64", symbols.NewTypeFromString("Win32_DWORD64", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("qwAddr", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleBaseNameA", symbols.NewTypeFromString("Win32_DWORD", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hModule", "Win32_HMODULE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpBaseName", "Win32_LPSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nSize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symGetOptions", symbols.NewTypeFromString("Win32_DWORD", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symSetOptions", symbols.NewTypeFromString("Win32_DWORD", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("symOptions", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("imageNtHeader", symbols.NewTypeFromString("Win32_PIMAGE_NT_HEADERS", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("base", "Win32_PVOID", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unDecorateSymbolName", symbols.NewTypeFromString("Win32_DWORD", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("name", "Win32_PCSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("outputString", "Win32_PSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("maxStringLength", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symFromAddr", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("displacement", "Win32_PDWORD64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("symbol", "Win32_PSYMBOL_INFO", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symGetLineFromAddr64", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwAddr", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("pdwDisplacement", "Win32_PDWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", "Win32_PIMAGEHLP_LINE64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rtlCaptureStackBackTrace", symbols.NewTypeFromString("Win32_WORD", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("framesToSkip", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("framesToCapture", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("backTrace", "Win32_PVOID", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("backTraceHash", "Win32_PDWORD", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symGetModuleInfo64", symbols.NewTypeFromString("Win32_BOOL", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("qwAddr", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("moduleInfo", "Win32_PIMAGEHLP_MODULE64", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleHandleA", symbols.NewTypeFromString("Win32_HANDLE", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpModuleName", "Win32_LPCSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleHandleW", symbols.NewTypeFromString("Win32_HANDLE", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpModuleName", "Win32_LPCWSTR", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load_modules", symbols.NewTypeFromString("Win32_DWORD!", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symbolize_backtrace", symbols.NewTypeFromString("BacktraceList!", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("backtrace", "void", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resolve_backtrace", symbols.NewTypeFromString("Backtrace!", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("addr", "void", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("process", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", "Allocator", "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("ARM64_MAX_BREAKPOINTS", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("ARM64_MAX_WATCHPOINTS", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_ALL", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_CONTROL", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_DEBUG_REGISTERS", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_FLOATING_POINT", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_FULL", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_INTEGER", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_SEGMENTS", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("INVALID_HANDLE_VALUE", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddStruct(symbols.NewStructBuilder("Win32_ADDRESS64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("offset", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segment", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("mode", "Win32_ADDRESS_MODE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_AMD64_CONTEXT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p1Home", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p2Home", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p3Home", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p4Home", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p5Home", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p6Home", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("contextFlags", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("mxCsr", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segCs", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segDs", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segEs", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segFs", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segGs", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segSs", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("eFlags", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr0", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr1", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr2", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr3", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr6", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr7", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rax", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rcx", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rdx", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rbx", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rsp", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rbp", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rsi", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rdi", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r8", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r9", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r10", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r11", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r12", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r13", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r14", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r15", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rip", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fltSave", "Win32_XMM_SAVE_AREA32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("d", "Win32_ULONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("header", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("legacy", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm0", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm1", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm2", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm3", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm4", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm5", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm6", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm7", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm8", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm9", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm10", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm11", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm12", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm13", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm14", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm15", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("s", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("vectorRegister", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("vectorControl", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("debugControl", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lastBranchToRip", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lastBranchFromRip", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lastExceptionToRip", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lastExceptionFromRip", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_ARM64_NT_CONTEXT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("contextFlags", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cpsr", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x0", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x1", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x2", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x3", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x4", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x5", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x6", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x7", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x8", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x9", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x10", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x11", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x12", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x13", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x14", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x15", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x16", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x17", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x18", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x19", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x20", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x21", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x22", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x23", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x24", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x25", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x26", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x27", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x28", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fp", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lr", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sp", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pc", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("v", "Win32_ARM64_NT_NEON128", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fpcr", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fpsr", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("bcr", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("bvr", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wcr", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wvr", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_ARM64_NT_NEON128", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("low", "Win32_ULONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("high", "Win32_LONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_FILETIME", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwLowDateTime", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwHighDateTime", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_GUID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("data1", "CULong", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("data2", "CUShort", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("data3", "CUShort", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("data4", "char", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGEHLP_LINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfStruct", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("key", "Win32_PVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lineNumber", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fileName", "Win32_PCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("address", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGEHLP_MODULE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfStruct", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("baseOfImage", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("imageSize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("timeDateStamp", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("checkSum", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("numSyms", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("symType", "Win32_SYM_TYPE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("moduleName", "Win32_CHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("imageName", "Win32_CHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("loadedImageName", "Win32_CHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("loadedPdbName", "Win32_CHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cVSig", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cVData", "Win32_CHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pdbSig", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pdbSig70", "Win32_GUID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pdbAge", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pdbUnmatched", "Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dbgUnmatched", "Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lineNumbers", "Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("globalSymbols", "Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("typeInfo", "Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sourceIndexed", "Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("publics", "Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("machineType", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGE_DATA_DIRECTORY", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("virtualAddress", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("size", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGE_FILE_HEADER", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("machine", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("numberOfSections", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("timeDateStamp", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pointerToSymbolTable", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("numberOfSymbols", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfOptionalHeader", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("characteristics", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGE_NT_HEADERS", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("signature", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fileHeader", "Win32_IMAGE_FILE_HEADER", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("optionalHeader", "Win32_IMAGE_OPTIONAL_HEADER64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGE_OPTIONAL_HEADER64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("magic", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("majorLinkerVersion", "Win32_BYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("minorLinkerVersion", "Win32_BYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfCode", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfInitializedData", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfUninitializedData", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addressOfEntryPoint", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("baseOfCode", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("imageBase", "Win32_ULONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sectionAlignment", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fileAlignment", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("majorOperatingSystemVersion", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("minorOperatingSystemVersion", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("majorImageVersion", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("minorImageVersion", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("majorSubsystemVersion", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("minorSubsystemVersion", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("win32VersionValue", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfImage", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfHeaders", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("checkSum", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("subsystem", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dllCharacteristics", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfStackReserve", "Win32_ULONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfStackCommit", "Win32_ULONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfHeapReserve", "Win32_ULONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfHeapCommit", "Win32_ULONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("loaderFlags", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("numberOfRvaAndSizes", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dataDirectory", "Win32_IMAGE_DATA_DIRECTORY", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_KDHELP64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("thread", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("thCallbackStack", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("thCallbackBStore", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("nextCallback", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("framePointer", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("kiCallUserMode", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("keUserCallbackDispatcher", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("systemRangeStart", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("kiUserExceptionDispatcher", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("stackBase", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("stackLimit", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("buildVersion", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("retpolineStubFunctionTableSize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("retpolineStubFunctionTable", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("retpolineStubOffset", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("retpolineStubSize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved0", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_LARGE_INTEGER", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lowPart", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("highPart", "Win32_LONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("quadPart", "ulong", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("low", "Win32_ULONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("high", "Win32_LONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_MODLOAD_DATA", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("ssize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("ssig", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("data", "Win32_PVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("size", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("flags", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_MODULEINFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpBaseOfDll", "Win32_LPVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfImage", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("entryPoint", "Win32_LPVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_OVERLAPPED", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("internal", "Win32_ULONG_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("internalHigh", "Win32_ULONG_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("offset", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("offsetHigh", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pointer", "Win32_PVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hEvent", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_PROCESS_INFORMATION", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hProcess", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hThread", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwProcessId", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwThreadId", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_SECURITY_ATTRIBUTES", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("nLength", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpSecurityDescriptor", "Win32_LPVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("bInheritHandle", "Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_STACKFRAME64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addrPC", "Win32_ADDRESS64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addrReturn", "Win32_ADDRESS64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addrFrame", "Win32_ADDRESS64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addrStack", "Win32_ADDRESS64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addrBStore", "Win32_ADDRESS64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("funcTableEntry", "Win32_PVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("params", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("far", "Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("virtual", "Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("kdHelp", "Win32_KDHELP64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_STARTUPINFOEXW", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("win32_StartupInfo", "Win32_STARTUPINFOW", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpAttributeList", "Win32_LPPROC_THREAD_ATTRIBUTE_LIST", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cb", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpReserved", "Win32_LPWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpDesktop", "Win32_LPWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpTitle", "Win32_LPWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwX", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwXSize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwYSize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwXCountChars", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwYCountChars", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwFillAttribute", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwFlags", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wShowWindow", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cbReserved2", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpReserved2", "Win32_LPBYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdInput", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdOutput", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdError", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_STARTUPINFOW", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cb", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpReserved", "Win32_LPWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpDesktop", "Win32_LPWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpTitle", "Win32_LPWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwX", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwY", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwXSize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwYSize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwXCountChars", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwYCountChars", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwFillAttribute", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwFlags", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wShowWindow", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cbReserved2", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpReserved2", "Win32_LPBYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdInput", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdOutput", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdError", "Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_SYMBOL_INFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfStruct", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("typeIndex", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved", "Win32_ULONG64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("index", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("size", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("modBase", "Win32_ULONG64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("flags", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("value", "Win32_ULONG64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("address", "Win32_ULONG64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("register", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("scope", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("tag", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("nameLen", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("maxNameLen", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("name", "Win32_CHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_SYSTEM_INFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwOemId", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wProcessorArchitecture", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wReserved", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwPageSize", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpMinimumApplicationAddress", "Win32_LPVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpMaximumApplicationAddress", "Win32_LPVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwActiveProcessorMask", "Win32_DWORD_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwNumberOfProcessors", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwProcessorType", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwAllocationGranularity", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wProcessorLevel", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wProcessorRevision", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_UNICODE_STRING", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("length", "Win32_USHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("maximum_length", "Win32_USHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("buffer", "Win32_PWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_XMM_SAVE_AREA32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("controlWord", "Win32_USHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("statusWord", "Win32_USHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("tagWord", "Win32_UCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved1", "Win32_UCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("errorOpcode", "Win32_USHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("errrorOffset", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("errorSelector", "Win32_USHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved2", "Win32_USHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dataOffset", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dataSelector", "Win32_USHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved3", "Win32_USHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("mxCsr", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("mxCsr_Mask", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("floatRegisters", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmmRegisters", "Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved4", "Win32_UCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CONTEXT_ALL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("CONTEXT_AMD64_ALL").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CONTEXT_CONTROL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("CONTEXT_AMD64_CONTROL").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CONTEXT_FULL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("CONTEXT_AMD64_FULL").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_BOOLEAN", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_BYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_CCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_CHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_COLORREF", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_CONTEXT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_DWORD32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_DWORDLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_DWORD_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_FLOAT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HACCEL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HALF_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HBITMAP", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HBRUSH", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HCOLORSPACE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HCONV", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HCONVLIST", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HCURSOR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HDC", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HDDEDATA", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HDESK", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HDROP", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HDWP", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HFILE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HFONT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HGDIOBJ", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HGLOBAL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HHOOK", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HICON", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HINSTANCE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HKEY", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HKL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HLOCAL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HMENU", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HMETAFILE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HMODULE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HMONITOR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HPALETTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HPEN", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HRESULT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HRGN", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HRSRC", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HSZ", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HWINSTA", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HWND", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT16", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT8", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LANGID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LCID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LCTYPE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LGRPID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LONG32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LONG64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LONG_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPADDRESS64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPARAM", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPBOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPBYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPCOLORREF", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPCSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPCTSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPCVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPCWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPDWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPHANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPINT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPMODULEINFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPOVERLAPPED", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPPROCESS_INFORMATION", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPPROC_THREAD_ATTRIBUTE_LIST", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSTACKFRAME64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSTARTUPINFOEXW", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSTARTUPINFOW", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSYSTEM_INFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPTSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LRESULT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PBOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PBOOLEAN", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PBYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCONTEXT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCTSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCUNICODE_STRING", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PDWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PDWORD32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PDWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PDWORDLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PDWORDPTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PFLOAT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PFUNCTION_TABLE_ACCESS_ROUTINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("fn Win32_PVOID(Win32_HANDLE ahProcess, Win32_DWORD64 addrBase)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PGET_MODULE_BASE_ROUTINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("fn Win32_DWORD64(Win32_HANDLE hProcess, Win32_DWORD64 address)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PHALFPTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PHANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PHKEY", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PIMAGEHLP_LINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PIMAGEHLP_MODULE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PIMAGE_FILE_HEADER", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PIMAGE_NT_HEADERS", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PIMAGE_OPTIONAL_HEADER64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINT16", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINT32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINT64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINT8", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINTPTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PKDHELP64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLCID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLONG32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLONG64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLONG_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PMODLOAD_DATA", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_POINTER_32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_POINTER_64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_POINTER_SIGNED", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_POINTER_UNSIGNED", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PPROCESS_INFORMATION", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PREAD_PROCESS_MEMORY_ROUTINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("fn Win32_BOOL(Win32_HANDLE hProcess, Win32_DWORD64 qwBaseAddress, Win32_PVOID lpBuffer, Win32_DWORD nSize, Win32_LPDWORD lpNumberOfBytesRead)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSECURITY_ATTRIBUTES", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSIZE_T", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSSIZE_T", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSYMBOL_INFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PTBYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PTCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PTRANSLATE_ADDRESS_ROUTINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("fn Win32_DWORD64(Win32_HANDLE hProcess, Win32_HANDLE hThread, Win32_LPADDRESS64 lpaddr)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PTSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUHALFPTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINT16", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINT32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINT64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINT8", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINTPTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PULONG32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PULONG64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PULONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PULONG_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUNICODE_STRING", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUSHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PWCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_QWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SC_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SC_LOCK", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SERVICE_STATUS_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SIZE_T", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SOCKET", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SSIZE_T", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_TBYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_TCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UHALF_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT16", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT8", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ULONG32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ULONG64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ULONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ULONG_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_USHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_USN", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_WCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_WPARAM", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("Win32_ADDRESS_MODE", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithEnumerator(symbols.NewEnumeratorBuilder("ADDR_MODE_1616", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_ADDRESS_MODE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ADDR_MODE_1632", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_ADDRESS_MODE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ADDR_MODE_REAL", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_ADDRESS_MODE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ADDR_MODE_FLAT", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_ADDRESS_MODE").Build()).Build()).AddEnum(symbols.NewEnumBuilder("Win32_SYM_TYPE", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithEnumerator(symbols.NewEnumeratorBuilder("SYM_NONE", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_COFF", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_CV", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_PDB", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_EXPORT", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_DEFERRED", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_SYM", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_DIA", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_VIRTUAL", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("FIONBIO", "int", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("FIONREAD", "int", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLERR", "Win32_SHORT", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLHUP", "Win32_SHORT", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLIN", "Win32_SHORT", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLNVAL", "Win32_SHORT", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLPRI", "Win32_SHORT", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDBAND", "Win32_SHORT", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDNORM", "Win32_SHORT", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRBAND", "Win32_SHORT", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRNORM", "Win32_SHORT", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SD_BOTH", "", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SD_RECEIVE", "", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SD_SEND", "", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIOCATMARK", "int", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddStruct(symbols.NewStructBuilder("Win32_pollfd", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("fd", "Win32_SOCKET", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("events", "Win32_SHORT", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("revents", "Win32_SHORT", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWSAPOLLFD", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PWSAPOLLFD", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_WSAPOLLFD", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("win32_WSAPoll", symbols.NewTypeFromString("CInt", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithArgument(symbols.NewVariableBuilder("fdArray", "Win32_LPWSAPOLLFD", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithArgument(symbols.NewVariableBuilder("fds", "Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", "Win32_INT", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("win32_WSAGetLastError", symbols.NewTypeFromString("WSAError", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("win32_WSASetLastError", symbols.NewTypeFromString("void", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithArgument(symbols.NewVariableBuilder("error", "WSAError", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("win32_WSAStartup", symbols.NewTypeFromString("CInt", "std::os::win32"), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "void", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32::wsa
	module = moduleCollection["std::os::win32::wsa"]
	module.AddVariable(symbols.NewVariableBuilder("EACCESS", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EADDRINUSE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EADDRNOTAVAIL", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EAFNOSUPPORT", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EALREADY", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADF", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECANCELLED", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNABORTED", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNREFUSED", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNRESET", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDESTADDRREQ", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDISCON", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDQUOT", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EFAULT", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EHOSTDOWN", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EHOSTUNREACH", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINPROGRESS", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINTR", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINVAL", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINVALIDPROCTABLE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINVALIDPROVIDER", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EISCONN", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ELOOP", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMFILE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMSGSIZE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENAMETOOLONG", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETDOWN", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETRESET", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETUNREACH", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOBUFS", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOMORE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOPROTOOPT", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTCONN", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTEMPTY", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTSOCK", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EOPNOTSUPP", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPFNOSUPPORT", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROCLIM", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROTONOSUPPORT", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROTOTYPE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROVIDERFAILEDINIT", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EREMOTE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESHUTDOWN", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESOCKTNOSUPPORT", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESTALE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ETIMEDOUT", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ETOOMANYREFS", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EUSERS", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EWOULDBLOCK", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("E_CANCELLED", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("E_NO_MORE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("HOST_NOT_FOUND", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("INVALID_HANDLE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("INVALID_PARAMETER", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("IO_INCOMPLETE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("IO_PENDING", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("NOTINITIALISED", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("NOT_ENOUGH_MEMORY", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_DATA", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_ERROR", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_RECOVERY", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("OPERATION_ABORTED", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_ADMISSION_FAILURE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_BAD_OBJECT", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_BAD_STYLE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFILTERCOUNT", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFILTERSTYLE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFILTERTYPE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFLOWCOUNT", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFLOWDESC", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFLOWSPEC", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EOBJLENGTH", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EPOLICYOBJ", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EPROVSPECBUF", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EPSFILTERSPEC", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EPSFLOWSPEC", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_ESDMODEOBJ", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_ESERVICETYPE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_ESHAPERATEOBJ", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EUNKOWNPSOBJ", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_GENERIC_ERROR", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_NO_RECEIVERS", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_NO_SENDERS", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_POLICY_FAILURE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_RECEIVERS", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_REQUEST_CONFIRMED", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_RESERVED_PETYPE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_SENDERS", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_TRAFFIC_CTRL_ERROR", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("REFUSED", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SERVICE_NOT_FOUND", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYSCALLFAILURE", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYSNOTREADY", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("TRY_AGAIN", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("TYPE_NOT_FOUND", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("VERNOTSUPPORTED", "WSAError", "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build())

	// Define module std::sort
	module = moduleCollection["std::sort"]
	module.AddFunction(symbols.NewFunctionBuilder("binarysearch", symbols.NewTypeFromString("usz", "std::sort"), "std::sort", "<stdlib-path>/sort/binarysearch.c3").WithArgument(symbols.NewVariableBuilder("list", "", "std::sort", "<stdlib-path>/sort/binarysearch.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", "", "std::sort", "<stdlib-path>/sort/binarysearch.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", "", "std::sort", "<stdlib-path>/sort/binarysearch.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::sort
	module = moduleCollection["std::sort"]
	module.AddFunction(symbols.NewFunctionBuilder("quicksort", symbols.NewTypeFromString("", "std::sort"), "std::sort", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("list", "", "std::sort", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", "", "std::sort", "<stdlib-path>/sort/quicksort.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::sort::qs
	module = moduleCollection["std::sort::qs"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"Comparer": symbols.NewGenericParameter("Comparer", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type":     symbols.NewGenericParameter("Type", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddStruct(symbols.NewStructBuilder("StackElementItem", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithStructMember("low", "isz", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithStructMember("high", "isz", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ElementType", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Stack", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("qsort", symbols.NewTypeFromString("void", "std::sort::qs"), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("list", "Type", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("low", "isz", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("high", "isz", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", "Comparer", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithoutSourceCode().Build())

	// Define module std::sort
	module = moduleCollection["std::sort"]
	module.AddFunction(symbols.NewFunctionBuilder("@len_from_list", symbols.NewTypeFromString("usz", "std::sort"), "std::sort", "<stdlib-path>/sort/sort.c3").WithArgument(symbols.NewVariableBuilder("list", "", "std::sort", "<stdlib-path>/sort/sort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_comparer", symbols.NewTypeFromString("bool", "std::sort"), "std::sort", "<stdlib-path>/sort/sort.c3").WithArgument(symbols.NewVariableBuilder("$arg0", "", "std::sort", "<stdlib-path>/sort/sort.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::sort", "<stdlib-path>/sort/sort.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::thread::cpu
	module = moduleCollection["std::thread::cpu"]
	module.AddVariable(symbols.NewVariableBuilder("CTL_DEBUG", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_HW", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_KERN", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_MACHDEP", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_MAXID", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_NET", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_UNSPEC", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_USER", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_VFS", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_VM", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_BUS_FREQ", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_BYTEORDER", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_CACHELINE", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_CPU_FREQ", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_DISKNAMES", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_DISKSTATS", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_EPOCH", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_FLOATINGPT", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L1DCACHESIZE", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L1ICACHESIZE", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L2CACHESIZE", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L2SETTINGS", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L3CACHESIZE", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L3SETTINGS", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MACHINE", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MACHINE_ARCH", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MAXID", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MODEL", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_NCPU", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PAGESIZE", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PHYSMEM", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_USERMEM", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_VECTORUNIT", "", "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddFunction(symbols.NewFunctionBuilder("native_cpu", symbols.NewTypeFromString("uint", "std::thread::cpu"), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_cpu", symbols.NewTypeFromString("uint", "std::thread::cpu"), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_cpu", symbols.NewTypeFromString("uint", "std::thread::cpu"), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").WithoutSourceCode().Build())

	// Define module std::thread::os
	module = moduleCollection["std::thread::os"]
	module.AddStruct(symbols.NewStructBuilder("NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithStructMember("mutex", "Pthread_mutex_t", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithStructMember("initialized", "bool", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("PosixThreadData", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithStructMember("thread_fn", "ThreadFn", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithStructMember("arg", "void", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("NativeConditionVariable", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("NativeOnceFlag", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("NativeThread", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", "NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", "MutexType", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_initialized", symbols.NewTypeFromString("bool", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", "NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", "NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lock", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", "NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lock_timeout", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", "NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", "ulong", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("try_lock", symbols.NewTypeFromString("bool", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", "NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlock", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", "NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("signal", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("broadcast", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", "NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait_timeout", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", "NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", "ulong", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("callback", symbols.NewTypeFromString("void*", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithArgument(symbols.NewVariableBuilder("arg", "void", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", "", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("thread_fn", "ThreadFn", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", "void", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("detach", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", "", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_exit", symbols.NewTypeFromString("void", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithArgument(symbols.NewVariableBuilder("result", "int", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_current", symbols.NewTypeFromString("NativeThread", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewTypeFromString("bool", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", "", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", "NativeThread", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("join", symbols.NewTypeFromString("int!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", "", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("call_once", symbols.NewTypeFromString("void", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeOnceFlag").WithArgument(symbols.NewVariableBuilder("flag", "", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", "OnceFn", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_yield", symbols.NewTypeFromString("void", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_sleep_nano", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithArgument(symbols.NewVariableBuilder("nano", "NanoDuration", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build())

	// Define module std::thread::os
	module = moduleCollection["std::thread::os"]
	module.AddVariable(symbols.NewVariableBuilder("CONDITION_EVENT_ALL", "int", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONDITION_EVENT_ONE", "int", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).AddStruct(symbols.NewStructBuilder("NativeConditionVariable", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("event_one", "Win32_HANDLE", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("event_all", "Win32_HANDLE", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("events", "Win32_HANDLE", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("waiters_count", "uint", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("waiters_count_lock", "Win32_CRITICAL_SECTION", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("critical_section", "Win32_CRITICAL_SECTION", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("handle", "Win32_HANDLE", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("already_locked", "bool", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("recursive", "bool", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("timed", "bool", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("NativeOnceFlag", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("status", "int", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("lock", "Win32_CRITICAL_SECTION", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", "MutexType", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lock", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lock_timeout", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", "usz", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("try_lock", symbols.NewTypeFromString("bool", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlock", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("signal", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("broadcast", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("timedwait", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithArgument(symbols.NewVariableBuilder("cond", "NativeConditionVariable", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", "NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", "uint", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", "NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait_timeout", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", "NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("time", "uint", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", "ThreadFn", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", "void", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("detach", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_exit", symbols.NewTypeFromString("void", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithArgument(symbols.NewVariableBuilder("result", "int", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_yield", symbols.NewTypeFromString("void", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("call_once", symbols.NewTypeFromString("void", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeOnceFlag").WithArgument(symbols.NewVariableBuilder("flag", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", "OnceFn", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("join", symbols.NewTypeFromString("int!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_current", symbols.NewTypeFromString("NativeThread", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewTypeFromString("bool", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", "", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", "NativeThread", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_sleep_nano", symbols.NewTypeFromString("void!", "std::thread::os"), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithArgument(symbols.NewVariableBuilder("ns", "NanoDuration", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build())

	// Define module std::thread::pool
	module = moduleCollection["std::thread::pool"]
	module.AddStruct(symbols.NewStructBuilder("QueueItem", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("func", "ThreadFn", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("arg", "void", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("ThreadPool", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("mu", "Mutex", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("queue", "QueueItem", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("qindex", "usz", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("num_threads", "usz", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("initialized", "bool", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("stop", "bool", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("stop_now", "bool", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("pool", "Thread", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("notify", "ConditionVariable", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeFromString("void!", "std::thread::pool"), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithTypeIdentifier("ThreadPool").WithArgument(symbols.NewVariableBuilder("self", "ThreadPool", "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewTypeFromString("void!", "std::thread::pool"), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithTypeIdentifier("ThreadPool").WithArgument(symbols.NewVariableBuilder("self", "ThreadPool", "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stop_and_destroy", symbols.NewTypeFromString("void!", "std::thread::pool"), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithTypeIdentifier("ThreadPool").WithArgument(symbols.NewVariableBuilder("self", "ThreadPool", "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ThreadPool.@shutdown", symbols.NewTypeFromString("void!", "std::thread::pool"), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithArgument(symbols.NewVariableBuilder("self", "ThreadPool", "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", "", "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewTypeFromString("void!", "std::thread::pool"), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithTypeIdentifier("ThreadPool").WithArgument(symbols.NewVariableBuilder("self", "ThreadPool", "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", "ThreadFn", "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", "void", "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("process_work", symbols.NewTypeFromString("int", "std::thread::pool"), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithArgument(symbols.NewVariableBuilder("arg", "void", "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithoutSourceCode().Build())

	// Define module std::thread
	module = moduleCollection["std::thread"]
	module.AddVariable(symbols.NewVariableBuilder("MUTEX_PLAIN", "MutexType", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUTEX_RECURSIVE", "MutexType", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUTEX_TIMED", "MutexType", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).AddDef(symbols.NewDefBuilder("OnceFn", "std::thread", "<stdlib-path>/threads/thread.c3").WithResolvesTo("fn void()").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ThreadFn", "std::thread", "<stdlib-path>/threads/thread.c3").WithResolvesTo("fn int(void* arg)").WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("ThreadFault", "", "std::thread", "<stdlib-path>/threads/thread.c3").WithConstant(symbols.NewFaultConstantBuilder("INIT_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("DESTROY_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("LOCK_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("LOCK_TIMEOUT", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNLOCK_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("SIGNAL_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("WAIT_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("WAIT_TIMEOUT", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("DETACH_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("JOIN_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("INTERRUPTED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.init", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TimedMutex.init", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("RecursiveMutex.init", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TimedRecursiveMutex.init", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.destroy", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.lock", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TimedMutex.lock_timeout", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", "ulong", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TimedRecursiveMutex.lock_timeout", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", "ulong", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.try_lock", symbols.NewTypeFromString("bool", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.unlock", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.init", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.destroy", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.signal", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.broadcast", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.wait", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("mutex", "Mutex", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.wait_timeout", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("mutex", "Mutex", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", "ulong", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Thread.create", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("thread", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("thread_fn", "ThreadFn", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", "void", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Thread.detach", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("thread", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Thread.join", symbols.NewTypeFromString("int!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("thread", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Thread.equals", symbols.NewTypeFromString("bool", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("thread", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", "Thread", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("OnceFlag.call", symbols.NewTypeFromString("void", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("flag", "", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", "OnceFn", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("yield", symbols.NewTypeFromString("void", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("current", symbols.NewTypeFromString("Thread", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exit", symbols.NewTypeFromString("void", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("result", "int", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleep", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("d", "Duration", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleep_ms", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("ms", "ulong", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleep_ns", symbols.NewTypeFromString("void!", "std::thread"), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("ns", "NanoDuration", "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::time::clock
	module = moduleCollection["std::time::clock"]
	module.AddFunction(symbols.NewFunctionBuilder("now", symbols.NewTypeFromString("Clock", "std::time::clock"), "std::time::clock", "<stdlib-path>/time/clock.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mark", symbols.NewTypeFromString("NanoDuration", "std::time::clock"), "std::time::clock", "<stdlib-path>/time/clock.c3").WithTypeIdentifier("Clock").WithArgument(symbols.NewVariableBuilder("self", "Clock", "std::time::clock", "<stdlib-path>/time/clock.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_now", symbols.NewTypeFromString("NanoDuration", "std::time::clock"), "std::time::clock", "<stdlib-path>/time/clock.c3").WithTypeIdentifier("Clock").WithArgument(symbols.NewVariableBuilder("self", "Clock", "std::time::clock", "<stdlib-path>/time/clock.c3").Build()).WithoutSourceCode().Build())

	// Define module std::time::datetime
	module = moduleCollection["std::time::datetime"]
	module.AddFunction(symbols.NewFunctionBuilder("now", symbols.NewTypeFromString("DateTime", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_date", symbols.NewTypeFromString("DateTime", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgument(symbols.NewVariableBuilder("year", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("month", "Month", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("day", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("hour", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("sec", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("us", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_local", symbols.NewTypeFromString("TzDateTime", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_date", symbols.NewTypeFromString("void", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("year", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("month", "Month", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("day", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("hour", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("sec", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("us", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_time", symbols.NewTypeFromString("void", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("time", "Time", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_seconds", symbols.NewTypeFromString("DateTime", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("seconds", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_minutes", symbols.NewTypeFromString("DateTime", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("minutes", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_hours", symbols.NewTypeFromString("DateTime", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("hours", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_days", symbols.NewTypeFromString("DateTime", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("days", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_weeks", symbols.NewTypeFromString("DateTime", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("weeks", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_years", symbols.NewTypeFromString("DateTime", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("years", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_months", symbols.NewTypeFromString("DateTime", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("months", "int", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_time", symbols.NewTypeFromString("DateTime", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgument(symbols.NewVariableBuilder("time", "Time", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_time", symbols.NewTypeFromString("Time", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("after", symbols.NewTypeFromString("bool", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("before", symbols.NewTypeFromString("bool", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compare_to", symbols.NewTypeFromString("int", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_years", symbols.NewTypeFromString("int", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("from", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_sec", symbols.NewTypeFromString("double", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("from", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_us", symbols.NewTypeFromString("Duration", "std::time::datetime"), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("from", "DateTime", "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build())

	// Define module std::time::os
	module = moduleCollection["std::time::os"]
	module.AddStruct(symbols.NewStructBuilder("Darwin_mach_timebase_info", "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithStructMember("numer", "uint", "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithStructMember("denom", "uint", "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Darwin_mach_timebase_info_data_t", "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Darwin_mach_timebase_info_t", "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithResolvesTo("").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mach_timebase_info", symbols.NewTypeFromString("void", "std::time::os"), "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithArgument(symbols.NewVariableBuilder("timebase", "Darwin_mach_timebase_info_data_t", "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mach_absolute_time", symbols.NewTypeFromString("ulong", "std::time::os"), "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_clock", symbols.NewTypeFromString("Clock", "std::time::os"), "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithoutSourceCode().Build())

	// Define module std::time::os
	module = moduleCollection["std::time::os"]
	module.AddVariable(symbols.NewVariableBuilder("CLOCK_BOOTTIME", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_BOOTTIME_ALARM", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC_COARSE", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC_FAST", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC_PRECISE", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC_RAW", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC_RAW_APPROX", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_PROCESS_CPUTIME_ID", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_PROF", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_REALTIME", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_REALTIME_ALARM", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_REALTIME_COARSE", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_REALTIME_FAST", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_REALTIME_PRECISE", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_SECOND", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_TAI", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_THREAD_CPUTIME_ID", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_UPTIME", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_UPTIME_FAST", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_UPTIME_PRECISE", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_UPTIME_RAW", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_UPTIME_RAW_APPROX", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_VIRTUAL", "", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddFunction(symbols.NewFunctionBuilder("clock_gettime", symbols.NewTypeFromString("void", "std::time::os"), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").WithArgument(symbols.NewVariableBuilder("type", "int", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("time", "TimeSpec", "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_timestamp", symbols.NewTypeFromString("Time", "std::time::os"), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_clock", symbols.NewTypeFromString("Clock", "std::time::os"), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").WithoutSourceCode().Build())

	// Define module std::time::os
	module = moduleCollection["std::time::os"]
	module.AddVariable(symbols.NewVariableBuilder("WINDOWS_TICK_US", "ulong", "std::time::os", "<stdlib-path>/time/os/time_win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("WIN_TO_UNIX_EPOCH_US", "ulong", "std::time::os", "<stdlib-path>/time/os/time_win32.c3").Build()).AddFunction(symbols.NewFunctionBuilder("win32_GetSystemTimeAsFileTime", symbols.NewTypeFromString("void", "std::time::os"), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").WithArgument(symbols.NewVariableBuilder("time", "Win32_FILETIME", "std::time::os", "<stdlib-path>/time/os/time_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("win32_QueryPerformanceFrequency", symbols.NewTypeFromString("Win32_BOOL", "std::time::os"), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").WithArgument(symbols.NewVariableBuilder("lpFrequency", "Win32_LARGE_INTEGER", "std::time::os", "<stdlib-path>/time/os/time_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("win32_QueryPerformanceCounter", symbols.NewTypeFromString("Win32_BOOL", "std::time::os"), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").WithArgument(symbols.NewVariableBuilder("lpPerformanceCount", "Win32_LARGE_INTEGER", "std::time::os", "<stdlib-path>/time/os/time_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_clock", symbols.NewTypeFromString("Clock", "std::time::os"), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_timestamp", symbols.NewTypeFromString("Time", "std::time::os"), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").WithoutSourceCode().Build())

	// Define module std::time
	module = moduleCollection["std::time"]
	module.AddVariable(symbols.NewVariableBuilder("DAY", "Duration", "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("HOUR", "Duration", "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("MIN", "Duration", "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("MONTH", "Duration", "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("MS", "Duration", "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("SEC", "Duration", "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("WEEK", "Duration", "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("YEAR", "Duration", "std::time", "<stdlib-path>/time/time.c3").Build()).AddStruct(symbols.NewStructBuilder("DateTime", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("usec", "int", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("sec", "char", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("min", "char", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("hour", "char", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("day", "char", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("month", "Month", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("weekday", "Weekday", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("year", "int", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("year_day", "ushort", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("time", "Time", "std::time", "<stdlib-path>/time/time.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TzDateTime", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("date_time", "DateTime", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("gmt_offset", "int", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("usec", "int", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("sec", "char", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("min", "char", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("hour", "char", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("day", "char", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("month", "Month", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("weekday", "Weekday", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("year", "int", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("year_day", "ushort", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("time", "Time", "std::time", "<stdlib-path>/time/time.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("Month", "char", "std::time", "<stdlib-path>/time/time.c3").WithEnumerator(symbols.NewEnumeratorBuilder("JANUARY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FEBRUARY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MARCH", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("APRIL", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("JUNE", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("JULY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AUGUST", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SEPTEMBER", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OCTOBER", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NOVEMBER", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DECEMBER", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Month").Build()).Build()).AddEnum(symbols.NewEnumBuilder("Weekday", "char", "std::time", "<stdlib-path>/time/time.c3").WithEnumerator(symbols.NewEnumeratorBuilder("MONDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TUESDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WEDNESDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("THURSDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FRIDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SATURDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SUNDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Weekday").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("ms", symbols.NewTypeFromString("Duration", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("l", "long", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sec", symbols.NewTypeFromString("Duration", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("l", "long", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("min", symbols.NewTypeFromString("Duration", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("l", "long", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hour", symbols.NewTypeFromString("Duration", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("l", "long", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_float", symbols.NewTypeFromString("Duration", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("s", "double", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("now", symbols.NewTypeFromString("Time", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_seconds", symbols.NewTypeFromString("Time", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("seconds", "long", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_minutes", symbols.NewTypeFromString("Time", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("minutes", "long", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_hours", symbols.NewTypeFromString("Time", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("hours", "long", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_days", symbols.NewTypeFromString("Time", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("days", "long", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_weeks", symbols.NewTypeFromString("Time", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("weeks", "long", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_duration", symbols.NewTypeFromString("Time", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", "Duration", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_seconds", symbols.NewTypeFromString("double", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_us", symbols.NewTypeFromString("Duration", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", "Time", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_sec", symbols.NewTypeFromString("double", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", "Time", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_min", symbols.NewTypeFromString("double", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", "Time", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_hour", symbols.NewTypeFromString("double", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", "Time", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_days", symbols.NewTypeFromString("double", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", "Time", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_weeks", symbols.NewTypeFromString("double", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", "Time", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_sec", symbols.NewTypeFromString("double", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("NanoDuration").WithArgument(symbols.NewVariableBuilder("nd", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_ms", symbols.NewTypeFromString("long", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("NanoDuration").WithArgument(symbols.NewVariableBuilder("nd", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_duration", symbols.NewTypeFromString("Duration", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("NanoDuration").WithArgument(symbols.NewVariableBuilder("nd", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_nano", symbols.NewTypeFromString("NanoDuration", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Duration").WithArgument(symbols.NewVariableBuilder("td", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_ms", symbols.NewTypeFromString("long", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Duration").WithArgument(symbols.NewVariableBuilder("td", "", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewTypeFromString("usz!", "std::time"), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("NanoDuration").WithArgument(symbols.NewVariableBuilder("self", "NanoDuration", "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", "Formatter", "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build())
	return parsedModules
}
