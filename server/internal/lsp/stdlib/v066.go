package stdlib

import (
	symbols "github.com/pherrymason/c3-lsp/pkg/symbols"
	symbolstable "github.com/pherrymason/c3-lsp/pkg/symbols_table"
)

func Load_v066_stdlib() symbolstable.UnitModules {
	docId := "_stdlib"
	moduleCollection := map[string]*symbols.Module{
		"libc":                                     symbols.NewModuleBuilder("libc", "<stdlib-path>/libc/os/linux.c3").WithoutSourceCode().Build(),
		"libc::errno":                              symbols.NewModuleBuilder("libc::errno", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build(),
		"libc::os":                                 symbols.NewModuleBuilder("libc::os", "<stdlib-path>/libc/os/errno.c3").WithoutSourceCode().Build(),
		"libc::termios":                            symbols.NewModuleBuilder("libc::termios", "<stdlib-path>/libc/os/posix.c3").WithoutSourceCode().Build(),
		"std::ascii":                               symbols.NewModuleBuilder("std::ascii", "<stdlib-path>/ascii.c3").WithoutSourceCode().Build(),
		"std::atomic":                              symbols.NewModuleBuilder("std::atomic", "<stdlib-path>/atomic.c3").WithoutSourceCode().Build(),
		"std::atomic::types":                       symbols.NewModuleBuilder("std::atomic::types", "<stdlib-path>/atomic.c3").WithoutSourceCode().Build(),
		"std::bits":                                symbols.NewModuleBuilder("std::bits", "<stdlib-path>/bits.c3").WithoutSourceCode().Build(),
		"std::collections::anylist":                symbols.NewModuleBuilder("std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithoutSourceCode().Build(),
		"std::collections::bitset":                 symbols.NewModuleBuilder("std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithoutSourceCode().Build(),
		"std::collections::elastic_array":          symbols.NewModuleBuilder("std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithoutSourceCode().Build(),
		"std::collections::enummap":                symbols.NewModuleBuilder("std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithoutSourceCode().Build(),
		"std::collections::enumset":                symbols.NewModuleBuilder("std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithoutSourceCode().Build(),
		"std::collections::enumset::private":       symbols.NewModuleBuilder("std::collections::enumset::private", "<stdlib-path>/collections/enumset.c3").WithoutSourceCode().Build(),
		"std::collections::growablebitset":         symbols.NewModuleBuilder("std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithoutSourceCode().Build(),
		"std::collections::linkedlist":             symbols.NewModuleBuilder("std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithoutSourceCode().Build(),
		"std::collections::list":                   symbols.NewModuleBuilder("std::collections::list", "<stdlib-path>/collections/list.c3").WithoutSourceCode().Build(),
		"std::collections::list_common":            symbols.NewModuleBuilder("std::collections::list_common", "<stdlib-path>/collections/list_common.c3").WithoutSourceCode().Build(),
		"std::collections::map":                    symbols.NewModuleBuilder("std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithoutSourceCode().Build(),
		"std::collections::maybe":                  symbols.NewModuleBuilder("std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithoutSourceCode().Build(),
		"std::collections::object":                 symbols.NewModuleBuilder("std::collections::object", "<stdlib-path>/collections/object.c3").WithoutSourceCode().Build(),
		"std::collections::priorityqueue":          symbols.NewModuleBuilder("std::collections::priorityqueue", "<stdlib-path>/collections/priorityqueue.c3").WithoutSourceCode().Build(),
		"std::collections::priorityqueue::private": symbols.NewModuleBuilder("std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithoutSourceCode().Build(),
		"std::collections::range":                  symbols.NewModuleBuilder("std::collections::range", "<stdlib-path>/collections/range.c3").WithoutSourceCode().Build(),
		"std::collections::ringbuffer":             symbols.NewModuleBuilder("std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithoutSourceCode().Build(),
		"std::collections::triple":                 symbols.NewModuleBuilder("std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithoutSourceCode().Build(),
		"std::collections::tuple":                  symbols.NewModuleBuilder("std::collections::tuple", "<stdlib-path>/collections/tuple.c3").WithoutSourceCode().Build(),
		"std::compression::qoi":                    symbols.NewModuleBuilder("std::compression::qoi", "<stdlib-path>/compression/qoi.c3").WithoutSourceCode().Build(),
		"std::core::array":                         symbols.NewModuleBuilder("std::core::array", "<stdlib-path>/core/array.c3").WithoutSourceCode().Build(),
		"std::core::array::slice":                  symbols.NewModuleBuilder("std::core::array::slice", "<stdlib-path>/core/array.c3").WithoutSourceCode().Build(),
		"std::core::bitorder":                      symbols.NewModuleBuilder("std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build(),
		"std::core::builtin":                       symbols.NewModuleBuilder("std::core::builtin", "<stdlib-path>/core/builtin.c3").WithoutSourceCode().Build(),
		"std::core::cinterop":                      symbols.NewModuleBuilder("std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithoutSourceCode().Build(),
		"std::core::cpudetect":                     symbols.NewModuleBuilder("std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithoutSourceCode().Build(),
		"std::core::dstring":                       symbols.NewModuleBuilder("std::core::dstring", "<stdlib-path>/core/dstring.c3").WithoutSourceCode().Build(),
		"std::core::env":                           symbols.NewModuleBuilder("std::core::env", "<stdlib-path>/core/env.c3").WithoutSourceCode().Build(),
		"std::core::main_stub":                     symbols.NewModuleBuilder("std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithoutSourceCode().Build(),
		"std::core::mem":                           symbols.NewModuleBuilder("std::core::mem", "<stdlib-path>/core/mem.c3").WithoutSourceCode().Build(),
		"std::core::mem::allocator":                symbols.NewModuleBuilder("std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithoutSourceCode().Build(),
		"std::core::runtime":                       symbols.NewModuleBuilder("std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build(),
		"std::core::sanitizer":                     symbols.NewModuleBuilder("std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithoutSourceCode().Build(),
		"std::core::sanitizer::asan":               symbols.NewModuleBuilder("std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build(),
		"std::core::string":                        symbols.NewModuleBuilder("std::core::string", "<stdlib-path>/core/string_to_real.c3").WithoutSourceCode().Build(),
		"std::core::string::conv":                  symbols.NewModuleBuilder("std::core::string::conv", "<stdlib-path>/core/conv.c3").WithoutSourceCode().Build(),
		"std::core::string::iterator":              symbols.NewModuleBuilder("std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithoutSourceCode().Build(),
		"std::core::types":                         symbols.NewModuleBuilder("std::core::types", "<stdlib-path>/core/types.c3").WithoutSourceCode().Build(),
		"std::core::values":                        symbols.NewModuleBuilder("std::core::values", "<stdlib-path>/core/values.c3").WithoutSourceCode().Build(),
		"std::crypto":                              symbols.NewModuleBuilder("std::crypto", "<stdlib-path>/crypto/crypto.c3").WithoutSourceCode().Build(),
		"std::crypto::dh":                          symbols.NewModuleBuilder("std::crypto::dh", "<stdlib-path>/crypto/dh.c3").WithoutSourceCode().Build(),
		"std::crypto::rc4":                         symbols.NewModuleBuilder("std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithoutSourceCode().Build(),
		"std::encoding":                            symbols.NewModuleBuilder("std::encoding", "<stdlib-path>/encoding/encoding.c3").WithoutSourceCode().Build(),
		"std::encoding::base32":                    symbols.NewModuleBuilder("std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithoutSourceCode().Build(),
		"std::encoding::base64":                    symbols.NewModuleBuilder("std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithoutSourceCode().Build(),
		"std::encoding::csv":                       symbols.NewModuleBuilder("std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithoutSourceCode().Build(),
		"std::encoding::hex":                       symbols.NewModuleBuilder("std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithoutSourceCode().Build(),
		"std::encoding::json":                      symbols.NewModuleBuilder("std::encoding::json", "<stdlib-path>/encoding/json.c3").WithoutSourceCode().Build(),
		"std::hash::adler32":                       symbols.NewModuleBuilder("std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithoutSourceCode().Build(),
		"std::hash::crc32":                         symbols.NewModuleBuilder("std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithoutSourceCode().Build(),
		"std::hash::crc64":                         symbols.NewModuleBuilder("std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithoutSourceCode().Build(),
		"std::hash::fnv32a":                        symbols.NewModuleBuilder("std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithoutSourceCode().Build(),
		"std::hash::fnv64a":                        symbols.NewModuleBuilder("std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithoutSourceCode().Build(),
		"std::hash::hmac":                          symbols.NewModuleBuilder("std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithoutSourceCode().Build(),
		"std::hash::sha1":                          symbols.NewModuleBuilder("std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithoutSourceCode().Build(),
		"std::hash::sha256":                        symbols.NewModuleBuilder("std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithoutSourceCode().Build(),
		"std::io":                                  symbols.NewModuleBuilder("std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build(),
		"std::io::file":                            symbols.NewModuleBuilder("std::io::file", "<stdlib-path>/io/file.c3").WithoutSourceCode().Build(),
		"std::io::os":                              symbols.NewModuleBuilder("std::io::os", "<stdlib-path>/io/os/mkdir.c3").WithoutSourceCode().Build(),
		"std::io::path":                            symbols.NewModuleBuilder("std::io::path", "<stdlib-path>/io/path.c3").WithoutSourceCode().Build(),
		"std::math":                                symbols.NewModuleBuilder("std::math", "<stdlib-path>/math/math_builtin.c3").WithoutSourceCode().Build(),
		"std::math::complex":                       symbols.NewModuleBuilder("std::math::complex", "<stdlib-path>/math/math_complex.c3").WithoutSourceCode().Build(),
		"std::math::easing":                        symbols.NewModuleBuilder("std::math::easing", "<stdlib-path>/math/math_easings.c3").WithoutSourceCode().Build(),
		"std::math::matrix":                        symbols.NewModuleBuilder("std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithoutSourceCode().Build(),
		"std::math::nolibc":                        symbols.NewModuleBuilder("std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").WithoutSourceCode().Build(),
		"std::math::quaternion":                    symbols.NewModuleBuilder("std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithoutSourceCode().Build(),
		"std::math::random":                        symbols.NewModuleBuilder("std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithoutSourceCode().Build(),
		"std::math::uuid":                          symbols.NewModuleBuilder("std::math::uuid", "<stdlib-path>/math/uuid.c3").WithoutSourceCode().Build(),
		"std::math::vector":                        symbols.NewModuleBuilder("std::math::vector", "<stdlib-path>/math/math_vector.c3").WithoutSourceCode().Build(),
		"std::net":                                 symbols.NewModuleBuilder("std::net", "<stdlib-path>/net/inetaddr.c3").WithoutSourceCode().Build(),
		"std::net::os":                             symbols.NewModuleBuilder("std::net::os", "<stdlib-path>/net/os/win32.c3").WithoutSourceCode().Build(),
		"std::net::tcp":                            symbols.NewModuleBuilder("std::net::tcp", "<stdlib-path>/net/tcp.c3").WithoutSourceCode().Build(),
		"std::net::udp":                            symbols.NewModuleBuilder("std::net::udp", "<stdlib-path>/net/udp.c3").WithoutSourceCode().Build(),
		"std::net::url":                            symbols.NewModuleBuilder("std::net::url", "<stdlib-path>/net/url.c3").WithoutSourceCode().Build(),
		"std::os":                                  symbols.NewModuleBuilder("std::os", "<stdlib-path>/os/cpu.c3").WithoutSourceCode().Build(),
		"std::os::backtrace":                       symbols.NewModuleBuilder("std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithoutSourceCode().Build(),
		"std::os::darwin":                          symbols.NewModuleBuilder("std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithoutSourceCode().Build(),
		"std::os::darwin::cocoa":                   symbols.NewModuleBuilder("std::os::darwin::cocoa", "<stdlib-path>/os/macos/cocoa.c3").WithoutSourceCode().Build(),
		"std::os::env":                             symbols.NewModuleBuilder("std::os::env", "<stdlib-path>/os/env.c3").WithoutSourceCode().Build(),
		"std::os::linux":                           symbols.NewModuleBuilder("std::os::linux", "<stdlib-path>/os/linux/heap.c3").WithoutSourceCode().Build(),
		"std::os::macos::cf":                       symbols.NewModuleBuilder("std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithoutSourceCode().Build(),
		"std::os::macos::objc":                     symbols.NewModuleBuilder("std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithoutSourceCode().Build(),
		"std::os::posix":                           symbols.NewModuleBuilder("std::os::posix", "<stdlib-path>/os/posix/general.c3").WithoutSourceCode().Build(),
		"std::os::process":                         symbols.NewModuleBuilder("std::os::process", "<stdlib-path>/os/subprocess.c3").WithoutSourceCode().Build(),
		"std::os::win32":                           symbols.NewModuleBuilder("std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithoutSourceCode().Build(),
		"std::os::win32::wsa":                      symbols.NewModuleBuilder("std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").WithoutSourceCode().Build(),
		"std::sort":                                symbols.NewModuleBuilder("std::sort", "<stdlib-path>/sort/quicksort.c3").WithoutSourceCode().Build(),
		"std::sort::cs":                            symbols.NewModuleBuilder("std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithoutSourceCode().Build(),
		"std::sort::is":                            symbols.NewModuleBuilder("std::sort::is", "<stdlib-path>/sort/insertionsort.c3").WithoutSourceCode().Build(),
		"std::sort::qs":                            symbols.NewModuleBuilder("std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithoutSourceCode().Build(),
		"std::thread":                              symbols.NewModuleBuilder("std::thread", "<stdlib-path>/threads/thread.c3").WithoutSourceCode().Build(),
		"std::thread::cpu":                         symbols.NewModuleBuilder("std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").WithoutSourceCode().Build(),
		"std::thread::os":                          symbols.NewModuleBuilder("std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithoutSourceCode().Build(),
		"std::thread::pool":                        symbols.NewModuleBuilder("std::thread::pool", "<stdlib-path>/threads/pool.c3").WithoutSourceCode().Build(),
		"std::thread::threadpool":                  symbols.NewModuleBuilder("std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithoutSourceCode().Build(),
		"std::time":                                symbols.NewModuleBuilder("std::time", "<stdlib-path>/time/time.c3").WithoutSourceCode().Build(),
		"std::time::clock":                         symbols.NewModuleBuilder("std::time::clock", "<stdlib-path>/time/clock.c3").WithoutSourceCode().Build(),
		"std::time::datetime":                      symbols.NewModuleBuilder("std::time::datetime", "<stdlib-path>/time/format.c3").WithoutSourceCode().Build(),
		"std::time::os":                            symbols.NewModuleBuilder("std::time::os", "<stdlib-path>/time/os/time_win32.c3").WithoutSourceCode().Build(),
	}
	parsedModules := symbolstable.NewParsedModules(&docId)
	for _, mod := range moduleCollection {
		parsedModules.RegisterModule(mod)
	}
	var module *symbols.Module

	// Define module std::ascii
	module = moduleCollection["std::ascii"]
	module.AddFunction(symbols.NewFunctionBuilder("in_range_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_lower_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_upper_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_digit_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bdigit_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_odigit_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_xdigit_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alpha_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_print_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_graph_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_space_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alnum_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_punct_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_blank_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_cntrl_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_lower_m", symbols.NewTypeBuilder("", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_upper_m", symbols.NewTypeBuilder("", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("in_range", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_lower", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_upper", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_digit", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bdigit", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_odigit", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_xdigit", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alpha", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_print", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_graph", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_space", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alnum", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_punct", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_blank", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_cntrl", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_lower", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_upper", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("in_range", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_lower", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_upper", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_digit", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bdigit", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_odigit", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_xdigit", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alpha", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_print", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_graph", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_space", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alnum", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_punct", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_blank", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_cntrl", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_lower", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_upper", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_hex", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("in_range", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_lower", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_upper", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_digit", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bdigit", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_odigit", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_xdigit", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alpha", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_print", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_graph", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_space", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alnum", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_punct", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_blank", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_cntrl", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_lower", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_upper", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build())

	// Define module std::atomic::types
	module = moduleCollection["std::atomic::types"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::atomic::types", "<stdlib-path>/atomic.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("Atomic", "std::atomic::types", "<stdlib-path>/atomic.c3").WithStructMember("data", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.load", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.store", symbols.NewBaseTypeBuilder("void", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.add", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.sub", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.mul", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.div", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.max", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.min", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.or", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("uint", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("xor", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithTypeIdentifier("Atomic").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("uint", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::core::mem").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.and", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("uint", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.shift_right", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", symbols.NewBaseTypeBuilder("uint", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.shift_left", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", symbols.NewBaseTypeBuilder("uint", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@atomic_exec", symbols.NewTypeBuilder("", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewTypeBuilder("", "").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("", "").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::atomic
	module = moduleCollection["std::atomic"]
	module.AddFunction(symbols.NewFunctionBuilder("fetch_add", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("bool", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewBaseTypeBuilder("usz", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_sub", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("bool", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewBaseTypeBuilder("usz", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_mul", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_div", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_or", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("bool", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewBaseTypeBuilder("usz", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_xor", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("bool", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewBaseTypeBuilder("usz", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_and", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("bool", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewBaseTypeBuilder("usz", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_shift_right", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_shift_left", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flag_set", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flag_clear", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_max", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("bool", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewBaseTypeBuilder("usz", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_min", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("bool", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewBaseTypeBuilder("usz", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::atomic
	module = moduleCollection["std::atomic"]
	module.AddFunction(symbols.NewFunctionBuilder("@__atomic_compare_exchange_ordering_failure", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("expected", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("desired", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("failure", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg5", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@__atomic_compare_exchange_ordering_success", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("expected", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("desired", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("success", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("failure", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg5", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__atomic_compare_exchange", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("any", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("expected", symbols.NewBaseTypeBuilder("any", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("desired", symbols.NewBaseTypeBuilder("any", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("success", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("failure", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithoutSourceCode().Build())

	// Define module std::bits
	module = moduleCollection["std::bits"]
	module.AddFunction(symbols.NewFunctionBuilder("reverse", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bswap", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].fshl", symbols.NewBaseTypeBuilder("uint[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("uint[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].fshr", symbols.NewBaseTypeBuilder("uint[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("uint[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].rotl", symbols.NewBaseTypeBuilder("uint[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].rotr", symbols.NewBaseTypeBuilder("uint[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].fshl", symbols.NewBaseTypeBuilder("int[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("int[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].fshr", symbols.NewBaseTypeBuilder("int[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("int[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].rotl", symbols.NewBaseTypeBuilder("int[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].rotr", symbols.NewBaseTypeBuilder("int[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].fshl", symbols.NewBaseTypeBuilder("ushort[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ushort[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ushort[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].fshr", symbols.NewBaseTypeBuilder("ushort[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ushort[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ushort[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].rotl", symbols.NewBaseTypeBuilder("ushort[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ushort[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].rotr", symbols.NewBaseTypeBuilder("ushort[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ushort[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].fshl", symbols.NewBaseTypeBuilder("short[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("short[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("short[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].fshr", symbols.NewBaseTypeBuilder("short[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("short[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("short[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].rotl", symbols.NewBaseTypeBuilder("short[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("short[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].rotr", symbols.NewBaseTypeBuilder("short[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("short[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].fshl", symbols.NewBaseTypeBuilder("char[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("char[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("char[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].fshr", symbols.NewBaseTypeBuilder("char[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("char[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("char[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].rotl", symbols.NewBaseTypeBuilder("char[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("char[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].rotr", symbols.NewBaseTypeBuilder("char[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("char[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].fshl", symbols.NewBaseTypeBuilder("ichar[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ichar[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ichar[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].fshr", symbols.NewBaseTypeBuilder("ichar[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ichar[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ichar[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].rotl", symbols.NewBaseTypeBuilder("ichar[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ichar[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].rotr", symbols.NewBaseTypeBuilder("ichar[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ichar[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].fshl", symbols.NewBaseTypeBuilder("ulong[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ulong[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ulong[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].fshr", symbols.NewBaseTypeBuilder("ulong[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ulong[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ulong[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].rotl", symbols.NewBaseTypeBuilder("ulong[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ulong[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].rotr", symbols.NewBaseTypeBuilder("ulong[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ulong[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].fshl", symbols.NewBaseTypeBuilder("long[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("long[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("long[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].fshr", symbols.NewBaseTypeBuilder("long[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("long[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("long[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].rotl", symbols.NewBaseTypeBuilder("long[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("long[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].rotr", symbols.NewBaseTypeBuilder("long[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("long[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].fshl", symbols.NewBaseTypeBuilder("uint128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("uint128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].fshr", symbols.NewBaseTypeBuilder("uint128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("uint128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].rotl", symbols.NewBaseTypeBuilder("uint128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].rotr", symbols.NewBaseTypeBuilder("uint128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].fshl", symbols.NewBaseTypeBuilder("int128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("int128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].fshr", symbols.NewBaseTypeBuilder("int128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("int128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].rotl", symbols.NewBaseTypeBuilder("int128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].rotr", symbols.NewBaseTypeBuilder("int128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int128[]", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.fshl", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.fshr", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.rotl", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.rotr", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.fshl", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.fshr", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.rotl", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.rotr", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.fshl", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.fshr", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.rotl", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.rotr", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.fshl", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.fshr", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.rotl", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.rotr", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.fshl", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.fshr", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.rotl", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.rotr", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.fshl", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.fshr", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.rotl", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.rotr", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.fshl", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.fshr", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.rotl", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.rotr", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.fshl", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.fshr", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.rotl", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.rotr", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.fshl", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.fshr", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.rotl", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.rotr", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.fshl", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.fshr", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.rotl", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.rotr", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::collections::anylist
	module = moduleCollection["std::collections::anylist"]
	module.AddStruct(symbols.NewStructBuilder("AnyList", "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithStructMember("capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithStructMember("entries", symbols.NewBaseTypeBuilder("any*", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("AnyPredicate", "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithResolvesTo("fn bool(any value)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("AnyTest", "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithResolvesTo("fn bool(any type, any context)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeBuilder("AnyList*", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("AnyList*", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeBuilder("AnyList*", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::collections::anylist").IsOptional().Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tstring", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList.push", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewTypeBuilder("", "").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_internal", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewBaseTypeBuilder("any", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_element", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewBaseTypeBuilder("any", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList.pop", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_pop", symbols.NewBaseTypeBuilder("any!", "std::collections::anylist").IsOptional().Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_pop", symbols.NewBaseTypeBuilder("any!", "std::collections::anylist").IsOptional().Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_pop", symbols.NewBaseTypeBuilder("any!", "std::collections::anylist").IsOptional().Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy_pop", symbols.NewBaseTypeBuilder("any!", "std::collections::anylist").IsOptional().Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop_retained", symbols.NewBaseTypeBuilder("any!", "std::collections::anylist").IsOptional().Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList.pop_first", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop_first_retained", symbols.NewBaseTypeBuilder("any!", "std::collections::anylist").IsOptional().Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_pop_first", symbols.NewBaseTypeBuilder("any!", "std::collections::anylist").IsOptional().Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_pop_first", symbols.NewBaseTypeBuilder("any!", "std::collections::anylist").IsOptional().Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy_pop_first", symbols.NewBaseTypeBuilder("any!", "std::collections::anylist").IsOptional().Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_pop_first", symbols.NewBaseTypeBuilder("any!", "std::collections::anylist").IsOptional().Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_at", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", symbols.NewTypeBuilder("AnyList*", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reverse", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("array_view", symbols.NewBaseTypeBuilder("any[]", "std::collections::anylist").IsUnsizedCollection().Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList.push_front", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("", "").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList.insert_at", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("", "").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_at_internal", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("any", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList.first", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("first_any", symbols.NewBaseTypeBuilder("any!", "std::collections::anylist").IsOptional().Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList.last", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("last_any", symbols.NewBaseTypeBuilder("any!", "std::collections::anylist").IsOptional().Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList.get", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_any", symbols.NewBaseTypeBuilder("any", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("swap", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("j", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_if", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("AnyPredicate", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_if", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("selection", symbols.NewTypeBuilder("AnyPredicate", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList._remove_if", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("AnyPredicate", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("bool", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_using_test", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("AnyTest", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewBaseTypeBuilder("any", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_using_test", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("AnyTest", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewBaseTypeBuilder("any", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList._remove_using_test", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("AnyTest", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("bool", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("ctx", symbols.NewTypeBuilder("", "").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reserve", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("min_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList.@item_at", symbols.NewBaseTypeBuilder("any", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList.set", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ensure_capacity", symbols.NewBaseTypeBuilder("void", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("added", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::bitset
	module = moduleCollection["std::collections::bitset"]
	module.AddVariable(symbols.NewVariableBuilder("BITS", symbols.NewTypeBuilder("", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).AddVariable(symbols.NewVariableBuilder("SZ", symbols.NewTypeBuilder("", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).AddStruct(symbols.NewStructBuilder("BitSet", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithStructMember("data", symbols.NewTypeBuilder("Type[]", "std::atomic::types").IsUnsizedCollection().Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Type", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::collections::bitset").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cardinality", symbols.NewBaseTypeBuilder("usz", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unset", symbols.NewBaseTypeBuilder("void", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewBaseTypeBuilder("bool", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_bool", symbols.NewBaseTypeBuilder("void", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("bool", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::growablebitset
	module = moduleCollection["std::collections::growablebitset"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("BITS", symbols.NewTypeBuilder("", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).AddStruct(symbols.NewStructBuilder("GrowableBitSet", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithStructMember("data", symbols.NewTypeBuilder("GrowableBitSetList", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("GrowableBitSetList", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithResolvesToType(symbols.NewTypeBuilder("List", "std::collections::list").WithGenericArguments(symbols.NewGenericTypeBuilder("Type", "std::collections::growablebitset").Build()).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeBuilder("GrowableBitSet*", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeBuilder("GrowableBitSet*", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cardinality", symbols.NewBaseTypeBuilder("usz", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unset", symbols.NewBaseTypeBuilder("void", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewBaseTypeBuilder("bool", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_bool", symbols.NewBaseTypeBuilder("void", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("bool", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::elastic_array
	module = moduleCollection["std::collections::elastic_array"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("ELEMENT_IS_EQUATABLE", symbols.NewTypeBuilder("", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).AddVariable(symbols.NewVariableBuilder("ELEMENT_IS_POINTER", symbols.NewTypeBuilder("", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).AddStruct(symbols.NewStructBuilder("ElasticArray", "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithStructMember("entries", symbols.NewGenericTypeBuilder("Type[]", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ElementPredicate", "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithResolvesTo("fn bool(Type *type)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ElementTest", "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithResolvesTo("fn bool(Type *type, any context)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("type_is_overaligned", symbols.NewTypeBuilder("", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tstring", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_try", symbols.NewBaseTypeBuilder("void!", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop", symbols.NewGenericTypeBuilder("Type!", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop_first", symbols.NewGenericTypeBuilder("Type!", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_at", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all_to_limit", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_array_to_limit", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("array", symbols.NewGenericTypeBuilder("Type[]", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_array", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("array", symbols.NewGenericTypeBuilder("Type[]", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_aligned_array", symbols.NewGenericTypeBuilder("Type[]", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_aligned_array", symbols.NewGenericTypeBuilder("Type[]", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ElasticArray.to_new_array", symbols.NewGenericTypeBuilder("Type[]", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ElasticArray.to_array", symbols.NewGenericTypeBuilder("Type[]", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tarray", symbols.NewGenericTypeBuilder("Type[]", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reverse", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("array_view", symbols.NewGenericTypeBuilder("Type[]", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_front", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_front_try", symbols.NewBaseTypeBuilder("void!", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_at_try", symbols.NewBaseTypeBuilder("void!", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_at", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_at", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last", symbols.NewBaseTypeBuilder("void!", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first", symbols.NewBaseTypeBuilder("void!", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("first", symbols.NewGenericTypeBuilder("Type!", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("last", symbols.NewGenericTypeBuilder("Type!", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("byte_size", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("swap", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("j", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_if", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("ElementPredicate", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_if", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("selection", symbols.NewTypeBuilder("ElementPredicate", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_using_test", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("ElementTest", "std::collections::list").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewBaseTypeBuilder("any", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_using_test", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("ElementTest", "std::collections::list").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewBaseTypeBuilder("any", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ElasticArray.@item_at", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ref", symbols.NewGenericTypeBuilder("Type*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_of", symbols.NewBaseTypeBuilder("usz!", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rindex_of", symbols.NewBaseTypeBuilder("usz!", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains", symbols.NewBaseTypeBuilder("bool", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last_item", symbols.NewBaseTypeBuilder("bool", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first_item", symbols.NewBaseTypeBuilder("bool", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_item", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_all_from", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compact_count", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compact", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::enummap
	module = moduleCollection["std::collections::enummap"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"Enum":      symbols.NewGenericParameter("Enum", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"ValueType": symbols.NewGenericParameter("ValueType", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddStruct(symbols.NewStructBuilder("EnumMap", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithStructMember("values", symbols.NewGenericTypeBuilder("ValueType[]", "std::collections::enummap").IsUnsizedCollection().Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumMap", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_value", symbols.NewGenericTypeBuilder("ValueType", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::collections::enummap").IsOptional().Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumMap", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumMap", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumMap", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tstring", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumMap", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumMap", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("ValueType", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumMap", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Enum", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ref", symbols.NewGenericTypeBuilder("ValueType*", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumMap", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Enum", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumMap", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Enum", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("ValueType", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::enumset
	module = moduleCollection["std::collections::enumset"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Enum": symbols.NewGenericParameter("Enum", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("IS_CHAR_ARRAY", symbols.NewTypeBuilder("", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).AddDef(symbols.NewDefBuilder("EnumSetType", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::collections::enumset").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("EnumSetType", "std::collections::enumset").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add", symbols.NewBaseTypeBuilder("void", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Enum", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewBaseTypeBuilder("bool", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Enum", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has", symbols.NewBaseTypeBuilder("bool", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Enum", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all", symbols.NewBaseTypeBuilder("void", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_all", symbols.NewBaseTypeBuilder("void", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_all", symbols.NewBaseTypeBuilder("void", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("and_of", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("or_of", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_of", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("xor_of", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::collections::enumset").IsOptional().Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tstring", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::enumset::private
	module = moduleCollection["std::collections::enumset::private"]
	module.AddFunction(symbols.NewFunctionBuilder("type_for_enum_elements", symbols.NewBaseTypeBuilder("typeid", "std::collections::enumset::private").Build(), "std::collections::enumset::private", "<stdlib-path>/collections/enumset.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("usz", "std::collections::enumset::private").Build(), "std::collections::enumset::private", "<stdlib-path>/collections/enumset.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::collections::map
	module = moduleCollection["std::collections::map"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"Key":   symbols.NewGenericParameter("Key", "std::collections::map", "<stdlib-path>/collections/hashmap.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Value": symbols.NewGenericParameter("Value", "std::collections::map", "<stdlib-path>/collections/hashmap.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddStruct(symbols.NewStructBuilder("HashMap", "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("table", symbols.NewTypeBuilder("Entry*[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("count", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("threshold", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("HashMapIterator", "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("map", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("top_index", symbols.NewBaseTypeBuilder("int", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("index", symbols.NewBaseTypeBuilder("int", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("current_entry", symbols.NewTypeBuilder("Entry*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("HashMapKeyIterator", "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("HashMapIterator", "std::collections::map").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("HashMapValueIterator", "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("HashMapIterator", "std::collections::map").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("HashMap.new_init_with_key_values", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init_from_keys_and_values", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("keys", symbols.NewGenericTypeBuilder("Key[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Value[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("HashMap.temp_init_with_key_values", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init_from_keys_and_values", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("keys", symbols.NewGenericTypeBuilder("Key[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Value[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_initialized", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init_from_map", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_map", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_from_map", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_map", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init_from_map", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_map", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ref", symbols.NewGenericTypeBuilder("Value*!", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_entry", symbols.NewTypeBuilder("Entry*!", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("HashMap.@get_or_set", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Value!", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_key", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewBaseTypeBuilder("void!", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy_keys", symbols.NewGenericTypeBuilder("Key[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("key_tlist", symbols.NewGenericTypeBuilder("Key[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("key_new_list", symbols.NewGenericTypeBuilder("Key[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_keys", symbols.NewGenericTypeBuilder("Key[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("HashMap.@each", symbols.NewTypeBuilder("", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(key, value)", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("HashMap.@each_entry", symbols.NewTypeBuilder("", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(entry)", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("value_tlist", symbols.NewGenericTypeBuilder("Value[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy_values", symbols.NewGenericTypeBuilder("Value[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("value_new_list", symbols.NewGenericTypeBuilder("Value[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_values", symbols.NewGenericTypeBuilder("Value[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_value", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("iter", symbols.NewTypeBuilder("HashMapIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("value_iter", symbols.NewTypeBuilder("HashMapValueIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("key_iter", symbols.NewTypeBuilder("HashMapKeyIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_entry", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("bucket_index", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transfer", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_table", symbols.NewTypeBuilder("Entry*[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("put_all_for_create", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_map", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("put_for_create", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_internal", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_entry_for_key", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create_entry", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("bucket_index", symbols.NewBaseTypeBuilder("int", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_entry", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("entry", symbols.NewTypeBuilder("Entry*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeBuilder("Entry", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMapIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMapIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("idx", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMapValueIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMapValueIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("idx", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMapKeyIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMapKeyIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("idx", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMapValueIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMapValueIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMapKeyIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMapKeyIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMapIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMapIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::linkedlist
	module = moduleCollection["std::collections::linkedlist"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("ELEMENT_IS_EQUATABLE", symbols.NewTypeBuilder("", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).AddStruct(symbols.NewStructBuilder("LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("_first", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("_last", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Node", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("next", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("prev", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("value", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedList.free_node", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("node", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedList.alloc_node", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_front", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("peek", symbols.NewGenericTypeBuilder("Type!", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("peek_last", symbols.NewGenericTypeBuilder("Type!", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("first", symbols.NewGenericTypeBuilder("Type!", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("last", symbols.NewGenericTypeBuilder("Type!", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedList.node_at_index", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_at", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_at", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("link_before", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("succ", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlink_first", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("t", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop", symbols.NewGenericTypeBuilder("Type!", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop_front", symbols.NewGenericTypeBuilder("Type!", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last", symbols.NewBaseTypeBuilder("void!", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first", symbols.NewBaseTypeBuilder("void!", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first_match", symbols.NewBaseTypeBuilder("bool", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("t", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last_match", symbols.NewBaseTypeBuilder("bool", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("t", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlink_last", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlink", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::list
	module = moduleCollection["std::collections::list"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::list", "<stdlib-path>/collections/list.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("ELEMENT_IS_EQUATABLE", symbols.NewTypeBuilder("", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).AddVariable(symbols.NewVariableBuilder("ELEMENT_IS_POINTER", symbols.NewTypeBuilder("", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).AddStruct(symbols.NewStructBuilder("List", "std::collections::list", "<stdlib-path>/collections/list.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithStructMember("capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithStructMember("entries", symbols.NewGenericTypeBuilder("Type*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ElementPredicate", "std::collections::list", "<stdlib-path>/collections/list.c3").WithResolvesTo("fn bool(Type *type)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ElementTest", "std::collections::list", "<stdlib-path>/collections/list.c3").WithResolvesTo("fn bool(Type *type, any context)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("type_is_overaligned", symbols.NewTypeBuilder("", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init_with_array", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Type[]", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init_with_array", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Type[]", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_wrapping_array", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("types", symbols.NewGenericTypeBuilder("Type[]", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tstring", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop", symbols.NewGenericTypeBuilder("Type!", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop_first", symbols.NewGenericTypeBuilder("Type!", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_at", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_aligned_array", symbols.NewGenericTypeBuilder("Type[]", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("List.to_new_array", symbols.NewGenericTypeBuilder("Type[]", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tarray", symbols.NewGenericTypeBuilder("Type[]", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reverse", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("array_view", symbols.NewGenericTypeBuilder("Type[]", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_array", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("array", symbols.NewGenericTypeBuilder("Type[]", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_front", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_at", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_at", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last", symbols.NewBaseTypeBuilder("void!", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first", symbols.NewBaseTypeBuilder("void!", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("first", symbols.NewGenericTypeBuilder("Type!", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("last", symbols.NewGenericTypeBuilder("Type!", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("byte_size", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("swap", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("j", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_if", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("ElementPredicate", "std::collections::elastic_array").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_if", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("selection", symbols.NewTypeBuilder("ElementPredicate", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_using_test", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("ElementTest", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewBaseTypeBuilder("any", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_using_test", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("ElementTest", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewBaseTypeBuilder("any", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ensure_capacity", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("min_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("List.@item_at", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ref", symbols.NewGenericTypeBuilder("Type*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reserve", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("added", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_update_size_change", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_size", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_size", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("List.pre_free", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("List.post_alloc", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_of", symbols.NewBaseTypeBuilder("usz!", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rindex_of", symbols.NewBaseTypeBuilder("usz!", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains", symbols.NewBaseTypeBuilder("bool", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last_item", symbols.NewBaseTypeBuilder("bool", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first_item", symbols.NewBaseTypeBuilder("bool", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_item", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_all_from", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compact_count", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compact", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last_match", symbols.NewBaseTypeBuilder("bool", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first_match", symbols.NewBaseTypeBuilder("bool", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_all_matches", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::list_common
	module = moduleCollection["std::collections::list_common"]
	module.AddFunction(symbols.NewFunctionBuilder("list_to_new_aligned_array", symbols.NewTypeBuilder("", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_to_new_array", symbols.NewTypeBuilder("", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_reverse", symbols.NewBaseTypeBuilder("void", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_remove_using_test", symbols.NewBaseTypeBuilder("usz", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("bool", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("ctx", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_compact", symbols.NewBaseTypeBuilder("usz", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_remove_item", symbols.NewBaseTypeBuilder("usz", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_remove_if", symbols.NewBaseTypeBuilder("usz", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("bool", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::collections::map
	module = moduleCollection["std::collections::map"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"Key":   symbols.NewGenericParameter("Key", "std::collections::map", "<stdlib-path>/collections/map.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Value": symbols.NewGenericParameter("Value", "std::collections::map", "<stdlib-path>/collections/map.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddVariable(symbols.NewVariableBuilder("COPY_KEYS", symbols.NewTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).AddVariable(symbols.NewVariableBuilder("DEFAULT_INITIAL_CAPACITY", symbols.NewTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).AddVariable(symbols.NewVariableBuilder("DEFAULT_LOAD_FACTOR", symbols.NewTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAXIMUM_CAPACITY", symbols.NewTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).AddVariable(symbols.NewVariableBuilder("VALUE_IS_EQUATABLE", symbols.NewTypeBuilder("", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).AddStruct(symbols.NewStructBuilder("Entry", "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("next", symbols.NewTypeBuilder("Entry*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("MapImpl", "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("table", symbols.NewTypeBuilder("Entry*[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("count", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("threshold", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithStructMember("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Map", "std::collections::map", "<stdlib-path>/collections/map.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::collections::map").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init_with_key_values", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init_from_keys_and_values", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("keys", symbols.NewGenericTypeBuilder("Key[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Value[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_new_with_key_values", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init_from_keys_and_values", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("keys", symbols.NewGenericTypeBuilder("Key[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Value[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_from_map", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("other_map", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_from_map", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("other_map", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("Map").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("Map").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ref", symbols.NewGenericTypeBuilder("Value*!", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("Map").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_entry", symbols.NewTypeBuilder("Entry*!", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("Map").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Map.@get_or_set", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Value!", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("Map").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_key", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("Map").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Map.set_value_return", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("Map").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewBaseTypeBuilder("void!", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("Map").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("Map").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("Map").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_keys_list", symbols.NewGenericTypeBuilder("Key[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("Map").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_keys_list", symbols.NewGenericTypeBuilder("Key[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("Map").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Map.@each", symbols.NewTypeBuilder("", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(key, value)", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Map.@each_entry", symbols.NewTypeBuilder("", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(entry)", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_values_list", symbols.NewGenericTypeBuilder("Value[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("Map").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_values_list", symbols.NewGenericTypeBuilder("Value[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("Map").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_value", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("Map").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Map", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_add_entry", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("MapImpl").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("bucket_index", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_resize", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("MapImpl").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rehash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_for", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_transfer", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("MapImpl").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_table", symbols.NewTypeBuilder("Entry*[]", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_init", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithArgument(symbols.NewVariableBuilder("impl", symbols.NewTypeBuilder("MapImpl*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_put_for_create", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("MapImpl").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_free_internal", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("MapImpl").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_remove_entry_for_key", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("MapImpl").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_create_entry", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("MapImpl").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("bucket_index", symbols.NewBaseTypeBuilder("int", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_free_entry", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").WithTypeIdentifier("MapImpl").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MapImpl", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithArgument(symbols.NewVariableBuilder("entry", symbols.NewTypeBuilder("Entry*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/map.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::maybe
	module = moduleCollection["std::collections::maybe"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::maybe", "<stdlib-path>/collections/maybe.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("EMPTY", symbols.NewTypeBuilder("Maybe", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).AddStruct(symbols.NewStructBuilder("Maybe", "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithStructMember("value", symbols.NewGenericTypeBuilder("Type", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithStructMember("has_value", symbols.NewBaseTypeBuilder("bool", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::collections::maybe").IsOptional().Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithTypeIdentifier("Maybe").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Maybe", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithTypeIdentifier("Maybe").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Maybe", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).WithArgument(symbols.NewVariableBuilder("val", symbols.NewGenericTypeBuilder("Type", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewBaseTypeBuilder("void", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithTypeIdentifier("Maybe").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Maybe", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("value", symbols.NewTypeBuilder("Maybe", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithArgument(symbols.NewVariableBuilder("val", symbols.NewGenericTypeBuilder("Type", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("with_value", symbols.NewTypeBuilder("Maybe", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithTypeIdentifier("Maybe").WithArgument(symbols.NewVariableBuilder("val", symbols.NewGenericTypeBuilder("Type", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("empty", symbols.NewTypeBuilder("Maybe", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithTypeIdentifier("Maybe").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Maybe.get", symbols.NewGenericTypeBuilder("Type!", "std::collections::maybe").IsOptional().Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Maybe", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::collections::object
	module = moduleCollection["std::collections::object"]
	module.AddVariable(symbols.NewVariableBuilder("FALSE_OBJECT", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).AddVariable(symbols.NewVariableBuilder("NULL_OBJECT", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).AddVariable(symbols.NewVariableBuilder("TRUE_OBJECT", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).AddStruct(symbols.NewStructBuilder("Object", "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("type", symbols.NewBaseTypeBuilder("typeid", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("i", symbols.NewBaseTypeBuilder("uint128", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("f", symbols.NewBaseTypeBuilder("double", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("b", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("other", symbols.NewBaseTypeBuilder("void*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("array", symbols.NewTypeBuilder("ObjectInternalList", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("map", symbols.NewTypeBuilder("ObjectInternalMap", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ObjectInternalList", "std::collections::object", "<stdlib-path>/collections/object.c3").WithResolvesToType(symbols.NewTypeBuilder("List", "std::collections::list").WithGenericArguments(symbols.NewTypeBuilder("Object*", "std::collections::object").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ObjectInternalMap", "std::collections::object", "<stdlib-path>/collections/object.c3").WithResolvesToType(symbols.NewTypeBuilder("HashMap", "std::collections::map").WithGenericArguments(symbols.NewTypeBuilder("String", "std::collections::object").Build(), symbols.NewTypeBuilder("Object*", "std::collections::object").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ObjectInternalMapEntry", "std::collections::object", "<stdlib-path>/collections/object.c3").WithResolvesToType(symbols.NewTypeBuilder("Entry", "std::collections::map").WithGenericArguments(symbols.NewTypeBuilder("String", "std::collections::object").Build(), symbols.NewTypeBuilder("Object*", "std::collections::object").Build()).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_obj", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_null", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_int", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("int128", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_enum", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("e", symbols.NewTypeBuilder("", "").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_float", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("f", symbols.NewBaseTypeBuilder("double", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_string", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_bool", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_null", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_map", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_array", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bool", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_string", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_float", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_int", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_keyable", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_indexable", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_map_if_needed", symbols.NewBaseTypeBuilder("void", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_array_if_needed", symbols.NewBaseTypeBuilder("void", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_object", symbols.NewBaseTypeBuilder("void", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_object", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.object_from_value", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.set", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.set_at", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.push", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeBuilder("Object*!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_key", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_at", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_len", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_object", symbols.NewBaseTypeBuilder("void", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("to_append", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_object_at", symbols.NewBaseTypeBuilder("void", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("to_set", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_integer_value", symbols.NewTypeBuilder("", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.get_integer_at", symbols.NewTypeBuilder("", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.get_integer", symbols.NewTypeBuilder("", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ichar", symbols.NewBaseTypeBuilder("ichar!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_short", symbols.NewBaseTypeBuilder("short!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_int", symbols.NewBaseTypeBuilder("int!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_long", symbols.NewBaseTypeBuilder("long!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_int128", symbols.NewBaseTypeBuilder("int128!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ichar_at", symbols.NewBaseTypeBuilder("ichar!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_short_at", symbols.NewBaseTypeBuilder("short!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_int_at", symbols.NewBaseTypeBuilder("int!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_long_at", symbols.NewBaseTypeBuilder("long!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_int128_at", symbols.NewBaseTypeBuilder("int128!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_char", symbols.NewBaseTypeBuilder("char!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ushort", symbols.NewBaseTypeBuilder("short!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_uint", symbols.NewBaseTypeBuilder("uint!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ulong", symbols.NewBaseTypeBuilder("ulong!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_uint128", symbols.NewBaseTypeBuilder("uint128!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_char_at", symbols.NewBaseTypeBuilder("char!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ushort_at", symbols.NewBaseTypeBuilder("ushort!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_uint_at", symbols.NewBaseTypeBuilder("uint!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ulong_at", symbols.NewBaseTypeBuilder("ulong!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_uint128_at", symbols.NewBaseTypeBuilder("uint128!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_string", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_string_at", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.get_enum", symbols.NewTypeBuilder("String!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.get_enum_at", symbols.NewTypeBuilder("String!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_bool", symbols.NewBaseTypeBuilder("bool!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_bool_at", symbols.NewBaseTypeBuilder("bool!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_float", symbols.NewBaseTypeBuilder("double!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_float_at", symbols.NewBaseTypeBuilder("double!", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_or_create_obj", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::priorityqueue
	module = moduleCollection["std::collections::priorityqueue"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::priorityqueue", "<stdlib-path>/collections/priorityqueue.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddDistinct(symbols.NewDistinctBuilder("PriorityQueue", "std::collections::priorityqueue", "<stdlib-path>/collections/priorityqueue.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private").WithGenericArguments(symbols.NewGenericTypeBuilder("Type", "std::collections::priorityqueue").Build()).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("PriorityQueueMax", "std::collections::priorityqueue", "<stdlib-path>/collections/priorityqueue.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private").WithGenericArguments(symbols.NewGenericTypeBuilder("Type", "std::collections::priorityqueue").Build()).Build()).WithoutSourceCode().Build())

	// Define module std::collections::priorityqueue::private
	module = moduleCollection["std::collections::priorityqueue::private"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithStructMember("heap", symbols.NewTypeBuilder("Heap", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Heap", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithResolvesToType(symbols.NewTypeBuilder("List", "std::collections::list").WithGenericArguments(symbols.NewGenericTypeBuilder("Type", "std::collections::priorityqueue::private").Build()).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewBaseTypeBuilder("void", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewBaseTypeBuilder("void", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewGenericTypeBuilder("Type", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_at", symbols.NewBaseTypeBuilder("void", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop", symbols.NewGenericTypeBuilder("Type!", "std::collections::priorityqueue::private").IsOptional().Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("first", symbols.NewGenericTypeBuilder("Type!", "std::collections::priorityqueue::private").IsOptional().Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Type", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::collections::priorityqueue::private").IsOptional().Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::range
	module = moduleCollection["std::collections::range"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::range", "<stdlib-path>/collections/range.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("ExclusiveRange", "std::collections::range", "<stdlib-path>/collections/range.c3").WithStructMember("start", symbols.NewGenericTypeBuilder("Type", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithStructMember("end", symbols.NewGenericTypeBuilder("Type", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Range", "std::collections::range", "<stdlib-path>/collections/range.c3").WithStructMember("start", symbols.NewGenericTypeBuilder("Type", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithStructMember("end", symbols.NewGenericTypeBuilder("Type", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Range", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains", symbols.NewBaseTypeBuilder("bool", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Range", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Type", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Range", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Range", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Range", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tstring", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Range", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::collections::range").IsOptional().Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Range", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ExclusiveRange", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains", symbols.NewBaseTypeBuilder("bool", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ExclusiveRange", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::collections::range").IsOptional().Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ExclusiveRange", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ExclusiveRange", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ExclusiveRange", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tstring", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ExclusiveRange", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Type", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ExclusiveRange", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::ringbuffer
	module = moduleCollection["std::collections::ringbuffer"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("RingBuffer", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithStructMember("buf", symbols.NewGenericTypeBuilder("Type[]", "std::collections::ringbuffer").IsUnsizedCollection().Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithStructMember("written", symbols.NewBaseTypeBuilder("usz", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithStructMember("head", symbols.NewBaseTypeBuilder("usz", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("RingBuffer", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("RingBuffer", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewGenericTypeBuilder("Type", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Type", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("RingBuffer", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop", symbols.NewGenericTypeBuilder("Type!", "std::collections::ringbuffer").IsOptional().Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("RingBuffer", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("RingBuffer", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewGenericTypeBuilder("Type[]", "std::collections::ringbuffer").IsUnsizedCollection().Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("void", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("RingBuffer", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewGenericTypeBuilder("Type[]", "std::collections::ringbuffer").IsUnsizedCollection().Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::tuple
	module = moduleCollection["std::collections::tuple"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"Type1": symbols.NewGenericParameter("Type1", "std::collections::tuple", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type2": symbols.NewGenericParameter("Type2", "std::collections::tuple", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddStruct(symbols.NewStructBuilder("Tuple", "std::collections::tuple", "<stdlib-path>/collections/tuple.c3").WithStructMember("first", symbols.NewGenericTypeBuilder("Type1", "std::collections::tuple").Build(), "std::collections::tuple", "<stdlib-path>/collections/tuple.c3").WithStructMember("second", symbols.NewGenericTypeBuilder("Type2", "std::collections::tuple").Build(), "std::collections::tuple", "<stdlib-path>/collections/tuple.c3").WithoutSourceCode().Build())

	// Define module std::collections::triple
	module = moduleCollection["std::collections::triple"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"Type1": symbols.NewGenericParameter("Type1", "std::collections::triple", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type2": symbols.NewGenericParameter("Type2", "std::collections::triple", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type3": symbols.NewGenericParameter("Type3", "std::collections::triple", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddStruct(symbols.NewStructBuilder("Triple", "std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithStructMember("first", symbols.NewGenericTypeBuilder("Type1", "std::collections::triple").Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithStructMember("second", symbols.NewGenericTypeBuilder("Type2", "std::collections::triple").Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithStructMember("third", symbols.NewGenericTypeBuilder("Type3", "std::collections::triple").Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithoutSourceCode().Build())

	// Define module std::compression::qoi
	module = moduleCollection["std::compression::qoi"]
	module.AddVariable(symbols.NewVariableBuilder("PIXELS_MAX", symbols.NewTypeBuilder("uint", "std::compression::qoi").Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").Build()).AddStruct(symbols.NewStructBuilder("QOIDesc", "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").WithStructMember("width", symbols.NewBaseTypeBuilder("uint", "std::compression::qoi").Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").WithStructMember("height", symbols.NewBaseTypeBuilder("uint", "std::compression::qoi").Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").WithStructMember("channels", symbols.NewTypeBuilder("QOIChannels", "std::compression::qoi").Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").WithStructMember("colorspace", symbols.NewTypeBuilder("QOIColorspace", "std::compression::qoi").Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("QOIChannels", "char", "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").WithEnumerator(symbols.NewEnumeratorBuilder("AUTO", "<stdlib-path>/compression/qoi.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("id", symbols.NewTypeBuilder("char", "std::compression::qoi").Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").Build()}).WithEnumName("QOIChannels").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RGB", "<stdlib-path>/compression/qoi.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("id", symbols.NewTypeBuilder("char", "std::compression::qoi").Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").Build()}).WithEnumName("QOIChannels").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RGBA", "<stdlib-path>/compression/qoi.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("id", symbols.NewTypeBuilder("char", "std::compression::qoi").Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").Build()}).WithEnumName("QOIChannels").Build()).Build()).AddEnum(symbols.NewEnumBuilder("QOIColorspace", "char", "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").WithEnumerator(symbols.NewEnumeratorBuilder("SRGB", "<stdlib-path>/compression/qoi.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("id", symbols.NewTypeBuilder("char", "std::compression::qoi").Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").Build()}).WithEnumName("QOIColorspace").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LINEAR", "<stdlib-path>/compression/qoi.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("id", symbols.NewTypeBuilder("char", "std::compression::qoi").Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").Build()}).WithEnumName("QOIColorspace").Build()).Build()).AddFault(symbols.NewFaultBuilder("QOIError", "", "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").WithConstant(symbols.NewFaultConstantBuilder("INVALID_PARAMETERS", "std::compression::qoi", "../../../assets/c3c/lib/std/compression/qoi.c3").WithFaultName("QOIError").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_OPEN_FAILED", "std::compression::qoi", "../../../assets/c3c/lib/std/compression/qoi.c3").WithFaultName("QOIError").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_WRITE_FAILED", "std::compression::qoi", "../../../assets/c3c/lib/std/compression/qoi.c3").WithFaultName("QOIError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_DATA", "std::compression::qoi", "../../../assets/c3c/lib/std/compression/qoi.c3").WithFaultName("QOIError").Build()).WithConstant(symbols.NewFaultConstantBuilder("TOO_MANY_PIXELS", "std::compression::qoi", "../../../assets/c3c/lib/std/compression/qoi.c3").WithFaultName("QOIError").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("usz!", "std::compression::qoi").IsOptional().Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::compression::qoi").IsUnsizedCollection().Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").Build()).WithArgument(symbols.NewVariableBuilder("desc", symbols.NewTypeBuilder("QOIDesc*", "std::compression::qoi").Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("char[]!", "std::compression::qoi").IsOptional().IsUnsizedCollection().Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").Build()).WithArgument(symbols.NewVariableBuilder("desc", symbols.NewTypeBuilder("QOIDesc*", "std::compression::qoi").Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").Build()).WithArgument(symbols.NewVariableBuilder("channels", symbols.NewTypeBuilder("QOIChannels", "std::compression::qoi").Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::compression::qoi", "<stdlib-path>/compression/qoi.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddStruct(symbols.NewStructBuilder("ArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char[]", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithStructMember("used", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("ArenaAllocatorHeader", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char[]", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("ArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ArenaAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ArenaAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ArenaAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mark", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ArenaAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ArenaAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("mark", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ArenaAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ArenaAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddStruct(symbols.NewStructBuilder("DynamicArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("backing_allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("page", symbols.NewTypeBuilder("DynamicArenaPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("unused_page", symbols.NewTypeBuilder("DynamicArenaPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("page_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("DynamicArenaChunk", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("DynamicArenaPage", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("memory", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("prev_arena", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("total", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("used", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("current_stack_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DynamicArenaAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("page_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DynamicArenaAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DynamicArenaAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DynamicArenaAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DynamicArenaAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("mark", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_alloc_new", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DynamicArenaAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DynamicArenaAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddStruct(symbols.NewStructBuilder("Header", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithStructMember("next", symbols.NewTypeBuilder("Header*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithStructMember("align", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("SimpleHeapAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithStructMember("alloc_fn", symbols.NewTypeBuilder("MemoryAllocFn", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithStructMember("free_list", symbols.NewTypeBuilder("Header*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("MemoryAllocFn", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_realloc", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_calloc", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_alloc", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_block", symbols.NewBaseTypeBuilder("void!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned_bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_free", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddVariable(symbols.NewVariableBuilder("LIBC_ALLOCATOR", symbols.NewTypeBuilder("LibcAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("LibcAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uptr", "std::core::mem::allocator").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddStruct(symbols.NewStructBuilder("OnStackAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("backing_allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char[]", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("used", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("chunk", symbols.NewTypeBuilder("OnStackAllocatorExtraChunk*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("OnStackAllocatorExtraChunk", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("is_aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("prev", symbols.NewTypeBuilder("OnStackAllocatorExtraChunk*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("OnStackAllocatorHeader", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char[]", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithTypeIdentifier("OnStackAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("OnStackAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithTypeIdentifier("OnStackAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("OnStackAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithTypeIdentifier("OnStackAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("OnStackAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocation_in_stack_mem", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("OnStackAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("on_stack_allocator_remove_chunk", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("OnStackAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("on_stack_allocator_find_chunk", symbols.NewTypeBuilder("OnStackAllocatorExtraChunk*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("OnStackAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithTypeIdentifier("OnStackAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("OnStackAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithTypeIdentifier("OnStackAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("OnStackAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddVariable(symbols.NewVariableBuilder("PAGE_IS_ALIGNED", symbols.NewTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).AddStruct(symbols.NewStructBuilder("TempAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("backing_allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("last_page", symbols.NewTypeBuilder("TempAllocatorPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("used", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char[]", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TempAllocatorChunk", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char[]", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TempAllocatorPage", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("prev_page", symbols.NewTypeBuilder("TempAllocatorPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("start", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("mark", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("ident", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char[]", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TempAllocatorPage.pagesize", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocatorPage", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TempAllocatorPage.is_aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocatorPage", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_temp_allocator", symbols.NewTypeBuilder("TempAllocator*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mark", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("mark", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_free_page", symbols.NewBaseTypeBuilder("void!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("page", symbols.NewTypeBuilder("TempAllocatorPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_realloc_page", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("page", symbols.NewTypeBuilder("TempAllocatorPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print_pages", symbols.NewBaseTypeBuilder("void!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddVariable(symbols.NewVariableBuilder("MAX_BACKTRACE", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).AddStruct(symbols.NewStructBuilder("Allocation", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("backtrace", symbols.NewBaseTypeBuilder("void*[]", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TrackingAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("inner_allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("map", symbols.NewTypeBuilder("AllocMap", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("mem_total", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("allocs_total", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("AllocMap", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithResolvesToType(symbols.NewTypeBuilder("HashMap", "std::collections::map").WithGenericArguments(symbols.NewBaseTypeBuilder("uptr", "std::core::mem::allocator").Build(), symbols.NewTypeBuilder("Allocation", "std::core::mem::allocator").Build()).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocated", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("total_allocated", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("total_allocation_count", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocations_tlist", symbols.NewTypeBuilder("Allocation[]", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocation_count", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("is_aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print_report", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprint_report", symbols.NewBaseTypeBuilder("void!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("out", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::array
	module = moduleCollection["std::core::array"]
	module.AddFunction(symbols.NewFunctionBuilder("index_of", symbols.NewTypeBuilder("", "std::core::array").Build(), "std::core::array", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("array", symbols.NewTypeBuilder("", "").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewTypeBuilder("", "").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("slice2d", symbols.NewTypeBuilder("", "std::core::array").Build(), "std::core::array", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("array_ptr", symbols.NewTypeBuilder("", "").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("xlen", symbols.NewTypeBuilder("", "").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("ylen", symbols.NewTypeBuilder("", "").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rindex_of", symbols.NewTypeBuilder("", "std::core::array").Build(), "std::core::array", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("array", symbols.NewTypeBuilder("", "").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewTypeBuilder("", "").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("concat", symbols.NewTypeBuilder("", "std::core::array").Build(), "std::core::array", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("arr1", symbols.NewTypeBuilder("", "").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("arr2", symbols.NewTypeBuilder("", "").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::array").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("concat_new", symbols.NewTypeBuilder("", "std::core::array").Build(), "std::core::array", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("arr1", symbols.NewTypeBuilder("", "").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("arr2", symbols.NewTypeBuilder("", "").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::array").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tconcat", symbols.NewTypeBuilder("", "std::core::array").Build(), "std::core::array", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("arr1", symbols.NewTypeBuilder("", "").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("arr2", symbols.NewTypeBuilder("", "").Build(), "std::core::array", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::array::slice
	module = moduleCollection["std::core::array::slice"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::core::array::slice", "<stdlib-path>/core/array.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("Slice2d", "std::core::array::slice", "<stdlib-path>/core/array.c3").WithStructMember("ptr", symbols.NewGenericTypeBuilder("Type*", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithStructMember("inner_len", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithStructMember("ystart", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithStructMember("ylen", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithStructMember("xstart", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithStructMember("xlen", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithTypeIdentifier("Slice2d").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("count", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithTypeIdentifier("Slice2d").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.@each", symbols.NewBaseTypeBuilder("void", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(usz[<2>], Type)", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.@each_ref", symbols.NewBaseTypeBuilder("void", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(usz[<2>], Type*)", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.get_row", symbols.NewGenericTypeBuilder("Type[]", "std::core::array::slice").IsUnsizedCollection().Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("idy", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.get_coord", symbols.NewGenericTypeBuilder("Type", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("coord", symbols.NewBaseTypeBuilder("usz[2]", "std::core::array::slice").IsCollectionWithSize(2).Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.get_xy", symbols.NewGenericTypeBuilder("Type", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.get_xy_ref", symbols.NewGenericTypeBuilder("Type*", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.get_coord_ref", symbols.NewGenericTypeBuilder("Type*", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("coord", symbols.NewBaseTypeBuilder("usz[2]", "std::core::array::slice").IsCollectionWithSize(2).Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.set_coord", symbols.NewBaseTypeBuilder("void", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("coord", symbols.NewBaseTypeBuilder("usz[2]", "std::core::array::slice").IsCollectionWithSize(2).Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.set_xy", symbols.NewBaseTypeBuilder("void", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("slice", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").WithTypeIdentifier("Slice2d").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("isz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("xlen", symbols.NewBaseTypeBuilder("isz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("isz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithArgument(symbols.NewVariableBuilder("ylen", symbols.NewBaseTypeBuilder("isz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/array.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::bitorder
	module = moduleCollection["std::core::bitorder"]
	module.AddBitstruct(symbols.NewBitstructBuilder("Int128BE", symbols.NewBaseTypeBuilder("int128", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("int128", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("Int128LE", symbols.NewBaseTypeBuilder("int128", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("int128", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("IntBE", symbols.NewBaseTypeBuilder("int", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("int", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("IntLE", symbols.NewBaseTypeBuilder("int", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("int", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("LongBE", symbols.NewBaseTypeBuilder("long", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("long", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("LongLE", symbols.NewBaseTypeBuilder("long", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("long", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("ShortBE", symbols.NewBaseTypeBuilder("short", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("short", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("ShortLE", symbols.NewBaseTypeBuilder("short", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("short", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UInt128BE", symbols.NewBaseTypeBuilder("uint128", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("uint128", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UInt128LE", symbols.NewBaseTypeBuilder("uint128", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("uint128", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UIntBE", symbols.NewBaseTypeBuilder("int", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("uint", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UIntLE", symbols.NewBaseTypeBuilder("int", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("uint", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("ULongBE", symbols.NewBaseTypeBuilder("ulong", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("ulong", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("ULongLE", symbols.NewBaseTypeBuilder("ulong", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("ulong", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UShortBE", symbols.NewBaseTypeBuilder("ushort", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("ushort", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UShortLE", symbols.NewBaseTypeBuilder("ushort", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("ushort", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewTypeBuilder("", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewTypeBuilder("", "").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewTypeBuilder("", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewTypeBuilder("", "").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bitorder", symbols.NewTypeBuilder("", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_array_or_slice_of_char", symbols.NewBaseTypeBuilder("bool", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewTypeBuilder("", "").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_arrayptr_or_slice_of_char", symbols.NewBaseTypeBuilder("bool", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewTypeBuilder("", "").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::builtin
	module = moduleCollection["std::core::builtin"]
	module.AddVariable(symbols.NewVariableBuilder("EMPTY_MACRO_SLOT", symbols.NewTypeBuilder("EmptySlot", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAX_FRAMEADDRESS", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).AddVariable(symbols.NewVariableBuilder("in_panic", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).AddVariable(symbols.NewVariableBuilder("old_bus_error", symbols.NewTypeBuilder("SignalFunction", "libc").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).AddVariable(symbols.NewVariableBuilder("old_segmentation_fault", symbols.NewTypeBuilder("SignalFunction", "libc").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).AddVariable(symbols.NewVariableBuilder("panic", symbols.NewTypeBuilder("PanicFn", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).AddDef(symbols.NewDefBuilder("PanicFn", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithResolvesTo("fn void(String message, String file, String function, uint line)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("VoidFn", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithResolvesTo("fn void()").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("EmptySlot", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::core::builtin").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("PrefetchLocality", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NO_LOCALITY", "<stdlib-path>/core/builtin.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PrefetchLocality").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FAR", "<stdlib-path>/core/builtin.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PrefetchLocality").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NEAR", "<stdlib-path>/core/builtin.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PrefetchLocality").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VERY_NEAR", "<stdlib-path>/core/builtin.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PrefetchLocality").Build()).Build()).AddFault(symbols.NewFaultBuilder("CastResult", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithConstant(symbols.NewFaultConstantBuilder("TYPE_MISMATCH", "std::core::builtin", "../../../assets/c3c/lib/std/core/builtin.c3").WithFaultName("CastResult").Build()).Build()).AddFault(symbols.NewFaultBuilder("IteratorResult", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithConstant(symbols.NewFaultConstantBuilder("NO_MORE_ELEMENT", "std::core::builtin", "../../../assets/c3c/lib/std/core/builtin.c3").WithFaultName("IteratorResult").Build()).Build()).AddFault(symbols.NewFaultBuilder("SearchResult", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithConstant(symbols.NewFaultConstantBuilder("MISSING", "std::core::builtin", "../../../assets/c3c/lib/std/core/builtin.c3").WithFaultName("SearchResult").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("@scope", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void()", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@swap", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("anycast", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewBaseTypeBuilder("any", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print_backtrace", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("message", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("backtraces_to_ignore", symbols.NewBaseTypeBuilder("int", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("default_panic", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("message", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("abort", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("default_panic", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("message", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("panicf", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unreachable", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unsupported", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("breakpoint", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("any_make", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewBaseTypeBuilder("typeid", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("any.retype_to", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("any", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewBaseTypeBuilder("typeid", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("any.as_inner", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("any", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bitcast", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("expr", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("enum_by_name", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("enum_name", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@enum_from_value", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@likely", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@unlikely", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@expect", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("expected", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@prefetch", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("PrefetchLocality", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("swizzle", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("swizzle2", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@catch", symbols.NewBaseTypeBuilder("anyfault", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@ok", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@as_char_view", symbols.NewBaseTypeBuilder("char[]", "std::core::builtin").IsUnsizedCollection().Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@str_find", symbols.NewBaseTypeBuilder("isz", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@str_upper", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@str_lower", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@str_hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@generic_hash_core", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("h", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@generic_hash", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("int", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("short", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("ushort", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("ichar", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("long", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("ulong", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("int128", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("uint128", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("typeid.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("typeid", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("String.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char[]", "std::core::builtin").IsUnsizedCollection().Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("void*.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_empty_macro_slot", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_valid_macro_slot", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_frameaddress", symbols.NewBaseTypeBuilder("void*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("int", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_returnaddress", symbols.NewBaseTypeBuilder("void*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("int", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sig_panic", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("message", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sig_bus_error", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sig_segmentation_fault", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("install_signal_handler", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("signal", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("SignalFunction", "libc").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("install_signal_handlers", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithoutSourceCode().Build())

	// Define module std::core::builtin
	module = moduleCollection["std::core::builtin"]
	module.AddFunction(symbols.NewFunctionBuilder("less", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("less_eq", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("greater", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compare_to", symbols.NewBaseTypeBuilder("int", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("greater_eq", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("min", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("max", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::cinterop
	module = moduleCollection["std::core::cinterop"]
	module.AddVariable(symbols.NewVariableBuilder("C_INT_SIZE", symbols.NewTypeBuilder("", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).AddVariable(symbols.NewVariableBuilder("C_LONG_LONG_SIZE", symbols.NewTypeBuilder("", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).AddVariable(symbols.NewVariableBuilder("C_LONG_SIZE", symbols.NewTypeBuilder("", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).AddVariable(symbols.NewVariableBuilder("C_SHORT_SIZE", symbols.NewTypeBuilder("", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).AddDef(symbols.NewDefBuilder("CChar", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CInt", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CLong", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CLongLong", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CSChar", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ichar", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CShort", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CUChar", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("char", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CUInt", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CULong", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CULongLong", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CUShort", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("CBool", "char", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithEnumerator(symbols.NewEnumeratorBuilder("FALSE", "<stdlib-path>/core/cinterop.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CBool").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TRUE", "<stdlib-path>/core/cinterop.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CBool").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("signed_int_from_bitsize", symbols.NewBaseTypeBuilder("typeid", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("usz", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unsigned_int_from_bitsize", symbols.NewBaseTypeBuilder("typeid", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("usz", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::string::conv
	module = moduleCollection["std::core::string::conv"]
	module.AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_BITS", symbols.NewTypeBuilder("uint", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_CODEPOINT_MASK", symbols.NewTypeBuilder("uint", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_GENERIC_MASK", symbols.NewTypeBuilder("uint", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_GENERIC_VALUE", symbols.NewTypeBuilder("uint", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_HIGH_VALUE", symbols.NewTypeBuilder("uint", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_LOW_VALUE", symbols.NewTypeBuilder("uint", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_MASK", symbols.NewTypeBuilder("uint", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_OFFSET", symbols.NewTypeBuilder("uint", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddFunction(symbols.NewFunctionBuilder("char32_to_utf8", symbols.NewBaseTypeBuilder("usz!", "std::core::string::conv").IsOptional().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("Char32", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("output", symbols.NewBaseTypeBuilder("char[]", "std::core::string::conv").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char32_to_utf16_unsafe", symbols.NewBaseTypeBuilder("void", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("Char32", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("output", symbols.NewTypeBuilder("Char16*", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char16_to_utf8_unsafe", symbols.NewBaseTypeBuilder("void!", "std::core::string::conv").IsOptional().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("Char16*", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("available", symbols.NewBaseTypeBuilder("usz*", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("output", symbols.NewBaseTypeBuilder("char*", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char32_to_utf8_unsafe", symbols.NewBaseTypeBuilder("usz", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("Char32", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("output", symbols.NewBaseTypeBuilder("char*", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8_to_char32", symbols.NewTypeBuilder("Char32!", "std::core::string").IsOptional().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("char*", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz*", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8_codepoints", symbols.NewBaseTypeBuilder("usz", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf8", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8len_for_utf32", symbols.NewBaseTypeBuilder("usz", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf32", symbols.NewTypeBuilder("Char32[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8len_for_utf16", symbols.NewBaseTypeBuilder("usz", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf16", symbols.NewTypeBuilder("Char16[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf16len_for_utf8", symbols.NewBaseTypeBuilder("usz", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf8", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf16len_for_utf32", symbols.NewBaseTypeBuilder("usz", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf32", symbols.NewTypeBuilder("Char32[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf32to8", symbols.NewBaseTypeBuilder("usz!", "std::core::string::conv").IsOptional().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf32", symbols.NewTypeBuilder("Char32[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf8_buffer", symbols.NewBaseTypeBuilder("char[]", "std::core::string::conv").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8to32", symbols.NewBaseTypeBuilder("usz!", "std::core::string::conv").IsOptional().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf8", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf32_buffer", symbols.NewTypeBuilder("Char32[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf16to8_unsafe", symbols.NewBaseTypeBuilder("void!", "std::core::string::conv").IsOptional().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf16", symbols.NewTypeBuilder("Char16[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf8_buffer", symbols.NewBaseTypeBuilder("char*", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8to32_unsafe", symbols.NewBaseTypeBuilder("void!", "std::core::string::conv").IsOptional().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf8", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf32_buffer", symbols.NewTypeBuilder("Char32*", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8to16_unsafe", symbols.NewBaseTypeBuilder("void!", "std::core::string::conv").IsOptional().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf8", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf16_buffer", symbols.NewTypeBuilder("Char16*", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf32to8_unsafe", symbols.NewBaseTypeBuilder("void", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf32", symbols.NewTypeBuilder("Char32[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf8_buffer", symbols.NewBaseTypeBuilder("char*", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::dstring
	module = moduleCollection["std::core::dstring"]
	module.AddVariable(symbols.NewVariableBuilder("MIN_CAPACITY", symbols.NewTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).AddStruct(symbols.NewStructBuilder("StringData", "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithStructMember("len", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithStructMember("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithStructMember("chars", symbols.NewBaseTypeBuilder("char[]", "std::core::dstring").IsUnsizedCollection().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("DStringOpaque*", "std::core::dstring").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("DStringOpaque", "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_with_capacity", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_with_capacity", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_new", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("replace_char", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("ch", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("replacement", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("replace", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("replacement", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_concat", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_concat", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("zstr_view", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("chop", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char_at", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char_ref", symbols.NewBaseTypeBuilder("char*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_utf32", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("chars", symbols.NewTypeBuilder("Char32[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_repeat", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("times", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_char32", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("Char32", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_zstr", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy_str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_string", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("less", symbols.NewBaseTypeBuilder("bool", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_string", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_chars", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_utf32", symbols.NewTypeBuilder("Char32[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_string", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("usz!", "std::core::dstring").IsOptional().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::core::dstring").IsUnsizedCollection().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewBaseTypeBuilder("void!", "std::core::dstring").IsOptional().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_char", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("delete_range", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("delete", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("DString.append", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_chars_at", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_string_at", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_char_at", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_char32_at", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("Char32", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_utf32_at", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("chars", symbols.NewTypeBuilder("Char32[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("DString.insert_at", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("appendf", symbols.NewBaseTypeBuilder("usz!", "std::core::dstring").IsOptional().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("appendfn", symbols.NewBaseTypeBuilder("usz!", "std::core::dstring").IsOptional().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_join", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("joiner", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_string_append_fn", symbols.NewBaseTypeBuilder("void!", "std::core::dstring").IsOptional().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("void*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reverse", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("data", symbols.NewTypeBuilder("StringData*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reserve", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("addition", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_from_stream", symbols.NewBaseTypeBuilder("usz!", "std::core::dstring").IsOptional().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("reader", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::env
	module = moduleCollection["std::core::env"]
	module.AddVariable(symbols.NewVariableBuilder("AARCH64", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("ADDRESS_SANITIZER", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("ANY_SANITIZER", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("ARCH_32_BIT", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("ARCH_64_BIT", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("ARCH_TYPE", symbols.NewTypeBuilder("ArchType", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("BACKTRACE", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("BENCHMARKING", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("BIG_ENDIAN", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("BSD_FAMILY", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("COMPILER_BUILD_DATE", symbols.NewTypeBuilder("String", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("COMPILER_BUILD_HASH", symbols.NewTypeBuilder("String", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("COMPILER_OPT_LEVEL", symbols.NewTypeBuilder("CompilerOptLevel", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("COMPILER_SAFE_MODE", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("DARWIN", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("DEBUG_SYMBOLS", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("DISABLE_BUILTIN_EXPECT", symbols.NewTypeBuilder("", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("DISABLE_BUILTIN_PREFETCH", symbols.NewTypeBuilder("", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("F128_SUPPORT", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("F16_SUPPORT", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("FREEBSD", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("I128_NATIVE_SUPPORT", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("LIBC", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("LINUX", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("LLVM_VERSION", symbols.NewTypeBuilder("usz", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("MEMORY_ENV", symbols.NewTypeBuilder("MemoryEnvironment", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("MEMORY_SANITIZER", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("NATIVE_STACKTRACE", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("NETBSD", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_LIBC", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("OPENBSD", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("OS_TYPE", symbols.NewTypeBuilder("OsType", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("POSIX", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("REGISTER_SIZE", symbols.NewTypeBuilder("", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("TESTING", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("THREAD_SANITIZER", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("TRACK_MEMORY", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("WASI", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("WASM_NOLIBC", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("WIN32", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("X86", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("X86_64", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddEnum(symbols.NewEnumBuilder("ArchType", "", "std::core::env", "<stdlib-path>/core/env.c3").WithEnumerator(symbols.NewEnumeratorBuilder("UNKNOWN", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ARM", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ARMB", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AARCH64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AARCH64_BE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AARCH64_32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ARC", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVR", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BPFEL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BPFEB", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HEXAGON", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MIPS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MIPSEL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MIPS64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MIPS64EL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MSP430", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PPC", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PPC64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PPC64LE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("R600", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMDGCN", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RISCV32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RISCV64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SPARC", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SPARCV9", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SPARCEL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYSTEMZ", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TCE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TCELE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("THUMB", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("THUMBEB", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("X86", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("X86_64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XCORE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NVPTX", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NVPTX64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LE32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LE64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMDIL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMDIL64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HSAIL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HSAIL64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SPIR", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SPIR64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KALIMBA", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHAVE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LANAI", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WASM32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WASM64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RSCRIPT32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RSCRIPT64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XTENSA", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).Build()).AddEnum(symbols.NewEnumBuilder("CompilerOptLevel", "", "std::core::env", "<stdlib-path>/core/env.c3").WithEnumerator(symbols.NewEnumeratorBuilder("O0", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CompilerOptLevel").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("O1", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CompilerOptLevel").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("O2", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CompilerOptLevel").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("O3", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CompilerOptLevel").Build()).Build()).AddEnum(symbols.NewEnumBuilder("MemoryEnvironment", "", "std::core::env", "<stdlib-path>/core/env.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NORMAL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MemoryEnvironment").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SMALL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MemoryEnvironment").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TINY", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MemoryEnvironment").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NONE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MemoryEnvironment").Build()).Build()).AddEnum(symbols.NewEnumBuilder("OsType", "", "std::core::env", "<stdlib-path>/core/env.c3").WithEnumerator(symbols.NewEnumeratorBuilder("UNKNOWN", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NONE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANANAS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLOUD_ABI", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DRAGON_FLY", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FREEBSD", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FUCHSIA", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("IOS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KFREEBSD", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LINUX", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PS3", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MACOS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NETBSD", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OPENBSD", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SOLARIS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WIN32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HAIKU", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MINIX", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RTEMS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NACL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CNK", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AIX", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CUDA", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NVOPENCL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMDHSA", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PS4", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ELFIAMCU", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TVOS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WATCHOS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MESA3D", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CONTIKI", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMDPAL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HERMITCORE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HURD", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WASI", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EMSCRIPTEN", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("os_is_darwin", symbols.NewBaseTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("os_is_posix", symbols.NewBaseTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").IsMacro().WithoutSourceCode().Build())

	// Define module std::core::mem
	module = moduleCollection["std::core::mem"]
	module.AddVariable(symbols.NewVariableBuilder("DEFAULT_MEM_ALIGNMENT", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAX_MEMORY_ALIGNMENT", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).AddVariable(symbols.NewVariableBuilder("__heap_base", symbols.NewBaseTypeBuilder("int", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).AddVariable(symbols.NewVariableBuilder("wasm_allocator", symbols.NewTypeBuilder("SimpleHeapAllocator", "std::core::mem::allocator").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).AddStruct(symbols.NewStructBuilder("TempState", "std::core::mem", "<stdlib-path>/core/mem.c3").WithStructMember("old", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithStructMember("current", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithStructMember("mark", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("AtomicOrdering", "int", "std::core::mem", "<stdlib-path>/core/mem.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NOT_ATOMIC", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UNORDERED", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RELAXED", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ACQUIRE", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RELEASE", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ACQUIRE_RELEASE", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SEQ_CONSISTENT", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("@constant_is_power_of_2", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("masked_load", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool[]", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("passthru", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@masked_load_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool[]", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("passthru", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gather", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptrvec", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool[]", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("passthru", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@gather_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptrvec", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool[]", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("passthru", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("masked_store", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool[]", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@masked_store_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool[]", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scatter", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptrvec", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool[]", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@scatter_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptrvec", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool[]", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@unaligned_load", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@unaligned_store", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@volatile_load", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@volatile_store", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@atomic_load", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("AtomicOrdering", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@atomic_store", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("AtomicOrdering", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compare_exchange", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewTypeBuilder("AtomicOrdering", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewTypeBuilder("AtomicOrdering", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg5", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg6", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg7", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compare_exchange_volatile", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewTypeBuilder("AtomicOrdering", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewTypeBuilder("AtomicOrdering", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("aligned_offset", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("aligned_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ptr_is_aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("zero_volatile", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear_inline", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg5", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg6", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_inline", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg5", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("move", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg5", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("val", symbols.NewBaseTypeBuilder("char", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_inline", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("val", symbols.NewBaseTypeBuilder("char", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("isz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("type_alloc_must_be_aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@scoped", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void()", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@report_heap_allocs_in_scope", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void()", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@assert_leak", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void()", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@stack_mem", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(Allocator mem)", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@stack_pool", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void()", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_push", symbols.NewTypeBuilder("TempState", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_pop", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("old_state", symbols.NewTypeBuilder("TempState", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@pool", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void()", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("initialize_wasm_mem", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_tracking_env", symbols.NewTypeBuilder("TrackingEnv*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@clone", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@tclone", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_aligned", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tmalloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_new", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_alloc", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_array", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_array_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_array", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_array_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_alloc_array", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_new_array", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc_aligned", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcalloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc_aligned", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_aligned", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trealloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__memcmp", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("s1", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__memset", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__memcpy", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddVariable(symbols.NewVariableBuilder("DEFAULT_SIZE_PREFIX", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("DEFAULT_SIZE_PREFIX_ALIGNMENT", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("NULL_ALLOCATOR", symbols.NewTypeBuilder("NullAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("temp_allocator_pair", symbols.NewTypeBuilder("TempAllocator*[2]", "std::core::mem::allocator").IsCollectionWithSize(2).Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("temp_base_allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("thread_allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("thread_temp_allocator", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddStruct(symbols.NewStructBuilder("AlignedBlock", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithStructMember("len", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithStructMember("start", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TrackingEnv", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithStructMember("file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithStructMember("function", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithStructMember("line", symbols.NewBaseTypeBuilder("uint", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MemoryAllocFn", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithResolvesTo("fn char[]!(usz)").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("NullAllocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uptr", "std::core::mem::allocator").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("AllocInitType", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NO_ZERO", "<stdlib-path>/core/mem_allocator.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AllocInitType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ZERO", "<stdlib-path>/core/mem_allocator.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AllocInitType").Build()).Build()).AddFault(symbols.NewFaultBuilder("AllocationFailure", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithConstant(symbols.NewFaultConstantBuilder("OUT_OF_MEMORY", "std::core::mem::allocator", "../../../assets/c3c/lib/std/core/mem_allocator.c3").WithFaultName("AllocationFailure").Build()).WithConstant(symbols.NewFaultConstantBuilder("CHUNK_TOO_LARGE", "std::core::mem::allocator", "../../../assets/c3c/lib/std/core/mem_allocator.c3").WithFaultName("AllocationFailure").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("alignment_for_allocation", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_try", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc_try", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc_try", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_aligned", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc_aligned", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc_aligned", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_aligned", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_try", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_aligned", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_with_padding", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_try", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_aligned", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_with_padding", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_array", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_array_try", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_array_aligned", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_array", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_array_aligned", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_array_try", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clone", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clone_any", symbols.NewBaseTypeBuilder("any", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("any", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@aligned_alloc", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@aligned_free", symbols.NewBaseTypeBuilder("void!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@aligned_realloc", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("base_allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create_default_sized_temp_allocator", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("heap", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_default_temp_allocators", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy_temp_allocators_after_exit", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy_temp_allocators", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_allocator_next", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("NullAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NullAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*!", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("NullAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NullAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("NullAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NullAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddVariable(symbols.NewVariableBuilder("WASM_BLOCK_SIZE", symbols.NewTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/os/wasm_memory.c3").Build()).AddVariable(symbols.NewVariableBuilder("wasm_memory", symbols.NewTypeBuilder("WasmMemory", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/os/wasm_memory.c3").Build()).AddStruct(symbols.NewStructBuilder("WasmMemory", "std::core::mem::allocator", "<stdlib-path>/core/os/wasm_memory.c3").WithStructMember("allocation", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/os/wasm_memory.c3").WithStructMember("use", symbols.NewBaseTypeBuilder("uptr", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/os/wasm_memory.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocate_block", symbols.NewBaseTypeBuilder("char[]!", "std::core::mem::allocator").IsOptional().IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/os/wasm_memory.c3").WithTypeIdentifier("WasmMemory").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WasmMemory", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/os/wasm_memory.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/os/wasm_memory.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::cpudetect
	module = moduleCollection["std::core::cpudetect"]
	module.AddVariable(symbols.NewVariableBuilder("x86_features", symbols.NewBaseTypeBuilder("uint128", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).AddStruct(symbols.NewStructBuilder("CpuId", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember("eax", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember("ebx", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember("ecx", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember("edx", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("X86Feature", "", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithEnumerator(symbols.NewEnumeratorBuilder("ADX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AES", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_AVX512", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_FP8", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_MOVRS", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_TF32", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_TRANSPOSE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_BF16", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_COMPLEX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_FP16", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_INT8", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_TILE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("APXF", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX10_1_256", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX10_1_512", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX10_2_256", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX10_2_512", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX2", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX5124FMAPS", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX5124VNNIW", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512BF16", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512BITALG", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512BW", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512CD", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512DQ", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512ER", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512F", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512FP16", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512IFMA", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512PF", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VBMI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VBMI2", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VL", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VNNI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VP2INTERSECT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VPOPCNTDQ", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVXIFMA", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVXNECONVERT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVXVNNI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVXVNNIINT16", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVXVNNIINT8", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BMI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BMI2", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLDEMOTE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLFLUSHOPT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLWB", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLZERO", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CMOV", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CMPCCXADD", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CMPXCHG16B", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CX8", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ENQCMD", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("F16C", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FMA", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FMA4", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FSGSBASE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FXSR", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("GFNI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HRESET", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("INVPCID", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KL", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LWP", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LZCNT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MMX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOVBE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOVDIR64B", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOVDIRI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOVRS", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MWAITX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PCLMUL", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PCONFIG", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PKU", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("POPCNT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PREFETCHI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PREFETCHWT1", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PRFCHW", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PTWRITE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RAOINT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RDPID", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RDPRU", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RDRND", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RDSEED", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RTM", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SAHF", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SERIALIZE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SGX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHA", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHA512", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHSTK", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SM3", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SM4", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE2", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE3", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE4_1", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE4_2", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE4_A", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSSE3", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TBM", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TSXLDTRK", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UINTR", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("USERMSR", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VAES", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VPCLMULQDQ", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WAITPKG", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WBNOINVD", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WIDEKL", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("X87", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XOP", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XSAVE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XSAVEC", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XSAVEOPT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XSAVES", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("x86_cpuid", symbols.NewTypeBuilder("CpuId", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithArgument(symbols.NewVariableBuilder("eax", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).WithArgument(symbols.NewVariableBuilder("ecx", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_feature_if_bit", symbols.NewBaseTypeBuilder("void", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithArgument(symbols.NewVariableBuilder("feature", symbols.NewTypeBuilder("X86Feature", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).WithArgument(symbols.NewVariableBuilder("register", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).WithArgument(symbols.NewVariableBuilder("bit", symbols.NewBaseTypeBuilder("int", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("x86_initialize_cpu_features", symbols.NewBaseTypeBuilder("void", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithoutSourceCode().Build())

	// Define module std::core::main_stub
	module = moduleCollection["std::core::main_stub"]
	module.AddFunction(symbols.NewFunctionBuilder("_strlen", symbols.NewBaseTypeBuilder("usz", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_err_main", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("char*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_int_main", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("char*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_void_main", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("char*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("args_to_strings", symbols.NewTypeBuilder("String[]", "std::core::main_stub").IsUnsizedCollection().Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewBaseTypeBuilder("char*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_err_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewBaseTypeBuilder("char*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_int_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewBaseTypeBuilder("char*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@_main_runner", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewBaseTypeBuilder("char*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_void_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewBaseTypeBuilder("char*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_win_command_line_to_argv_w", symbols.NewTypeBuilder("Char16*", "std::core::string").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewBaseTypeBuilder("ushort*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc_ptr", symbols.NewBaseTypeBuilder("int*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("win_command_line_to_strings", symbols.NewTypeBuilder("String[]", "std::core::main_stub").IsUnsizedCollection().Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewBaseTypeBuilder("ushort*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wargs_strings", symbols.NewTypeBuilder("String[]", "std::core::main_stub").IsUnsizedCollection().Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release_wargs", symbols.NewBaseTypeBuilder("void", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("String[]", "std::core::main_stub").IsUnsizedCollection().Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_err_main_noargs", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_int_main_noargs", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_void_main_noargs", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_err_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_int_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_void_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_err_main", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_int_main", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_void_main", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@wmain_to_err_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@wmain_to_int_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@_wmain_runner", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@wmain_to_void_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::runtime
	module = moduleCollection["std::core::runtime"]
	module.AddStruct(symbols.NewStructBuilder("AnyRaw", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("type", symbols.NewBaseTypeBuilder("typeid", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("ReflectedParam", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("type", symbols.NewBaseTypeBuilder("typeid", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("SliceRaw", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("len", symbols.NewBaseTypeBuilder("usz", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__wasm_call_ctors", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wasm_initialize", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build())

	// Define module std::core::runtime
	module = moduleCollection["std::core::runtime"]
	module.AddVariable(symbols.NewVariableBuilder("DEFAULT_BENCHMARK_MAX_ITERATIONS", symbols.NewTypeBuilder("", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddVariable(symbols.NewVariableBuilder("DEFAULT_BENCHMARK_WARMUP_ITERATIONS", symbols.NewTypeBuilder("", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddVariable(symbols.NewVariableBuilder("benchmark_max_iterations", symbols.NewBaseTypeBuilder("uint", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddVariable(symbols.NewVariableBuilder("benchmark_warmup_iterations", symbols.NewBaseTypeBuilder("uint", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddStruct(symbols.NewStructBuilder("BenchmarkUnit", "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithStructMember("name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithStructMember("func", symbols.NewTypeBuilder("BenchmarkFn", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("BenchmarkFn", "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithResolvesTo("fn void()").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("benchmark_collection_create", symbols.NewTypeBuilder("BenchmarkUnit[]", "std::core::runtime").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_benchmark_warmup_iterations", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("uint", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_benchmark_max_iterations", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("uint", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("run_benchmarks", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithArgument(symbols.NewVariableBuilder("benchmarks", symbols.NewTypeBuilder("BenchmarkUnit[]", "std::core::runtime").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("run_benchmarks", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithArgument(symbols.NewVariableBuilder("benchmarks", symbols.NewTypeBuilder("BenchmarkUnit[]", "std::core::runtime").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("default_benchmark_runner", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::runtime
	module = moduleCollection["std::core::runtime"]
	module.AddVariable(symbols.NewVariableBuilder("test_context", symbols.NewTypeBuilder("TestContext*", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).AddStruct(symbols.NewStructBuilder("TestContext", "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("buf", symbols.NewTypeBuilder("JmpBuf", "libc").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TestUnit", "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("func", symbols.NewTypeBuilder("TestFn", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("TestFn", "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithResolvesTo("fn void()").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("test_collection_create", symbols.NewTypeBuilder("TestUnit[]", "std::core::runtime").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cmp_test_unit", symbols.NewBaseTypeBuilder("int", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("TestUnit", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("TestUnit", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("test_panic", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithArgument(symbols.NewVariableBuilder("message", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", symbols.NewBaseTypeBuilder("uint", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("run_tests", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithArgument(symbols.NewVariableBuilder("tests", symbols.NewTypeBuilder("TestUnit[]", "std::core::runtime").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("run_tests", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithArgument(symbols.NewVariableBuilder("tests", symbols.NewTypeBuilder("TestUnit[]", "std::core::runtime").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("default_test_runner", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::sanitizer::asan
	module = moduleCollection["std::core::sanitizer::asan"]
	module.AddDef(symbols.NewDefBuilder("ErrorCallback", "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithResolvesTo("fn void (ZString)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("poison_memory_region", symbols.NewTypeBuilder("", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unpoison_memory_region", symbols.NewTypeBuilder("", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("address_is_poisoned", symbols.NewBaseTypeBuilder("bool", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("region_is_poisoned", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_error_report_callback", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("callback", symbols.NewTypeBuilder("ErrorCallback", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_poison_memory_region", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_unpoison_memory_region", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_address_is_poisoned", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_region_is_poisoned", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_describe_address", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_report_present", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_report_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_report_bp", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_report_sp", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_report_address", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_report_access_type", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_report_access_size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_report_description", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_locate_address", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewBaseTypeBuilder("char*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("name_size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("region_address", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("region_size", symbols.NewBaseTypeBuilder("usz*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_alloc_stack", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("trace", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("thread_id", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_free_stack", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("trace", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("thread_id", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_shadow_mapping", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("shadow_scale", symbols.NewBaseTypeBuilder("usz*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("shadow_offset", symbols.NewBaseTypeBuilder("usz*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_set_error_report_callback", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("callback", symbols.NewTypeBuilder("ErrorCallback", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_print_accumulated_stats", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_current_fake_stack", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_addr_is_in_fake_stack", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("fake_stack", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_handle_no_return", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_update_allocation_context", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::sanitizer
	module = moduleCollection["std::core::sanitizer"]
	module.AddStruct(symbols.NewStructBuilder("__Sanitizer_sandbox_arguments", "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithStructMember("coverage_sandboxed", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithStructMember("coverage_fd", symbols.NewBaseTypeBuilder("iptr", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithStructMember("coverage_max_block_size", symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("annotate_contiguous_container", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_mid", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_mid", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("annotate_double_ended_contiguous_container", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("storage_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("storage_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_container_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_container_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_container_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_container_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print_stack_trace", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_death_callback", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("callback", symbols.NewTypeBuilder("VoidFn", "std::core::builtin").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_set_report_path", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_set_report_fd", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_get_report_path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_sandbox_on_notify", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("__Sanitizer_sandbox_arguments*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_report_error_summary", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("error_summary", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_unaligned_load16", symbols.NewBaseTypeBuilder("ushort", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_unaligned_load32", symbols.NewBaseTypeBuilder("uint", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_unaligned_load64", symbols.NewBaseTypeBuilder("ulong", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_unaligned_store16", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_unaligned_store32", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_unaligned_store64", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_acquire_crash_state", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_annotate_contiguous_container", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_mid", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_mid", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_annotate_double_ended_contiguous_container", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("storage_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("storage_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_container_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_container_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_container_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_container_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_verify_contiguous_container", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("mid", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_verify_double_ended_contiguous_container", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("storage_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("container_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("container_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("storage_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_contiguous_container_find_bad_address", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("mid", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_double_ended_contiguous_container_find_bad_address", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("storage_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("container_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("container_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("storage_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_print_stack_trace", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_symbolize_pc", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("out_buf", symbols.NewBaseTypeBuilder("char*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("out_buf_size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_symbolize_global", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("data_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("out_buf", symbols.NewBaseTypeBuilder("char*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("out_buf_size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_set_death_callback", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("callback", symbols.NewTypeBuilder("VoidFn", "std::core::builtin").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_weak_hook_memcmp", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("called_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s1", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_weak_hook_strncmp", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("called_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_weak_hook_strncasecmp", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("called_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_weak_hook_strcmp", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("called_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_weak_hook_strcasecmp", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("called_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_weak_hook_strstr", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("called_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewBaseTypeBuilder("char*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_weak_hook_strcasestr", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("called_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewBaseTypeBuilder("char*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_weak_hook_memmem", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("called_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s1", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("len1", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("len2", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_print_memory_profile", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("top_percent", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_number_of_contexts", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_start_switch_fiber", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("fake_stack_save", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bottom", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_finish_switch_fiber", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("fake_stack_save", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bottom_old", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("size_old", symbols.NewBaseTypeBuilder("usz*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_get_module_and_offset_for_pc", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("module_path", symbols.NewBaseTypeBuilder("char*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("module_path_len", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("pc_offset", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::string
	module = moduleCollection["std::core::string"]
	module.AddVariable(symbols.NewVariableBuilder("SURROGATE_BITS", symbols.NewTypeBuilder("uint", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_CODEPOINT_MASK", symbols.NewTypeBuilder("uint", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_GENERIC_MASK", symbols.NewTypeBuilder("uint", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_HIGH_VALUE", symbols.NewTypeBuilder("uint", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_LOW_VALUE", symbols.NewTypeBuilder("uint", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_MASK", symbols.NewTypeBuilder("uint", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_OFFSET", symbols.NewTypeBuilder("uint", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddStruct(symbols.NewStructBuilder("Splitter", "std::core::string", "<stdlib-path>/core/string.c3").WithStructMember("string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithStructMember("split", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithStructMember("current", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithStructMember("tokenize", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithStructMember("last_index", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Char16", "std::core::string", "<stdlib-path>/core/string.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "std::core::string").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Char32", "std::core::string", "<stdlib-path>/core/string.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::core::string").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("String", "std::core::string", "<stdlib-path>/core/string.c3").WithInline(true).WithBaseType(symbols.NewBaseTypeBuilder("char[]", "std::core::string").IsUnsizedCollection().Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("WString", "std::core::string", "<stdlib-path>/core/string.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Char16*", "std::core::string").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("ZString", "std::core::string", "<stdlib-path>/core/string.c3").WithInline(true).WithBaseType(symbols.NewBaseTypeBuilder("char*", "std::core::string").Build()).WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("NumberConversion", "", "std::core::string", "<stdlib-path>/core/string.c3").WithConstant(symbols.NewFaultConstantBuilder("EMPTY_STRING", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("NumberConversion").Build()).WithConstant(symbols.NewFaultConstantBuilder("NEGATIVE_VALUE", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("NumberConversion").Build()).WithConstant(symbols.NewFaultConstantBuilder("MALFORMED_INTEGER", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("NumberConversion").Build()).WithConstant(symbols.NewFaultConstantBuilder("INTEGER_OVERFLOW", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("NumberConversion").Build()).WithConstant(symbols.NewFaultConstantBuilder("MALFORMED_FLOAT", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("NumberConversion").Build()).WithConstant(symbols.NewFaultConstantBuilder("FLOAT_OUT_OF_RANGE", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("NumberConversion").Build()).Build()).AddFault(symbols.NewFaultBuilder("SplitResult", "", "std::core::string", "<stdlib-path>/core/string.c3").WithConstant(symbols.NewFaultConstantBuilder("BUFFER_EXCEEDED", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("SplitResult").Build()).Build()).AddFault(symbols.NewFaultBuilder("UnicodeResult", "", "std::core::string", "<stdlib-path>/core/string.c3").WithConstant(symbols.NewFaultConstantBuilder("INVALID_UTF8", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("UnicodeResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_UTF16", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("UnicodeResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("CONVERSION_FAILED", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("UnicodeResult").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("tformat_zstr", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tformat", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_format_zstr", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char_in_set", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("join_new", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("joiner", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trim", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("to_trim", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trim_left", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("to_trim", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trim_right", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("to_trim", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("starts_with", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ends_with", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strip", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strip_end", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("split", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("skip_empty", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_split", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("skip_empty", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tsplit", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("skip_empty", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("split_to_buffer", symbols.NewTypeBuilder("String[]!", "std::core::string").IsOptional().IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("skip_empty", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_of_char", symbols.NewBaseTypeBuilder("usz!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewBaseTypeBuilder("char", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_of_chars", symbols.NewBaseTypeBuilder("usz!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewBaseTypeBuilder("char[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_of_char_from", symbols.NewBaseTypeBuilder("usz!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewBaseTypeBuilder("char", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("start_index", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rindex_of_char", symbols.NewBaseTypeBuilder("usz!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewBaseTypeBuilder("char", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_of", symbols.NewBaseTypeBuilder("usz!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rindex_of", symbols.NewBaseTypeBuilder("usz!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("ZString").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char_len", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("ZString").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("ZString").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("zstr_copy", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("concat", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s1", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tconcat", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s1", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("zstr_tcopy", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("ZString").WithArgument(symbols.NewVariableBuilder("z", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("ZString").WithArgument(symbols.NewVariableBuilder("z", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_utf16", symbols.NewTypeBuilder("Char16[]!", "std::core::string").IsOptional().IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_temp_utf16", symbols.NewTypeBuilder("Char16[]!", "std::core::string").IsOptional().IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_wstring", symbols.NewTypeBuilder("WString!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_temp_wstring", symbols.NewTypeBuilder("WString!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_wstring", symbols.NewTypeBuilder("WString!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_utf32", symbols.NewTypeBuilder("Char32[]!", "std::core::string").IsOptional().IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_utf32", symbols.NewTypeBuilder("Char32[]!", "std::core::string").IsOptional().IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_temp_utf32", symbols.NewTypeBuilder("Char32[]!", "std::core::string").IsOptional().IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("convert_ascii_to_lower", symbols.NewBaseTypeBuilder("void", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_ascii_to_lower", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_ascii_to_lower", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("convert_ascii_to_upper", symbols.NewBaseTypeBuilder("void", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_ascii_to_upper", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("iterator", symbols.NewTypeBuilder("StringIterator", "std::core::string::iterator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_ascii_to_upper", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_from_utf32", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("utf32", symbols.NewTypeBuilder("Char32[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_from_utf16", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("utf16", symbols.NewTypeBuilder("Char16[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_from_wstring", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("wstring", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_from_wstring", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("wstring", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_from_utf16", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("utf16", symbols.NewTypeBuilder("Char16[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8_codepoints", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("String.to_integer", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_int128", symbols.NewBaseTypeBuilder("int128!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_long", symbols.NewBaseTypeBuilder("long!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_int", symbols.NewBaseTypeBuilder("int!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_short", symbols.NewBaseTypeBuilder("short!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_ichar", symbols.NewBaseTypeBuilder("ichar!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_uint128", symbols.NewBaseTypeBuilder("uint128!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_ulong", symbols.NewBaseTypeBuilder("ulong!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_uint", symbols.NewBaseTypeBuilder("uint!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_ushort", symbols.NewBaseTypeBuilder("ushort!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_uchar", symbols.NewBaseTypeBuilder("char!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_double", symbols.NewBaseTypeBuilder("double!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_float", symbols.NewBaseTypeBuilder("float!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("splitter", symbols.NewTypeBuilder("Splitter", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("split", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tokenize", symbols.NewTypeBuilder("Splitter", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("split", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewBaseTypeBuilder("void", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("Splitter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Splitter", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("Splitter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Splitter", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_struct_to_str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_struct_to_str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::string::iterator
	module = moduleCollection["std::core::string::iterator"]
	module.AddStruct(symbols.NewStructBuilder("StringIterator", "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithStructMember("utf8", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithStructMember("current", symbols.NewBaseTypeBuilder("usz", "std::core::string::iterator").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewBaseTypeBuilder("void", "std::core::string::iterator").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithTypeIdentifier("StringIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("StringIterator", "std::core::string::iterator").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next", symbols.NewTypeBuilder("Char32!", "std::core::string").IsOptional().Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithTypeIdentifier("StringIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("StringIterator", "std::core::string::iterator").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("peek", symbols.NewTypeBuilder("Char32!", "std::core::string").IsOptional().Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithTypeIdentifier("StringIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("StringIterator", "std::core::string::iterator").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_next", symbols.NewBaseTypeBuilder("bool", "std::core::string::iterator").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithTypeIdentifier("StringIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("StringIterator", "std::core::string::iterator").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeBuilder("Char32!", "std::core::string").IsOptional().Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithTypeIdentifier("StringIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("StringIterator", "std::core::string::iterator").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::string
	module = moduleCollection["std::core::string"]
	module.AddVariable(symbols.NewVariableBuilder("B1B_DIG", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).AddVariable(symbols.NewVariableBuilder("B1B_MAX", symbols.NewTypeBuilder("uint[2]", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).AddVariable(symbols.NewVariableBuilder("KMAX", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).AddVariable(symbols.NewVariableBuilder("MASK", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).AddFunction(symbols.NewFunctionBuilder("decfloat", symbols.NewBaseTypeBuilder("double!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").WithArgument(symbols.NewVariableBuilder("chars", symbols.NewBaseTypeBuilder("char[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("sign", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hexfloat", symbols.NewBaseTypeBuilder("double!", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").WithArgument(symbols.NewVariableBuilder("chars", symbols.NewBaseTypeBuilder("char[]", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("sign", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("String.to_real", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").WithArgument(symbols.NewVariableBuilder("chars", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::types
	module = moduleCollection["std::core::types"]
	module.AddStruct(symbols.NewStructBuilder("TypeEnum", "std::core::types", "<stdlib-path>/core/types.c3").WithStructMember("type", symbols.NewTypeBuilder("TypeKind", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithStructMember("elements", symbols.NewBaseTypeBuilder("usz", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("TypeKind", "char", "std::core::types", "<stdlib-path>/core/types.c3").WithEnumerator(symbols.NewEnumeratorBuilder("VOID", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BOOL", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SIGNED_INT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UNSIGNED_INT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FLOAT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TYPEID", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANYFAULT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANY", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ENUM", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FAULT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("STRUCT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UNION", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BITSTRUCT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FUNC", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OPTIONAL", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ARRAY", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SLICE", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VECTOR", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DISTINCT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("POINTER", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("INTERFACE", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).Build()).AddFault(symbols.NewFaultBuilder("ConversionResult", "", "std::core::types", "<stdlib-path>/core/types.c3").WithConstant(symbols.NewFaultConstantBuilder("VALUE_OUT_OF_RANGE", "std::core::types", "../../../assets/c3c/lib/std/core/types.c3").WithFaultName("ConversionResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("VALUE_OUT_OF_UNSIGNED_RANGE", "std::core::types", "../../../assets/c3c/lib/std/core/types.c3").WithFaultName("ConversionResult").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("any_to_enum_ordinal", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewBaseTypeBuilder("any", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("any_to_int", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewBaseTypeBuilder("any", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_subtype_of", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithTypeIdentifier("typeid").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("typeid", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewBaseTypeBuilder("typeid", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_subtype_of", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_numerical", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_int", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithTypeIdentifier("TypeKind").WithArgument(symbols.NewVariableBuilder("kind", symbols.NewTypeBuilder("", "").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_slice_convertable", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bool", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_int", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_signed", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_unsigned", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_indexable", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_ref_indexable", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_intlike", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_underlying_int", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_float", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_floatlike", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_vector", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("inner_type", symbols.NewBaseTypeBuilder("typeid", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("inner_kind", symbols.NewTypeBuilder("TypeKind", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_same", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@has_same", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("may_load_atomic", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lower_to_atomic_compatible_type", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_promotable_to_floatlike", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_promotable_to_float", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_same_vector_type", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_equatable_type", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("implements_copy", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_equatable_value", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@equatable_value", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@comparable_value", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_comparable_value", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::values
	module = moduleCollection["std::core::values"]
	module.AddFunction(symbols.NewFunctionBuilder("@typeid", symbols.NewBaseTypeBuilder("typeid", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@typekind", symbols.NewTypeBuilder("TypeKind", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@typeis", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_same_type", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_bool", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_int", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_floatlike", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_float", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_promotable_to_floatlike", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_promotable_to_float", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_vector", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_same_vector_type", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@assign_to", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_lvalue", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("promote_int", symbols.NewTypeBuilder("", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("promote_int_same", symbols.NewTypeBuilder("", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@inner_kind", symbols.NewTypeBuilder("TypeKind", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::crypto
	module = moduleCollection["std::crypto"]
	module.AddFunction(symbols.NewFunctionBuilder("safe_compare", symbols.NewBaseTypeBuilder("bool", "std::crypto").Build(), "std::crypto", "<stdlib-path>/crypto/crypto.c3").WithArgument(symbols.NewVariableBuilder("data1", symbols.NewBaseTypeBuilder("void*", "std::crypto").Build(), "std::crypto", "<stdlib-path>/crypto/crypto.c3").Build()).WithArgument(symbols.NewVariableBuilder("data2", symbols.NewBaseTypeBuilder("void*", "std::crypto").Build(), "std::crypto", "<stdlib-path>/crypto/crypto.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::crypto").Build(), "std::crypto", "<stdlib-path>/crypto/crypto.c3").Build()).WithoutSourceCode().Build())

	// Define module std::crypto::dh
	module = moduleCollection["std::crypto::dh"]
	module.AddFunction(symbols.NewFunctionBuilder("generate_secret", symbols.NewTypeBuilder("BigInt", "std::math::bigint").Build(), "std::crypto::dh", "<stdlib-path>/crypto/dh.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewTypeBuilder("BigInt", "std::math::bigint").Build(), "std::crypto::dh", "<stdlib-path>/crypto/dh.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("BigInt", "std::math::bigint").Build(), "std::crypto::dh", "<stdlib-path>/crypto/dh.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("BigInt", "std::math::bigint").Build(), "std::crypto::dh", "<stdlib-path>/crypto/dh.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("public_key", symbols.NewTypeBuilder("BigInt", "std::math::bigint").Build(), "std::crypto::dh", "<stdlib-path>/crypto/dh.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewTypeBuilder("BigInt", "std::math::bigint").Build(), "std::crypto::dh", "<stdlib-path>/crypto/dh.c3").Build()).WithArgument(symbols.NewVariableBuilder("g", symbols.NewTypeBuilder("BigInt", "std::math::bigint").Build(), "std::crypto::dh", "<stdlib-path>/crypto/dh.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("BigInt", "std::math::bigint").Build(), "std::crypto::dh", "<stdlib-path>/crypto/dh.c3").Build()).WithoutSourceCode().Build())

	// Define module std::crypto::rc4
	module = moduleCollection["std::crypto::rc4"]
	module.AddStruct(symbols.NewStructBuilder("Rc4", "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithStructMember("i", symbols.NewBaseTypeBuilder("uint", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("uint", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithStructMember("j", symbols.NewBaseTypeBuilder("uint", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithStructMember("state", symbols.NewBaseTypeBuilder("char[256]", "std::crypto::rc4").IsCollectionWithSize(256).Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithTypeIdentifier("Rc4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Rc4", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char[]", "std::crypto::rc4").IsUnsizedCollection().Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("crypt", symbols.NewBaseTypeBuilder("void", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char[]", "std::crypto::rc4").IsUnsizedCollection().Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::crypto::rc4").IsUnsizedCollection().Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("crypt", symbols.NewBaseTypeBuilder("void", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithTypeIdentifier("Rc4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Rc4", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithArgument(symbols.NewVariableBuilder("in", symbols.NewBaseTypeBuilder("char[]", "std::crypto::rc4").IsUnsizedCollection().Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithArgument(symbols.NewVariableBuilder("out", symbols.NewBaseTypeBuilder("char[]", "std::crypto::rc4").IsUnsizedCollection().Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithTypeIdentifier("Rc4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Rc4", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithoutSourceCode().Build())

	// Define module std::encoding::base32
	module = moduleCollection["std::encoding::base32"]
	module.AddVariable(symbols.NewVariableBuilder("DEFAULT_PAD", symbols.NewTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("HEX", symbols.NewTypeBuilder("Base32Alphabet", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("HEX_ALPHABET", symbols.NewTypeBuilder("Alphabet", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("INVALID", symbols.NewTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("MASK", symbols.NewTypeBuilder("uint", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_PAD", symbols.NewTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_PADDING", symbols.NewTypeBuilder("int", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("STANDARD", symbols.NewTypeBuilder("Base32Alphabet", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("STD_ALPHABET", symbols.NewTypeBuilder("Alphabet", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("STD_PADDING", symbols.NewTypeBuilder("int", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddStruct(symbols.NewStructBuilder("Base32Alphabet", "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithStructMember("encoding", symbols.NewBaseTypeBuilder("char[32]", "std::encoding::base32").IsCollectionWithSize(32).Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithStructMember("reverse", symbols.NewBaseTypeBuilder("char[256]", "std::encoding::base32").IsCollectionWithSize(256).Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Base32Decoder", "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithStructMember("alphabet", symbols.NewTypeBuilder("Base32Alphabet", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithStructMember("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Base32Encoder", "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithStructMember("alphabet", symbols.NewTypeBuilder("Base32Alphabet", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithStructMember("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Alphabet", "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("char[32]", "std::encoding::base32").IsCollectionWithSize(32).Build()).WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("Base32Error", "", "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithConstant(symbols.NewFaultConstantBuilder("DUPLICATE_IN_ALPHABET", "std::encoding::base32", "../../../assets/c3c/lib/std/encoding/base32.c3").WithFaultName("Base32Error").Build()).WithConstant(symbols.NewFaultConstantBuilder("PADDING_IN_ALPHABET", "std::encoding::base32", "../../../assets/c3c/lib/std/encoding/base32.c3").WithFaultName("Base32Error").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_CHARACTER_IN_ALPHABET", "std::encoding::base32", "../../../assets/c3c/lib/std/encoding/base32.c3").WithFaultName("Base32Error").Build()).WithConstant(symbols.NewFaultConstantBuilder("DESTINATION_TOO_SMALL", "std::encoding::base32", "../../../assets/c3c/lib/std/encoding/base32.c3").WithFaultName("Base32Error").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_PADDING", "std::encoding::base32", "../../../assets/c3c/lib/std/encoding/base32.c3").WithFaultName("Base32Error").Build()).WithConstant(symbols.NewFaultConstantBuilder("CORRUPT_INPUT", "std::encoding::base32", "../../../assets/c3c/lib/std/encoding/base32.c3").WithFaultName("Base32Error").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base32Alphabet*", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode", symbols.NewBaseTypeBuilder("char[]!", "std::encoding::base32").IsOptional().IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base32Alphabet*", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_new", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base32Alphabet*", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_temp", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base32Alphabet*", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_new", symbols.NewBaseTypeBuilder("char[]!", "std::encoding::base32").IsOptional().IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base32Alphabet*", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_temp", symbols.NewBaseTypeBuilder("char[]!", "std::encoding::base32").IsOptional().IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base32Alphabet*", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_len", symbols.NewBaseTypeBuilder("usz", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_len", symbols.NewBaseTypeBuilder("usz", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_buffer", symbols.NewBaseTypeBuilder("char[]!", "std::encoding::base32").IsOptional().IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base32Alphabet*", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_buffer", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base32Alphabet*", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void!", "std::encoding::base32").IsOptional().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithTypeIdentifier("Base32Encoder").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Base32Encoder", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("encoder", symbols.NewTypeBuilder("Alphabet", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("int", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_len", symbols.NewBaseTypeBuilder("usz", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithTypeIdentifier("Base32Encoder").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Base32Encoder", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewBaseTypeBuilder("usz!", "std::encoding::base32").IsOptional().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithTypeIdentifier("Base32Encoder").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Base32Encoder", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void!", "std::encoding::base32").IsOptional().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithTypeIdentifier("Base32Decoder").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Base32Decoder", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("decoder", symbols.NewTypeBuilder("Alphabet", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("int", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_len", symbols.NewBaseTypeBuilder("usz", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithTypeIdentifier("Base32Decoder").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Base32Decoder", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode", symbols.NewBaseTypeBuilder("usz!", "std::encoding::base32").IsOptional().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithTypeIdentifier("Base32Decoder").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Base32Decoder", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("validate", symbols.NewBaseTypeBuilder("void!", "std::encoding::base32").IsOptional().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithTypeIdentifier("Alphabet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Alphabet", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("int", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithoutSourceCode().Build())

	// Define module std::encoding::base64
	module = moduleCollection["std::encoding::base64"]
	module.AddVariable(symbols.NewVariableBuilder("DEFAULT_PAD", symbols.NewTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddVariable(symbols.NewVariableBuilder("MASK", symbols.NewTypeBuilder("", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_PAD", symbols.NewTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddVariable(symbols.NewVariableBuilder("STANDARD", symbols.NewTypeBuilder("Base64Alphabet", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddVariable(symbols.NewVariableBuilder("STD_ALPHABET", symbols.NewTypeBuilder("", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddVariable(symbols.NewVariableBuilder("URL", symbols.NewTypeBuilder("Base64Alphabet", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddVariable(symbols.NewVariableBuilder("URL_ALPHABET", symbols.NewTypeBuilder("", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddStruct(symbols.NewStructBuilder("Base64Alphabet", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithStructMember("encoding", symbols.NewBaseTypeBuilder("char[64]", "std::encoding::base64").IsCollectionWithSize(64).Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithStructMember("reverse", symbols.NewBaseTypeBuilder("char[256]", "std::encoding::base64").IsCollectionWithSize(256).Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Base64Decoder", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithStructMember("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithStructMember("encoding", symbols.NewTypeBuilder("Base64Alphabet", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithStructMember("init_done", symbols.NewBaseTypeBuilder("bool", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Base64Encoder", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithStructMember("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithStructMember("alphabet", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("Base64Error", "", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithConstant(symbols.NewFaultConstantBuilder("DUPLICATE_IN_ALPHABET", "std::encoding::base64", "../../../assets/c3c/lib/std/encoding/base64.c3").WithFaultName("Base64Error").Build()).WithConstant(symbols.NewFaultConstantBuilder("PADDING_IN_ALPHABET", "std::encoding::base64", "../../../assets/c3c/lib/std/encoding/base64.c3").WithFaultName("Base64Error").Build()).WithConstant(symbols.NewFaultConstantBuilder("DESTINATION_TOO_SMALL", "std::encoding::base64", "../../../assets/c3c/lib/std/encoding/base64.c3").WithFaultName("Base64Error").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_PADDING", "std::encoding::base64", "../../../assets/c3c/lib/std/encoding/base64.c3").WithFaultName("Base64Error").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_CHARACTER", "std::encoding::base64", "../../../assets/c3c/lib/std/encoding/base64.c3").WithFaultName("Base64Error").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base64Alphabet*", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode", symbols.NewBaseTypeBuilder("char[]!", "std::encoding::base64").IsOptional().IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base64Alphabet*", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_new", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base64Alphabet*", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_temp", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base64Alphabet*", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_new", symbols.NewBaseTypeBuilder("char[]!", "std::encoding::base64").IsOptional().IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base64Alphabet*", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_temp", symbols.NewBaseTypeBuilder("char[]!", "std::encoding::base64").IsOptional().IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base64Alphabet*", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_len", symbols.NewBaseTypeBuilder("usz", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_len", symbols.NewBaseTypeBuilder("usz!", "std::encoding::base64").IsOptional().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_buffer", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base64Alphabet*", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_buffer", symbols.NewBaseTypeBuilder("char[]!", "std::encoding::base64").IsOptional().IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base64Alphabet*", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("Base64Encoder*!", "std::encoding::base64").IsOptional().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithTypeIdentifier("Base64Encoder").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Base64Encoder", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("int", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_len", symbols.NewBaseTypeBuilder("usz", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithTypeIdentifier("Base64Encoder").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Base64Encoder", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewBaseTypeBuilder("usz!", "std::encoding::base64").IsOptional().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithTypeIdentifier("Base64Encoder").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Base64Encoder", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void!", "std::encoding::base64").IsOptional().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithTypeIdentifier("Base64Decoder").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Base64Decoder", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("int", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_len", symbols.NewBaseTypeBuilder("usz!", "std::encoding::base64").IsOptional().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithTypeIdentifier("Base64Decoder").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Base64Decoder", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode", symbols.NewBaseTypeBuilder("usz!", "std::encoding::base64").IsOptional().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithTypeIdentifier("Base64Decoder").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Base64Decoder", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char[]", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("check_alphabet", symbols.NewBaseTypeBuilder("void!", "std::encoding::base64").IsOptional().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("int", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithoutSourceCode().Build())

	// Define module std::encoding::csv
	module = moduleCollection["std::encoding::csv"]
	module.AddStruct(symbols.NewStructBuilder("CsvReader", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithStructMember("stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithStructMember("separator", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("CsvRow", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithStructMember("list", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithStructMember("row", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::encoding::csv").IsOptional().Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvRow").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvRow", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvRow").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvRow", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_col", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvRow").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvRow", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("col", symbols.NewBaseTypeBuilder("usz", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvReader", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("separator", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_new_row", symbols.NewTypeBuilder("CsvRow!", "std::encoding::csv").IsOptional().Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvReader", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_row", symbols.NewTypeBuilder("CsvRow!", "std::encoding::csv").IsOptional().Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvReader", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_temp_row", symbols.NewTypeBuilder("CsvRow!", "std::encoding::csv").IsOptional().Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvReader", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvRow").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvRow", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("skip_row", symbols.NewBaseTypeBuilder("void!", "std::encoding::csv").IsOptional().Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvReader", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CsvReader.@each_row", symbols.NewBaseTypeBuilder("void!", "std::encoding::csv").IsOptional().Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvReader", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("rows", symbols.NewBaseTypeBuilder("int", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(String[] row)", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::encoding
	module = moduleCollection["std::encoding"]
	module.AddFault(symbols.NewFaultBuilder("DecodingFailure", "", "std::encoding", "<stdlib-path>/encoding/encoding.c3").WithConstant(symbols.NewFaultConstantBuilder("INVALID_CHARACTER", "std::encoding", "../../../assets/c3c/lib/std/encoding/encoding.c3").WithFaultName("DecodingFailure").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_PADDING", "std::encoding", "../../../assets/c3c/lib/std/encoding/encoding.c3").WithFaultName("DecodingFailure").Build()).Build())

	// Define module std::encoding::hex
	module = moduleCollection["std::encoding::hex"]
	module.AddVariable(symbols.NewVariableBuilder("HEXALPHABET", symbols.NewTypeBuilder("char[*]", "std::encoding::hex").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).AddVariable(symbols.NewVariableBuilder("HEXREVERSE", symbols.NewTypeBuilder("char[*]", "std::encoding::hex").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).AddFunction(symbols.NewFunctionBuilder("encode_buffer", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char[]", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_buffer", symbols.NewBaseTypeBuilder("char[]!", "std::encoding::hex").IsOptional().IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char[]", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char[]", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode", symbols.NewBaseTypeBuilder("char[]!", "std::encoding::hex").IsOptional().IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char[]", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_new", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char[]", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_temp", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char[]", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_new", symbols.NewBaseTypeBuilder("char[]!", "std::encoding::hex").IsOptional().IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char[]", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_temp", symbols.NewBaseTypeBuilder("char[]!", "std::encoding::hex").IsOptional().IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char[]", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_len", symbols.NewBaseTypeBuilder("usz", "std::encoding::hex").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::encoding::hex").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_bytes", symbols.NewBaseTypeBuilder("usz", "std::encoding::hex").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char[]", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char[]", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_len", symbols.NewBaseTypeBuilder("usz", "std::encoding::hex").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::encoding::hex").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_bytes", symbols.NewBaseTypeBuilder("usz!", "std::encoding::hex").IsOptional().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char[]", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char[]", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build())

	// Define module std::encoding::json
	module = moduleCollection["std::encoding::json"]
	module.AddStruct(symbols.NewStructBuilder("JsonContext", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("line", symbols.NewBaseTypeBuilder("uint", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("token", symbols.NewTypeBuilder("JsonTokenType", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("last_string", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("last_number", symbols.NewBaseTypeBuilder("double", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("current", symbols.NewBaseTypeBuilder("char", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("skip_comments", symbols.NewBaseTypeBuilder("bool", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("reached_end", symbols.NewBaseTypeBuilder("bool", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("pushed_back", symbols.NewBaseTypeBuilder("bool", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("JsonTokenType", "", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NO_TOKEN", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LBRACE", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LBRACKET", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("COMMA", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("COLON", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RBRACE", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RBRACKET", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("STRING", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NUMBER", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TRUE", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FALSE", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NULL", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EOF", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).Build()).AddFault(symbols.NewFaultBuilder("JsonParsingError", "", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithConstant(symbols.NewFaultConstantBuilder("EOF", "std::encoding::json", "../../../assets/c3c/lib/std/encoding/json.c3").WithFaultName("JsonParsingError").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNEXPECTED_CHARACTER", "std::encoding::json", "../../../assets/c3c/lib/std/encoding/json.c3").WithFaultName("JsonParsingError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_ESCAPE_SEQUENCE", "std::encoding::json", "../../../assets/c3c/lib/std/encoding/json.c3").WithFaultName("JsonParsingError").Build()).WithConstant(symbols.NewFaultConstantBuilder("DUPLICATE_MEMBERS", "std::encoding::json", "../../../assets/c3c/lib/std/encoding/json.c3").WithFaultName("JsonParsingError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_NUMBER", "std::encoding::json", "../../../assets/c3c/lib/std/encoding/json.c3").WithFaultName("JsonParsingError").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("parse_string", symbols.NewTypeBuilder("Object*!", "std::collections::object").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_parse_string", symbols.NewTypeBuilder("Object*!", "std::collections::object").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse", symbols.NewTypeBuilder("Object*!", "std::collections::object").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_parse", symbols.NewTypeBuilder("Object*!", "std::collections::object").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_from_token", symbols.NewTypeBuilder("Object*!", "std::collections::object").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("token", symbols.NewTypeBuilder("JsonTokenType", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_any", symbols.NewTypeBuilder("Object*!", "std::collections::object").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lex_number", symbols.NewTypeBuilder("JsonTokenType!", "std::encoding::json").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_map", symbols.NewTypeBuilder("Object*!", "std::collections::object").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_array", symbols.NewTypeBuilder("Object*!", "std::collections::object").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pushback", symbols.NewBaseTypeBuilder("void", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_next", symbols.NewBaseTypeBuilder("char!", "std::encoding::json").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("advance", symbols.NewTypeBuilder("JsonTokenType!", "std::encoding::json").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("match", symbols.NewBaseTypeBuilder("void!", "std::encoding::json").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_expected", symbols.NewBaseTypeBuilder("void!", "std::encoding::json").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("token", symbols.NewTypeBuilder("JsonTokenType", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lex_string", symbols.NewTypeBuilder("JsonTokenType!", "std::encoding::json").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::adler32
	module = moduleCollection["std::hash::adler32"]
	module.AddVariable(symbols.NewVariableBuilder("ADLER_CONST", symbols.NewTypeBuilder("uint", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).AddStruct(symbols.NewStructBuilder("Adler32", "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithStructMember("a", symbols.NewBaseTypeBuilder("uint", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithStructMember("b", symbols.NewBaseTypeBuilder("uint", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithTypeIdentifier("Adler32").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Adler32", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("updatec", symbols.NewBaseTypeBuilder("void", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithTypeIdentifier("Adler32").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Adler32", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithTypeIdentifier("Adler32").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Adler32", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::hash::adler32").IsUnsizedCollection().Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewBaseTypeBuilder("uint", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithTypeIdentifier("Adler32").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Adler32", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewBaseTypeBuilder("uint", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::hash::adler32").IsUnsizedCollection().Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::crc32
	module = moduleCollection["std::hash::crc32"]
	module.AddVariable(symbols.NewVariableBuilder("CRC32_TABLE", symbols.NewTypeBuilder("uint[256]", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).AddStruct(symbols.NewStructBuilder("Crc32", "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithStructMember("result", symbols.NewBaseTypeBuilder("uint", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithTypeIdentifier("Crc32").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Crc32", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("uint", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("updatec", symbols.NewBaseTypeBuilder("void", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithTypeIdentifier("Crc32").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Crc32", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithTypeIdentifier("Crc32").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Crc32", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::hash::crc32").IsUnsizedCollection().Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewBaseTypeBuilder("uint", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithTypeIdentifier("Crc32").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Crc32", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewBaseTypeBuilder("uint", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::hash::crc32").IsUnsizedCollection().Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::crc64
	module = moduleCollection["std::hash::crc64"]
	module.AddVariable(symbols.NewVariableBuilder("CRC64_TABLE", symbols.NewTypeBuilder("ulong[256]", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).AddStruct(symbols.NewStructBuilder("Crc64", "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithStructMember("result", symbols.NewBaseTypeBuilder("ulong", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithTypeIdentifier("Crc64").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Crc64", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("uint", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("updatec", symbols.NewBaseTypeBuilder("void", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithTypeIdentifier("Crc64").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Crc64", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithTypeIdentifier("Crc64").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Crc64", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::hash::crc64").IsUnsizedCollection().Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewBaseTypeBuilder("ulong", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithTypeIdentifier("Crc64").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Crc64", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewBaseTypeBuilder("ulong", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::hash::crc64").IsUnsizedCollection().Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::fnv32a
	module = moduleCollection["std::hash::fnv32a"]
	module.AddVariable(symbols.NewVariableBuilder("FNV32A_MUL", symbols.NewTypeBuilder("", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).AddVariable(symbols.NewVariableBuilder("FNV32A_START", symbols.NewTypeBuilder("", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("Fnv32a", "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::hash::fnv32a").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithArgument(symbols.NewVariableBuilder("h", symbols.NewTypeBuilder("", "").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithTypeIdentifier("Fnv32a").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Fnv32a", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithTypeIdentifier("Fnv32a").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Fnv32a", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::hash::fnv32a").IsUnsizedCollection().Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Fnv32a.update_char", symbols.NewBaseTypeBuilder("void", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Fnv32a", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewBaseTypeBuilder("uint", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::hash::fnv32a").IsUnsizedCollection().Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::fnv64a
	module = moduleCollection["std::hash::fnv64a"]
	module.AddVariable(symbols.NewVariableBuilder("FNV64A_MUL", symbols.NewTypeBuilder("", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).AddVariable(symbols.NewVariableBuilder("FNV64A_START", symbols.NewTypeBuilder("", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("Fnv64a", "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::hash::fnv64a").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithArgument(symbols.NewVariableBuilder("h", symbols.NewTypeBuilder("", "").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithTypeIdentifier("Fnv64a").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Fnv64a", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithTypeIdentifier("Fnv64a").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Fnv64a", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::hash::fnv64a").IsUnsizedCollection().Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Fnv64a.update_char", symbols.NewBaseTypeBuilder("void", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Fnv64a", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewBaseTypeBuilder("ulong", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::hash::fnv64a").IsUnsizedCollection().Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::hmac
	module = moduleCollection["std::hash::hmac"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"HashAlg": symbols.NewGenericParameter("HashAlg", "std::hash::hmac", "<stdlib-path>/hash/hmac.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("IPAD", symbols.NewTypeBuilder("", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).AddVariable(symbols.NewVariableBuilder("OPAD", symbols.NewTypeBuilder("", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).AddStruct(symbols.NewStructBuilder("Hmac", "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithStructMember("a", symbols.NewGenericTypeBuilder("HashAlg", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("HashAlg", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithStructMember("b", symbols.NewGenericTypeBuilder("HashAlg", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("char[]", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char[]", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("message", symbols.NewBaseTypeBuilder("char[]", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pbkdf2", symbols.NewBaseTypeBuilder("void", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithArgument(symbols.NewVariableBuilder("pw", symbols.NewBaseTypeBuilder("char[]", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("salt", symbols.NewBaseTypeBuilder("char[]", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("iterations", symbols.NewBaseTypeBuilder("uint", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("output", symbols.NewBaseTypeBuilder("char[]", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithTypeIdentifier("Hmac").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Hmac", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char[]", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithTypeIdentifier("Hmac").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Hmac", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewBaseTypeBuilder("char[]", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithTypeIdentifier("Hmac").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Hmac", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@derive", symbols.NewTypeBuilder("", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithArgument(symbols.NewVariableBuilder("hmac_start", symbols.NewTypeBuilder("Hmac*", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("salt", symbols.NewBaseTypeBuilder("char[]", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("iterations", symbols.NewBaseTypeBuilder("uint", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("out", symbols.NewBaseTypeBuilder("char[]", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::hash::sha1
	module = moduleCollection["std::hash::sha1"]
	module.AddVariable(symbols.NewVariableBuilder("BLOCK_BYTES", symbols.NewTypeBuilder("", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).AddVariable(symbols.NewVariableBuilder("HASH_BYTES", symbols.NewTypeBuilder("", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).AddStruct(symbols.NewStructBuilder("Long16", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithStructMember("c", symbols.NewBaseTypeBuilder("char[]", "std::hash::sha1").IsUnsizedCollection().Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithStructMember("l", symbols.NewBaseTypeBuilder("uint[16]", "std::hash::sha1").IsCollectionWithSize(16).Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Sha1", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithStructMember("state", symbols.NewBaseTypeBuilder("uint[5]", "std::hash::sha1").IsCollectionWithSize(5).Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithStructMember("count", symbols.NewBaseTypeBuilder("uint[2]", "std::hash::sha1").IsCollectionWithSize(2).Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithStructMember("buffer", symbols.NewBaseTypeBuilder("char[]", "std::hash::sha1").IsUnsizedCollection().Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("HmacSha1", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithResolvesToType(symbols.NewTypeBuilder("Hmac", "std::hash::hmac").WithGenericArguments(symbols.NewTypeBuilder("Sha1", "std::hash::sha1").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("hmac", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithResolvesTo("hmac::hash(<Sha1, HASH_BYTES, BLOCK_BYTES>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("pbkdf2", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithResolvesTo("hmac::pbkdf2(<Sha1, HASH_BYTES, BLOCK_BYTES>)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("char[]", "std::hash::sha1").IsUnsizedCollection().Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::hash::sha1").IsUnsizedCollection().Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithTypeIdentifier("Sha1").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sha1", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithTypeIdentifier("Sha1").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sha1", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::hash::sha1").IsUnsizedCollection().Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewBaseTypeBuilder("char[]", "std::hash::sha1").IsUnsizedCollection().Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithTypeIdentifier("Sha1").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sha1", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("blk", symbols.NewTypeBuilder("", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("blk0", symbols.NewTypeBuilder("", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("r0", symbols.NewTypeBuilder("", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("wref", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("r1", symbols.NewTypeBuilder("", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("wref", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("r2", symbols.NewTypeBuilder("", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("wref", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("r3", symbols.NewTypeBuilder("", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("wref", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("r4", symbols.NewTypeBuilder("", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("wref", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sha1_transform", symbols.NewBaseTypeBuilder("void", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("state", symbols.NewBaseTypeBuilder("uint*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::sha256
	module = moduleCollection["std::hash::sha256"]
	module.AddVariable(symbols.NewVariableBuilder("BLOCK_SIZE", symbols.NewTypeBuilder("", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).AddVariable(symbols.NewVariableBuilder("HASH_SIZE", symbols.NewTypeBuilder("", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).AddVariable(symbols.NewVariableBuilder("K", symbols.NewTypeBuilder("uint[64]", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).AddStruct(symbols.NewStructBuilder("Sha256", "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithStructMember("state", symbols.NewBaseTypeBuilder("uint[8]", "std::hash::sha256").IsCollectionWithSize(8).Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithStructMember("bitcount", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithStructMember("buffer", symbols.NewBaseTypeBuilder("char[]", "std::hash::sha256").IsUnsizedCollection().Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("HmacSha256", "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithResolvesToType(symbols.NewTypeBuilder("Hmac", "std::hash::hmac").WithGenericArguments(symbols.NewTypeBuilder("Sha256", "std::hash::sha256").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("hmac", "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithResolvesTo("hmac::hash(<Sha256, HASH_SIZE, BLOCK_SIZE>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("pbkdf2", "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithResolvesTo("hmac::pbkdf2(<Sha256, HASH_SIZE, BLOCK_SIZE>)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@rotr", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@ch", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@maj", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@_sigma0", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@_sigma1", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@sigma0", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@sigma1", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("char[]", "std::hash::sha256").IsUnsizedCollection().Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::hash::sha256").IsUnsizedCollection().Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithTypeIdentifier("Sha256").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sha256", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithTypeIdentifier("Sha256").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sha256", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::hash::sha256").IsUnsizedCollection().Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewBaseTypeBuilder("char[]", "std::hash::sha256").IsUnsizedCollection().Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithTypeIdentifier("Sha256").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sha256", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sha256_transform", symbols.NewBaseTypeBuilder("void", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("state", symbols.NewBaseTypeBuilder("uint*", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddVariable(symbols.NewVariableBuilder("WRITER_BITS", symbols.NewTypeBuilder("int", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).AddStruct(symbols.NewStructBuilder("BitReader", "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("reader", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("bits", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("len", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("BitWriter", "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("writer", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("bits", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("len", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitReader", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("byte_reader", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitReader", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_bits", symbols.NewBaseTypeBuilder("char!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitReader", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("nbits", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("byte_writer", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flush", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_bits", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("bits", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("nbits", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("File", "std::io", "<stdlib-path>/io/file.c3").WithStructMember("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io", "<stdlib-path>/io/file.c3").WithoutSourceCode().Build())

	// Define module std::io::file
	module = moduleCollection["std::io::file"]
	module.AddFunction(symbols.NewFunctionBuilder("open", symbols.NewTypeBuilder("File!", "std::io").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("open_path", symbols.NewTypeBuilder("File!", "std::io").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_handle", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_file", symbols.NewBaseTypeBuilder("bool", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_size", symbols.NewBaseTypeBuilder("usz!", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("delete", symbols.NewBaseTypeBuilder("void!", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reopen", symbols.NewBaseTypeBuilder("void!", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seek", symbols.NewBaseTypeBuilder("usz!", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("isz", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("seek_mode", symbols.NewTypeBuilder("Seek", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewBaseTypeBuilder("void!", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewBaseTypeBuilder("void!", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eof", symbols.NewBaseTypeBuilder("bool", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz!", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::io::file").IsUnsizedCollection().Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("usz!", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::io::file").IsUnsizedCollection().Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char!", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load_buffer", symbols.NewBaseTypeBuilder("char[]!", "std::io::file").IsOptional().IsUnsizedCollection().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::io::file").IsUnsizedCollection().Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load_new", symbols.NewBaseTypeBuilder("char[]!", "std::io::file").IsOptional().IsUnsizedCollection().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load_temp", symbols.NewBaseTypeBuilder("char[]!", "std::io::file").IsOptional().IsUnsizedCollection().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("save", symbols.NewBaseTypeBuilder("void!", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::io::file").IsUnsizedCollection().Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flush", symbols.NewBaseTypeBuilder("void!", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddVariable(symbols.NewVariableBuilder("PRINTF_NTOA_BUFFER_SIZE", symbols.NewTypeBuilder("int", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).AddStruct(symbols.NewStructBuilder("Formatter", "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("void*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("out_fn", symbols.NewTypeBuilder("OutputFn", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("flags", symbols.NewTypeBuilder("PrintFlags", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("width", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("prec", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("idx", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("first_fault", symbols.NewBaseTypeBuilder("anyfault", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("PrintFlags", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("zeropad", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("left", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("plus", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("space", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("hash", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("uppercase", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("precision", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FloatType", "std::io", "<stdlib-path>/io/formatter.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("double", "std::io").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("OutputFn", "std::io", "<stdlib-path>/io/formatter.c3").WithResolvesTo("fn void!(void* buffer, char c)").WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("PrintFault", "", "std::io", "<stdlib-path>/io/formatter.c3").WithConstant(symbols.NewFaultConstantBuilder("BUFFER_EXCEEDED", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("PrintFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("INTERNAL_BUFFER_EXCEEDED", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("PrintFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_FORMAT", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("PrintFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("NOT_ENOUGH_ARGUMENTS", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("PrintFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_ARGUMENT", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("PrintFault").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("is_struct_with_default_print", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("struct_to_format", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("ReflectedParam").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ReflectedParam", "std::core::runtime").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printf", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("out_fn", symbols.NewTypeBuilder("OutputFn", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("void*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print_with_function", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewTypeBuilder("Printable", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_str", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("any", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_null_fn", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("void*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@report_fault", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@wrap_bad", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("vprintf", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("anys", symbols.NewBaseTypeBuilder("any[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddVariable(symbols.NewVariableBuilder("XDIGITS_H", symbols.NewTypeBuilder("char[16]", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).AddVariable(symbols.NewVariableBuilder("XDIGITS_L", symbols.NewTypeBuilder("char[16]", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).AddEnum(symbols.NewEnumBuilder("FloatFormatting", "", "std::io", "<stdlib-path>/io/formatter_private.c3").WithEnumerator(symbols.NewEnumeratorBuilder("FLOAT", "<stdlib-path>/io/formatter_private.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("FloatFormatting").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EXPONENTIAL", "<stdlib-path>/io/formatter_private.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("FloatFormatting").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ADAPTIVE", "<stdlib-path>/io/formatter_private.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("FloatFormatting").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HEX", "<stdlib-path>/io/formatter_private.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("FloatFormatting").Build()).Build()).AddFault(symbols.NewFaultBuilder("FormattingFault", "", "std::io", "<stdlib-path>/io/formatter_private.c3").WithConstant(symbols.NewFaultConstantBuilder("BAD_FORMAT", "std::io", "../../../assets/c3c/lib/std/io/formatter_private.c3").WithFaultName("FormattingFault").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("Formatter.first_err", symbols.NewTypeBuilder("", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewBaseTypeBuilder("anyfault", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("adjust", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int_from_any", symbols.NewBaseTypeBuilder("uint128!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("any", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("is_neg", symbols.NewBaseTypeBuilder("bool*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float_from_any", symbols.NewTypeBuilder("FloatType!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("any", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("simple_atoi", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("char*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("maxlen", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("len_ptr", symbols.NewBaseTypeBuilder("usz*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_substr", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pad", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("width", symbols.NewBaseTypeBuilder("isz", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("isz", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fmt_u", symbols.NewBaseTypeBuilder("char*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("char*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_chars", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("etoa", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ftoa", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gtoa", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atoa", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("floatformat", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatting", symbols.NewTypeBuilder("FloatFormatting", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ntoa", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("uint128", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("negative", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ntoa_format", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("negative", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ntoa_any", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("any", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_char", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("any", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_reverse", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printf_parse_format_field", symbols.NewBaseTypeBuilder("int!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("args_ptr", symbols.NewBaseTypeBuilder("any*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("args_len", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("args_index_ptr", symbols.NewBaseTypeBuilder("usz*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("format_ptr", symbols.NewBaseTypeBuilder("char*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("format_len", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("index_ptr", symbols.NewBaseTypeBuilder("usz*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddVariable(symbols.NewVariableBuilder("stderr_file", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).AddVariable(symbols.NewVariableBuilder("stdin_file", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).AddVariable(symbols.NewVariableBuilder("stdout_file", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).AddStruct(symbols.NewStructBuilder("BufferData", "std::io", "<stdlib-path>/io/io.c3").WithStructMember("buffer", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/io.c3").WithStructMember("written", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("Seek", "", "std::io", "<stdlib-path>/io/io.c3").WithEnumerator(symbols.NewEnumeratorBuilder("SET", "<stdlib-path>/io/io.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Seek").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CURSOR", "<stdlib-path>/io/io.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Seek").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("END", "<stdlib-path>/io/io.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Seek").Build()).Build()).AddFault(symbols.NewFaultBuilder("IoError", "", "std::io", "<stdlib-path>/io/io.c3").WithConstant(symbols.NewFaultConstantBuilder("ALREADY_EXISTS", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("BUSY", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("CANNOT_READ_DIR", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("DIR_NOT_EMPTY", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("EOF", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_CANNOT_DELETE", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_IS_DIR", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_IS_PIPE", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_NOT_DIR", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_NOT_FOUND", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_NOT_VALID", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("GENERAL_ERROR", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("ILLEGAL_ARGUMENT", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INCOMPLETE_WRITE", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INTERRUPTED", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_POSITION", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_PUSHBACK", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("NAME_TOO_LONG", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("NOT_SEEKABLE", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("NO_PERMISSION", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("OUT_OF_SPACE", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("OVERFLOW", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("READ_ONLY", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("SYMLINK_FAILED", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("TOO_MANY_DESCRIPTORS", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNEXPECTED_EOF", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNKNOWN_ERROR", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNSUPPORTED_OPERATION", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).WithConstant(symbols.NewFaultConstantBuilder("WOULD_BLOCK", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("IoError").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("readline", symbols.NewTypeBuilder("String!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("treadline", symbols.NewTypeBuilder("String!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprint", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("out", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprintf", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("out", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprintfn", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("out", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprintn", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("out", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printn", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eprint", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eprintn", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_putstream_fn", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("void*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_putchar_fn", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("void*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printf", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printfn", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eprintf", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eprintfn", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bprintf", symbols.NewBaseTypeBuilder("char[]!", "std::io").IsOptional().IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_buffer_fn", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("void*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putchar", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putchar", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_chdir", symbols.NewBaseTypeBuilder("void!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/chdir.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/chdir.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_fopen", symbols.NewBaseTypeBuilder("void*!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_remove", symbols.NewBaseTypeBuilder("void!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_freopen", symbols.NewBaseTypeBuilder("void*!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewBaseTypeBuilder("void*", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fseek", symbols.NewBaseTypeBuilder("void!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewBaseTypeBuilder("void*", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("isz", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("seek_mode", symbols.NewTypeBuilder("Seek", "std::io").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_ftell", symbols.NewBaseTypeBuilder("usz!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fwrite", symbols.NewBaseTypeBuilder("usz!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::io::os").IsUnsizedCollection().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fputc", symbols.NewBaseTypeBuilder("void!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fread", symbols.NewBaseTypeBuilder("usz!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::io::os").IsUnsizedCollection().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("file_open_errno", symbols.NewBaseTypeBuilder("anyfault", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("file_seek_errno", symbols.NewBaseTypeBuilder("anyfault", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").IsMacro().WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddVariable(symbols.NewVariableBuilder("native_fclose_fn", symbols.NewTypeBuilder("FcloseFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_fopen_fn", symbols.NewTypeBuilder("FopenFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_fputc_fn", symbols.NewTypeBuilder("FputcFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_fread_fn", symbols.NewTypeBuilder("FreadFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_freopen_fn", symbols.NewTypeBuilder("FreopenFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_fseek_fn", symbols.NewTypeBuilder("FseekFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_ftell_fn", symbols.NewTypeBuilder("FtellFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_fwrite_fn", symbols.NewTypeBuilder("FwriteFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_remove_fn", symbols.NewTypeBuilder("RemoveFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddDef(symbols.NewDefBuilder("FcloseFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void!(void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FopenFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void*!(String, String)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FputcFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void!(int, void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FreadFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn usz!(void*, char[] buffer)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FreopenFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void*!(void*, String, String)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FseekFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void!(void*, isz, Seek)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FtellFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn usz!(void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FwriteFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn usz!(void*, char[] buffer)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("RemoveFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void!(String)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fopen", symbols.NewBaseTypeBuilder("void*!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_remove", symbols.NewBaseTypeBuilder("void!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_freopen", symbols.NewBaseTypeBuilder("void*!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewBaseTypeBuilder("void*", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fseek", symbols.NewBaseTypeBuilder("void!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewBaseTypeBuilder("void*", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("isz", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("seek_mode", symbols.NewTypeBuilder("Seek", "std::io").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_ftell", symbols.NewBaseTypeBuilder("usz!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fwrite", symbols.NewBaseTypeBuilder("usz!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::io::os").IsUnsizedCollection().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fread", symbols.NewBaseTypeBuilder("usz!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::io::os").IsUnsizedCollection().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fputc", symbols.NewBaseTypeBuilder("void!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_stat", symbols.NewBaseTypeBuilder("void!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("stat", symbols.NewTypeBuilder("Stat*", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_file_size", symbols.NewBaseTypeBuilder("usz!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_file_size", symbols.NewBaseTypeBuilder("usz!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_file_size", symbols.NewBaseTypeBuilder("usz!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_file_or_dir_exists", symbols.NewBaseTypeBuilder("bool", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_is_file", symbols.NewBaseTypeBuilder("bool", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_is_dir", symbols.NewBaseTypeBuilder("bool", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("getcwd", symbols.NewTypeBuilder("String!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/getcwd.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/getcwd.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_ls", symbols.NewTypeBuilder("PathList!", "std::io::path").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").WithArgument(symbols.NewVariableBuilder("dir", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_dirs", symbols.NewBaseTypeBuilder("bool", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_symlinks", symbols.NewBaseTypeBuilder("bool", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_ls", symbols.NewTypeBuilder("PathList!", "std::io::path").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").WithArgument(symbols.NewVariableBuilder("dir", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_dirs", symbols.NewBaseTypeBuilder("bool", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_symlinks", symbols.NewBaseTypeBuilder("bool", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_mkdir", symbols.NewBaseTypeBuilder("bool!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/mkdir.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/mkdir.c3").Build()).WithArgument(symbols.NewVariableBuilder("permissions", symbols.NewTypeBuilder("MkdirPermissions", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/mkdir.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_rmdir", symbols.NewBaseTypeBuilder("bool!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/rmdir.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/rmdir.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_rmtree", symbols.NewBaseTypeBuilder("void!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/rmtree.c3").WithArgument(symbols.NewVariableBuilder("dir", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::os", "<stdlib-path>/io/os/rmtree.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_rmtree", symbols.NewBaseTypeBuilder("void!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/rmtree.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::os", "<stdlib-path>/io/os/rmtree.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_temp_directory", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_temp_directory", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_temp_directory", symbols.NewTypeBuilder("Path!", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io::path
	module = moduleCollection["std::io::path"]
	module.AddVariable(symbols.NewVariableBuilder("DEFAULT_PATH_ENV", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddVariable(symbols.NewVariableBuilder("PREFERRED_SEPARATOR", symbols.NewTypeBuilder("char", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddVariable(symbols.NewVariableBuilder("PREFERRED_SEPARATOR_POSIX", symbols.NewTypeBuilder("char", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddVariable(symbols.NewVariableBuilder("PREFERRED_SEPARATOR_WIN32", symbols.NewTypeBuilder("char", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddVariable(symbols.NewVariableBuilder("RESERVED_PATH_CHAR_POSIX", symbols.NewTypeBuilder("bool[256]", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddVariable(symbols.NewVariableBuilder("RESERVED_PATH_CHAR_WIN32", symbols.NewTypeBuilder("bool[256]", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddStruct(symbols.NewStructBuilder("PathImp", "std::io::path", "<stdlib-path>/io/path.c3").WithStructMember("path_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithStructMember("env", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Path", "std::io::path", "<stdlib-path>/io/path.c3").WithResolvesToType(symbols.NewTypeBuilder("PathImp", "std::io::path").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("PathList", "std::io::path", "<stdlib-path>/io/path.c3").WithResolvesToType(symbols.NewTypeBuilder("List", "std::collections::list").WithGenericArguments(symbols.NewTypeBuilder("Path", "std::io::path").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("PathWalker", "std::io::path", "<stdlib-path>/io/path.c3").WithResolvesTo("fn bool! (Path, bool is_dir, void*)").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("MkdirPermissions", "", "std::io::path", "<stdlib-path>/io/path.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NORMAL", "<stdlib-path>/io/path.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MkdirPermissions").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("USER_ONLY", "<stdlib-path>/io/path.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MkdirPermissions").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("USER_AND_ADMIN", "<stdlib-path>/io/path.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MkdirPermissions").Build()).Build()).AddEnum(symbols.NewEnumBuilder("PathEnv", "", "std::io::path", "<stdlib-path>/io/path.c3").WithEnumerator(symbols.NewEnumeratorBuilder("WIN32", "<stdlib-path>/io/path.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PathEnv").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("POSIX", "<stdlib-path>/io/path.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PathEnv").Build()).Build()).AddFault(symbols.NewFaultBuilder("PathResult", "", "std::io::path", "<stdlib-path>/io/path.c3").WithConstant(symbols.NewFaultConstantBuilder("INVALID_PATH", "std::io::path", "../../../assets/c3c/lib/std/io/path.c3").WithFaultName("PathResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("NO_PARENT", "std::io::path", "../../../assets/c3c/lib/std/io/path.c3").WithFaultName("PathResult").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("new_cwd", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getcwd", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_dir", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_file", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("file_size", symbols.NewBaseTypeBuilder("usz!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exists", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_cwd", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tgetcwd", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("chdir", symbols.NewBaseTypeBuilder("void!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_directory", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("delete", symbols.NewBaseTypeBuilder("void!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_separator", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_posix_separator", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_win32_separator", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ls", symbols.NewTypeBuilder("PathList!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("dir", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_dirs", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_symlinks", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_ls", symbols.NewTypeBuilder("PathList!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("dir", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_dirs", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_symlinks", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_ls", symbols.NewTypeBuilder("PathList!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("dir", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_dirs", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_symlinks", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mkdir", symbols.NewBaseTypeBuilder("bool!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("recursive", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("permissions", symbols.NewTypeBuilder("MkdirPermissions", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rmdir", symbols.NewBaseTypeBuilder("bool!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rmtree", symbols.NewBaseTypeBuilder("void!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_new", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_win32_wstring", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_windows", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_posix", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("p2", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_append", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_append", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tappend", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("start_of_base_name", symbols.NewBaseTypeBuilder("usz", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_absolute", symbols.NewBaseTypeBuilder("bool!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("absolute", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_absolute", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("basename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dirname", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_extension", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("extension", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("extension", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("volume_name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("volume_name_len", symbols.NewBaseTypeBuilder("usz!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parent", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("normalize", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path_str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("as_zstr", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("root_directory", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("walk", symbols.NewBaseTypeBuilder("bool!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("w", symbols.NewTypeBuilder("PathWalker", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("void*", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_suffix", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_with_allocator", symbols.NewBaseTypeBuilder("void", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_reserved_win32_path_char", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_reserved_path_char", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddVariable(symbols.NewVariableBuilder("MAX_VARS", symbols.NewTypeBuilder("char[*]", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).AddDef(symbols.NewDefBuilder("ReadByteFn", "std::io", "<stdlib-path>/io/stream.c3").WithResolvesTo("fn char!()").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("available", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_instream", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_outstream", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_any", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("ref", symbols.NewBaseTypeBuilder("any", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_any", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("ref", symbols.NewBaseTypeBuilder("any", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_all", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_new_fully", symbols.NewBaseTypeBuilder("char[]!", "std::io").IsOptional().IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_all", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@read_using_read_byte", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_using_read_byte", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte_using_write", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@write_byte_using_write", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@read_byte_using_read", symbols.NewBaseTypeBuilder("char!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte_using_read", symbols.NewBaseTypeBuilder("char!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_using_write_byte", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@write_using_write_byte", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pushback_using_seek", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@pushback_using_seek", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_to", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("in", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_through_buffer", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("in", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_varint", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("x_ptr", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_varint", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_be_ushort", symbols.NewBaseTypeBuilder("ushort!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_be_short", symbols.NewBaseTypeBuilder("short!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_be_short", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("ushort", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_be_uint", symbols.NewBaseTypeBuilder("uint!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_be_int", symbols.NewBaseTypeBuilder("int!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_be_int", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_be_ulong", symbols.NewBaseTypeBuilder("ulong!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_be_long", symbols.NewBaseTypeBuilder("long!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_be_long", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("ulong", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_be_uint128", symbols.NewBaseTypeBuilder("uint128!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_be_int128", symbols.NewBaseTypeBuilder("int128!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_be_int128", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("uint128", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_tiny_bytearray", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_tiny_bytearray", symbols.NewBaseTypeBuilder("char[]!", "std::io").IsOptional().IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_short_bytearray", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_short_bytearray", symbols.NewBaseTypeBuilder("char[]!", "std::io").IsOptional().IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wrap_bytes", symbols.NewTypeBuilder("ByteReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("ReadBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("wrapped_stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("read_idx", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("write_idx", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("WriteBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("wrapped_stream", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("index", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("ReadBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ReadBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("wrapped_stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ReadBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ReadBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ReadBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ReadBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("refill", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ReadBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("WriteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WriteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("wrapped_stream", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WriteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WriteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flush", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WriteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WriteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WriteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_pending", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WriteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("max_read", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("read_idx", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("write_idx", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("has_last", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeBuilder("ByteBuffer*!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_read", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeBuilder("ByteBuffer*!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_read", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_with_buffer", symbols.NewTypeBuilder("ByteBuffer*!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pushback_byte", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seek", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("isz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("seek", symbols.NewTypeBuilder("Seek", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("available", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("grow", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ByteBuffer.shrink", symbols.NewTypeBuilder("", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("ByteReader", "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithStructMember("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithStructMember("index", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("ByteReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pushback_byte", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seek", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("isz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("seek", symbols.NewTypeBuilder("Seek", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_to", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("writer", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("available", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("ByteWriter", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithStructMember("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithStructMember("index", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeBuilder("ByteWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeBuilder("ByteWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_with_buffer", symbols.NewTypeBuilder("ByteWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ensure_capacity", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_from", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("reader", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("LimitReader", "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithStructMember("wrapped_stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithStructMember("limit", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("LimitReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithTypeIdentifier("LimitReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LimitReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithArgument(symbols.NewVariableBuilder("wrapped_stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithArgument(symbols.NewVariableBuilder("limit", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithTypeIdentifier("LimitReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LimitReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithTypeIdentifier("LimitReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LimitReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithTypeIdentifier("LimitReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LimitReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("available", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithTypeIdentifier("LimitReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LimitReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("MultiReader", "std::io", "<stdlib-path>/io/stream/multireader.c3").WithStructMember("readers", symbols.NewTypeBuilder("InStream[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").WithStructMember("index", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeBuilder("MultiReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").WithTypeIdentifier("MultiReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").Build()).WithArgument(symbols.NewVariableBuilder("readers", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeBuilder("MultiReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").WithTypeIdentifier("MultiReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").Build()).WithArgument(symbols.NewVariableBuilder("readers", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").WithTypeIdentifier("MultiReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").WithTypeIdentifier("MultiReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").WithTypeIdentifier("MultiReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("MultiWriter", "std::io", "<stdlib-path>/io/stream/multiwriter.c3").WithStructMember("writers", symbols.NewTypeBuilder("OutStream[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_init", symbols.NewTypeBuilder("MultiWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").WithTypeIdentifier("MultiWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("writers", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_init", symbols.NewTypeBuilder("MultiWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").WithTypeIdentifier("MultiWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("writers", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").WithTypeIdentifier("MultiWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").WithTypeIdentifier("MultiWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").WithTypeIdentifier("MultiWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiWriter", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("Scanner", "std::io", "<stdlib-path>/io/stream/scanner.c3").WithStructMember("wrapped_stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithStructMember("buf", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithStructMember("pattern_idx", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithStructMember("read_idx", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Scanner", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flush", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Scanner", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewBaseTypeBuilder("void!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Scanner", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scan", symbols.NewBaseTypeBuilder("char[]!", "std::io").IsOptional().IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Scanner", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("pattern", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Scanner.find", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Scanner", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("pattern", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Scanner.refill", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Scanner", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Scanner", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Scanner", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("TeeReader", "std::io", "<stdlib-path>/io/stream/teereader.c3").WithStructMember("r", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").WithStructMember("w", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tee_reader", symbols.NewTypeBuilder("TeeReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").WithArgument(symbols.NewVariableBuilder("r", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("w", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("TeeReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").WithTypeIdentifier("TeeReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TeeReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("w", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").WithTypeIdentifier("TeeReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TeeReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char!", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").WithTypeIdentifier("TeeReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TeeReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").Build()).WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddVariable(symbols.NewVariableBuilder("BSD_FLAVOR_SIG", symbols.NewTypeBuilder("bool", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("BUFSIZ", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCKS_PER_SEC", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EOF", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXIT_FAILURE", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXIT_SUCCESS", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILENAME_MAX", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("FOPEN_MAX", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("HAS_MALLOC_SIZE", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("RAND_MAX", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SEEK_CUR", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SEEK_END", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SEEK_SET", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGABRT", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGALRM", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGBUS", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGCHLD", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGCONT", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGFPE", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGHUP", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGILL", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGINT", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGKILL", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGPIPE", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGQUIT", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGSEGV", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGSTOP", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGSYS", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGTERM", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGTRAP", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGTSTP", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGURG", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("STDERR_FD", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("STDIN_FD", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("STDOUT_FD", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFBLK", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFCHR", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFDIR", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFIFO", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFLNK", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFMT", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFREG", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFSOCK", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IRUSR", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_ISGID", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_ISUID", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_ISVTX", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IWUSR", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IXUSR", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("TIME_UTC", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("_IOFBF", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("_IOLBF", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("_IONBF", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stderr", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stderrp", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stdin", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stdinp", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stdout", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stdoutp", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddStruct(symbols.NewStructBuilder("DivResult", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("quot", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("rem", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("LongDivResult", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("quot", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("rem", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TimeSpec", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("s", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("ns", symbols.NewBaseTypeBuilder("ulong", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("ns", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Tm", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_sec", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_min", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_hour", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_mday", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_mon", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_year", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_wday", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_yday", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_isdst", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_gmtoff", symbols.NewTypeBuilder("TimeOffset", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_zone", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_nsec", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CFile", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("void*", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Clock_t", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewTypeBuilder("CULong", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CompareFunction", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("fn int(void*, void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Fd", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Fpos_t", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("JmpBuf", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uptr[]", "libc").IsUnsizedCollection().Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Off_t", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewTypeBuilder("", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("SeekIndex", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("SignalFunction", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("fn void(CInt)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("TerminateFunction", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("fn void()").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("TimeOffset", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Time_t", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewTypeBuilder("", "libc").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Errno", "libc", "<stdlib-path>/libc/libc.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewTypeBuilder("Errno", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("e", symbols.NewTypeBuilder("Errno", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("abort", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("abs", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("asctime", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timeptr", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("asctime_r", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timeptr", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atexit", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("TerminateFunction", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atof", symbols.NewBaseTypeBuilder("double", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atoi", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atoll", symbols.NewTypeBuilder("CLongLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bsearch", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("items", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", symbols.NewTypeBuilder("CompareFunction", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("count", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clearerr", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clock", symbols.NewTypeBuilder("Clock_t", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("difftime", symbols.NewBaseTypeBuilder("double", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("time1", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("time2", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("div", symbols.NewTypeBuilder("DivResult", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("numer", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("denom", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exit", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fclose", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fdopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("feof", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ferror", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fflush", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fgetc", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fgets", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("string", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fgetpos", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("pos", symbols.NewTypeBuilder("Fpos_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fileno", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprintf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fputc", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fputs", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fread", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("nmemb", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("freopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fscanf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fseek", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewTypeBuilder("SeekIndex", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("whence", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fsetpos", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("pos", symbols.NewTypeBuilder("Fpos_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ftell", symbols.NewTypeBuilder("SeekIndex", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fwrite", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("nmemb", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getc", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getchar", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getenv", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gets", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gmtime", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gmtime_r", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("isatty", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("labs", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ldiv", symbols.NewTypeBuilder("LongDivResult", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("number", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("denom", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("localtime", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("localtime_r", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("longjmp", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("JmpBuf*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memchr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memcmp", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buf1", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf2", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("count", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memcpy", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memmove", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memset", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mktime", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("perror", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putc", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putchar", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("puts", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("qsort", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("items", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", symbols.NewTypeBuilder("CompareFunction", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("raise", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("signal", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rand", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("isz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("nbyte", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rename", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("old_name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rewind", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scanf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setbuf", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setenv", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("overwrite", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setjmp", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("JmpBuf*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setvbuf", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("signal", symbols.NewTypeBuilder("SignalFunction", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("sig", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", symbols.NewTypeBuilder("SignalFunction", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("snprintf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewTypeBuilder("", "").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sprintf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("srand", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("uint", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sscanf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strcat", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strchr", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strcmp", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strcoll", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strcspn", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strcpy", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strerror", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("errn", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strftime", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("maxsize", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeptr", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strlen", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strncat", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strncmp", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strncpy", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stroul", symbols.NewTypeBuilder("CULong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("endptr", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strpbrk", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strspn", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strptime", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("tm", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strrchr", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strstr", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("haystack", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strtod", symbols.NewBaseTypeBuilder("double", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("endptr", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strtof", symbols.NewBaseTypeBuilder("float", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("endptr", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strtok", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("delim", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strtol", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("endptr", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strtul", symbols.NewTypeBuilder("CULong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("endptr", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strxfrm", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("system", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("timegm", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timeptr", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tmpnam", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ungetc", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unsetenv", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("isz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("count", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fmemopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getline", symbols.NewBaseTypeBuilder("isz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("linep", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("linecapp", symbols.NewBaseTypeBuilder("usz*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("timespec_get", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ts", symbols.NewTypeBuilder("TimeSpec*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("nanosleep", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("req", symbols.NewTypeBuilder("TimeSpec*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("remaining", symbols.NewTypeBuilder("TimeSpec*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ctime", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("time", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_usable_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("aligned_alloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("align", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fcntl", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_setjmp", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setjmp", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_longjmp", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("longjmp", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("aligned_alloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("align", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("aligned_alloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("align", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_usable_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("longjmp", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("JmpBuf*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setjmp", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("JmpBuf*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("count", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memcpy", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memmove", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memset", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fseek", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewTypeBuilder("SeekIndex", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("whence", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("freopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fwrite", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("nmemb", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fread", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("nmemb", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fclose", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fflush", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fputc", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fgets", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fgetc", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("feof", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putc", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putchar", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("puts", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("libc_S_ISTYPE", symbols.NewBaseTypeBuilder("bool", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewTypeBuilder("", "").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module libc::errno
	module = moduleCollection["libc::errno"]
	module.AddVariable(symbols.NewVariableBuilder("E2BIG", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EACCES", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EADDRINUSE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EADDRNOTAVAIL", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EAFNOSUPPORT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EAGAIN", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EALREADY", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EAUTH", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADARCH", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADEXEC", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADF", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADMACHO", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADMSG", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADRPC", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBUSY", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECANCELED", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECHILD", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNABORTED", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNREFUSED", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNRESET", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDEADLK", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDESTADDRREQ", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDEVERR", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDOM", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDQUOT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EEXIST", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EFAULT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EFBIG", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EFTYPE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EHOSTDOWN", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EHOSTUNREACH", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EIDRM", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EILSEQ", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINPROGRESS", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINTR", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINVAL", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EIO", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EISCONN", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EISDIR", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ELOOP", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMFILE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMLINK", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMSGSIZE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMULTIHOP", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENAMETOOLONG", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENEEDAUTH", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETDOWN", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETRESET", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETUNREACH", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENFILE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOATTR", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOBUFS", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENODATA", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENODEV", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOENT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOEXEC", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOLCK", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOLINK", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOMEM", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOMSG", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOPROTOOPT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOSPC", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOSR", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOSTR", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOSYS", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTBLK", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTCONN", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTDIR", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTEMPTY", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTSOCK", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTSUP", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTTY", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENXIO", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EOPNOTSUPP", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EOVERFLOW", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPERM", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPFNOSUPPORT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPIPE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROCLIM", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROCUNAVAIL", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROGMISMATCH", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROGUNAVAIL", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROTO", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROTONOSUPPORT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROTOTYPE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPWROFF", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERANGE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EROFS", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERPCMISMATCH", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESHLIBVERS", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESHUTDOWN", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESOCKTNOSUPPORT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESPIPE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESRCH", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESTALE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ETIME", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ETIMEDOUT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ETXTBSY", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EUSERS", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EWOULDBLOCK", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXDEV", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("OK", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddFunction(symbols.NewFunctionBuilder("to_timespec", symbols.NewTypeBuilder("TimeSpec", "libc").Build(), "libc", "<stdlib-path>/libc/libc_extra.c3").WithTypeIdentifier("NanoDuration").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "libc", "<stdlib-path>/libc/libc_extra.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_timespec", symbols.NewTypeBuilder("TimeSpec", "libc").Build(), "libc", "<stdlib-path>/libc/libc_extra.c3").WithTypeIdentifier("Duration").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Duration", "std::time").Build(), "libc", "<stdlib-path>/libc/libc_extra.c3").Build()).WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddStruct(symbols.NewStructBuilder("Stat", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_dev", symbols.NewTypeBuilder("Dev_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_mode", symbols.NewTypeBuilder("Mode_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_nlink", symbols.NewTypeBuilder("Nlink_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_ino", symbols.NewTypeBuilder("Ino_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_uid", symbols.NewTypeBuilder("Uid_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_gid", symbols.NewTypeBuilder("Gid_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_rdev", symbols.NewTypeBuilder("Dev_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_atimespec", symbols.NewTypeBuilder("TimeSpec", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_mtimespec", symbols.NewTypeBuilder("TimeSpec", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_ctimespec", symbols.NewTypeBuilder("TimeSpec", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_birthtimespec", symbols.NewTypeBuilder("TimeSpec", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_size", symbols.NewTypeBuilder("Off_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_blocks", symbols.NewTypeBuilder("Blkcnt_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_blocksize", symbols.NewTypeBuilder("Blksize_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_flags", symbols.NewBaseTypeBuilder("uint", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_gen", symbols.NewBaseTypeBuilder("uint", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_lspare", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_qspare", symbols.NewBaseTypeBuilder("long[2]", "libc").IsCollectionWithSize(2).Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blkcnt_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blksize_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Dev_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ino_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Mode_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Nlink_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "libc").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stat", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("stat", symbols.NewTypeBuilder("Stat*", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sysctl", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("namelen", symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldp", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldlenp", symbols.NewBaseTypeBuilder("usz*", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("newp", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("newlen", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithoutSourceCode().Build())

	// Define module libc::os
	module = moduleCollection["libc::os"]
	module.AddVariable(symbols.NewVariableBuilder("ERRNO_DEFAULT", symbols.NewTypeBuilder("", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).AddVariable(symbols.NewVariableBuilder("_errno_c3", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).AddFunction(symbols.NewFunctionBuilder("__errno_location", symbols.NewBaseTypeBuilder("int*", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewBaseTypeBuilder("void", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__error", symbols.NewBaseTypeBuilder("int*", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewBaseTypeBuilder("void", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewBaseTypeBuilder("void", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_get_errno", symbols.NewBaseTypeBuilder("void", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("result", symbols.NewBaseTypeBuilder("int*", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_set_errno", symbols.NewBaseTypeBuilder("void", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewBaseTypeBuilder("void", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddStruct(symbols.NewStructBuilder("Stat", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_dev", symbols.NewTypeBuilder("Dev_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_ino", symbols.NewTypeBuilder("Ino_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_mode", symbols.NewTypeBuilder("Mode_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_nlink", symbols.NewTypeBuilder("Nlink_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_uid", symbols.NewTypeBuilder("Uid_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_gid", symbols.NewTypeBuilder("Gid_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_rdev", symbols.NewTypeBuilder("Dev_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("__pad1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_size", symbols.NewTypeBuilder("Off_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_blksize", symbols.NewTypeBuilder("Blksize_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("__pad2", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_blocks", symbols.NewTypeBuilder("Blkcnt_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_atime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_atime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_mtime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_mtime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_ctime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_ctime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("__unused", symbols.NewTypeBuilder("CInt[2]", "std::core::cinterop").IsCollectionWithSize(2).Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blkcnt64_t", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blkcnt_t", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blksize_t", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithResolvesToType(symbols.NewTypeBuilder("", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Dev_t", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ino64_t", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ino_t", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Mode_t", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Nlink_t", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithResolvesToType(symbols.NewTypeBuilder("", "libc").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stat", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").Build()).WithArgument(symbols.NewVariableBuilder("stat", symbols.NewTypeBuilder("Stat*", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs_conf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddStruct(symbols.NewStructBuilder("Stat", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_dev", symbols.NewTypeBuilder("Dev_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_ino", symbols.NewTypeBuilder("Ino_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_mode", symbols.NewTypeBuilder("Mode_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_nlink", symbols.NewTypeBuilder("Nlink_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_uid", symbols.NewTypeBuilder("Uid_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_gid", symbols.NewTypeBuilder("Gid_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_rdev", symbols.NewTypeBuilder("Dev_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("__pad1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_size", symbols.NewTypeBuilder("Off_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_blksize", symbols.NewTypeBuilder("Blksize_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("__pad2", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_blocks", symbols.NewTypeBuilder("Blkcnt_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_atime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_atime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_mtime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_mtime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_ctime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_ctime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("__unused", symbols.NewTypeBuilder("CInt[2]", "std::core::cinterop").IsCollectionWithSize(2).Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blkcnt64_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blkcnt_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blksize_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesToType(symbols.NewTypeBuilder("", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Dev_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ino64_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ino_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Mode_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Nlink_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesToType(symbols.NewTypeBuilder("", "libc").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stat", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("stat", symbols.NewTypeBuilder("Stat*", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs_conf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddVariable(symbols.NewVariableBuilder("RTLD_GLOBAL", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("RTLD_LAZY", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("RTLD_LOCAL", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("RTLD_NODELETE", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("RTLD_NOW", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("SA_ONSTACK", symbols.NewTypeBuilder("CUInt", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("SA_RESETHAND", symbols.NewTypeBuilder("CUInt", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("SA_RESTART", symbols.NewTypeBuilder("CUInt", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("SA_SIGINFO", symbols.NewTypeBuilder("CUInt", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddStruct(symbols.NewStructBuilder("Sigaction", "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_handler", symbols.NewTypeBuilder("SignalFunction", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_sigaction", symbols.NewTypeBuilder("SigActionFunction", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_flags", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_mask", symbols.NewTypeBuilder("Sigset_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_flags", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_restorer", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Stack_t", "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ss_sp", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ss_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ss_flags", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ss_flags", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ss_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Gid_t", "libc", "<stdlib-path>/libc/os/posix.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Pid_t", "libc", "<stdlib-path>/libc/os/posix.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("SigActionFunction", "libc", "<stdlib-path>/libc/os/posix.c3").WithResolvesTo("fn void(CInt, void*, void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Sigset_t", "libc", "<stdlib-path>/libc/os/posix.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong[16]", "libc").IsCollectionWithSize(16).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Uid_t", "libc", "<stdlib-path>/libc/os/posix.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "libc").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("recv", symbols.NewBaseTypeBuilder("isz", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("length", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("send", symbols.NewBaseTypeBuilder("isz", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("length", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dlopen", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dlclose", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dlsym", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("symbol", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sigaltstack", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("ss", symbols.NewTypeBuilder("Stack_t*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ss", symbols.NewTypeBuilder("Stack_t*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sigaction", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("signum", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("action", symbols.NewTypeBuilder("Sigaction*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldaction", symbols.NewTypeBuilder("Sigaction*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build())

	// Define module libc::termios
	module = moduleCollection["libc::termios"]
	module.AddVariable(symbols.NewVariableBuilder("B0", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B1000000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B110", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B115200", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B1152000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B1200", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B134", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B150", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B1500000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B1800", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B19200", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B200", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B2000000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B230400", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B2400", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B2500000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B300", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B3000000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B3500000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B38400", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B4000000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B460800", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B4800", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B50", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B500000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B57600", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B576000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B600", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B75", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B921600", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B9600", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("BRKINT", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCAL", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CREAD", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CS5", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CS6", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CS7", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CS8", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CSIZE", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CSTOPB", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECHO", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECHOE", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECHOK", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECHONL", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("HUPCL", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ICANON", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ICRNL", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IEXTEN", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IGNBRK", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IGNCR", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IGNPAR", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAXBEL", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("INLCR", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("INPCK", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ISIG", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ISTRIP", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IUCLC", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IUTF8", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IXANY", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IXOFF", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IXON", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("NCCS", symbols.NewTypeBuilder("CInt", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("NOFLSH", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("OCRNL", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("OFDEL", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("OFILL", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("OLCUC", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ONLCR", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ONLRET", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ONOCR", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("OPOST", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("PARENB", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("PARMRK", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("PARODD", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCIFLUSH", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCIOFF", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCIOFLUSH", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCION", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCOFLUSH", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCOOFF", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCOON", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCSADRAIN", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCSAFLUSH", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCSANOW", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TOSTOP", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VDISCARD", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VEOF", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VEOL", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VEOL2", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VERASE", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VINTR", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VKILL", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VLNEXT", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VMIN", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VQUIT", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VREPRINT", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VSTART", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VSTOP", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VSUSP", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VSWTC", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VT0", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VT1", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VTDLY", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VTIME", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VWERASE", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddStruct(symbols.NewStructBuilder("Termios", "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("c_iflag", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("c_oflag", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("c_cflag", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("c_lflag", symbols.NewTypeBuilder("Tcflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("c_line", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("c_cc", symbols.NewTypeBuilder("Cc[]", "libc::termios").IsUnsizedCollection().Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("c_ispeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("c_ospeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Cc", "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("char", "libc::termios").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Speed", "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Tcactions", "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Tcflags", "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcgetattr", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcsetattr", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("optional_actions", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcsendbreak", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcdrain", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcflush", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("queue_selector", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcflow", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("action", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cfgetospeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cfgetispeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cfsetospeed", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cfsetispeed", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddStruct(symbols.NewStructBuilder("SystemInfo", "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwOemId", symbols.NewBaseTypeBuilder("uint", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("wProcessorArchitecture", symbols.NewBaseTypeBuilder("ushort", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("wReserved", symbols.NewBaseTypeBuilder("ushort", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwPageSize", symbols.NewBaseTypeBuilder("uint", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("lpMinimumApplicationAddress", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("lpMaximumApplicationAddress", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwActiveProcessorMask", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwNumberOfProcessors", symbols.NewBaseTypeBuilder("uint", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwProcessorType", symbols.NewBaseTypeBuilder("uint", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwAllocationGranularity", symbols.NewBaseTypeBuilder("uint", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("wProcessorLevel", symbols.NewBaseTypeBuilder("ushort", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("wProcessorRevision", symbols.NewBaseTypeBuilder("ushort", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("close", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_close").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("difftime", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_difftime64").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("fdopen", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_fdopen").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("fileno", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_fileno").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("fseek", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_fseeki64").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ftell", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_ftelli64").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("isatty", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_isatty").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("mktime", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_mktime64").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("timegm", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_mkgmtime64").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__acrt_iob_func", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_close", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_difftime64", symbols.NewBaseTypeBuilder("double", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("time1", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("time2", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_fdopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_fileno", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_fseeki64", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_ftelli64", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_get_timezone", symbols.NewTypeBuilder("Errno", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("timezone", symbols.NewTypeBuilder("CLong*", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_gmtime64_s", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("buf", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_isatty", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_localtime64_s", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("buf", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_mkgmtime64", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("timeptr", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_mktime64", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("timeptr", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_msize", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_read", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer_size", symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_setjmp", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("JmpBuf*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("frameptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_wfopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_wfreopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_write", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("count", symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_wremove", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("recv", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("Win32_SOCKET", "std::os::win32").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("send", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("Win32_SOCKET", "std::os::win32").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_system_info", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("SystemInfo*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("localtime_r", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setjmp", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("JmpBuf*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gmtime_r", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("isz", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("isz", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("count", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module libc::termios
	module = moduleCollection["libc::termios"]
	module.AddStruct(symbols.NewStructBuilder("Termios", "libc::termios", "<stdlib-path>/libc/termios.c3").WithStructMember("dummy", symbols.NewBaseTypeBuilder("void*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Cc", "libc::termios", "<stdlib-path>/libc/termios.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("char", "libc::termios").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Speed", "libc::termios", "<stdlib-path>/libc/termios.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Tcflags", "libc::termios", "<stdlib-path>/libc/termios.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sendBreak", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("drain", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flush", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("queue_selector", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flow", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("action", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getOSpeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getISpeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setOSpeed", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setISpeed", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getAttr", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setAttr", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("optional_actions", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcgetattr", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcsetattr", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("optional_actions", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcsendbreak", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcdrain", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcflush", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("queue_selector", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcflow", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("action", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cfgetospeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cfgetispeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cfsetospeed", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cfsetispeed", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sendBreak", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("drain", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flush", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("queue_selector", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flow", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("action", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getOSpeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getISpeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setOSpeed", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setISpeed", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getAttr", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setAttr", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("optional_actions", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math
	module = moduleCollection["std::math"]
	module.AddVariable(symbols.NewVariableBuilder("DIV_1_SQRT2", symbols.NewTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DIV_2_PI", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DIV_2_SQRTPI", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DIV_PI", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_DEC_DIGITS", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_DENORM_MIN", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_DIG", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_EPSILON", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MANT_DIG", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MAX", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MAX_10_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MAX_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MIN", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MIN_10_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MIN_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("E", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_DEC_DIGITS", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_DENORM_MIN", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_DIG", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_EPSILON", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MANT_DIG", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MAX", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MAX_10_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MAX_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MIN", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MIN_10_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MIN_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_DEC_DIGITS", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_DENORM_MIN", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_DIG", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_EPSILON", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MANT_DIG", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MAX", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MAX_10_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MAX_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MIN", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MIN_10_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MIN_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("LN10", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("LN2", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG10E", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG2E", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI_2", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI_4", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("QUAD_MANT_DIG", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("SQRT2", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddDef(symbols.NewDefBuilder("COMPLEXF_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("complex::IDENTITY(<float>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("COMPLEX_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("complex::IDENTITY(<double>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Complex", "std::math", "<stdlib-path>/math/math.c3").WithResolvesToType(symbols.NewTypeBuilder("Complex", "std::math").WithGenericArguments(symbols.NewBaseTypeBuilder("double", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Complexf", "std::math", "<stdlib-path>/math/math.c3").WithResolvesToType(symbols.NewTypeBuilder("Complex", "std::math").WithGenericArguments(symbols.NewBaseTypeBuilder("float", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX2F_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::IDENTITY2(<float>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX2_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::IDENTITY2(<double>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX3F_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::IDENTITY3(<float>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX3_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::IDENTITY3(<double>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX4F_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::IDENTITY4(<float>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX4_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::IDENTITY4(<double>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix2", "std::math", "<stdlib-path>/math/math.c3").WithResolvesToType(symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").WithGenericArguments(symbols.NewBaseTypeBuilder("double", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix2f", "std::math", "<stdlib-path>/math/math.c3").WithResolvesToType(symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").WithGenericArguments(symbols.NewBaseTypeBuilder("float", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix3", "std::math", "<stdlib-path>/math/math.c3").WithResolvesToType(symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").WithGenericArguments(symbols.NewBaseTypeBuilder("double", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix3f", "std::math", "<stdlib-path>/math/math.c3").WithResolvesToType(symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").WithGenericArguments(symbols.NewBaseTypeBuilder("float", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix4", "std::math", "<stdlib-path>/math/math.c3").WithResolvesToType(symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").WithGenericArguments(symbols.NewBaseTypeBuilder("double", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix4f", "std::math", "<stdlib-path>/math/math.c3").WithResolvesToType(symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").WithGenericArguments(symbols.NewBaseTypeBuilder("float", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("QUATERNIONF_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("quaternion::IDENTITY(<float>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("QUATERNION_IDENTITY", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("quaternion::IDENTITY(<double>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Quaternion", "std::math", "<stdlib-path>/math/math.c3").WithResolvesToType(symbols.NewTypeBuilder("Quaternion", "std::math").WithGenericArguments(symbols.NewBaseTypeBuilder("double", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Quaternionf", "std::math", "<stdlib-path>/math/math.c3").WithResolvesToType(symbols.NewTypeBuilder("Quaternion", "std::math").WithGenericArguments(symbols.NewBaseTypeBuilder("float", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("matrix4_ortho", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::ortho(<double>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("matrix4_perspective", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::perspective(<double>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("matrix4f_ortho", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::ortho(<float>)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("matrix4f_perspective", "std::math", "<stdlib-path>/math/math.c3").WithResolvesTo("matrix::perspective(<float>)").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("RoundingMode", "int", "std::math", "<stdlib-path>/math/math.c3").WithEnumerator(symbols.NewEnumeratorBuilder("TOWARD_ZERO", "<stdlib-path>/math/math.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("RoundingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TO_NEAREST", "<stdlib-path>/math/math.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("RoundingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TOWARD_INFINITY", "<stdlib-path>/math/math.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("RoundingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TOWARD_NEG_INFINITY", "<stdlib-path>/math/math.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("RoundingMode").Build()).Build()).AddFault(symbols.NewFaultBuilder("MathError", "", "std::math", "<stdlib-path>/math/math.c3").WithConstant(symbols.NewFaultConstantBuilder("OVERFLOW", "std::math", "../../../assets/c3c/lib/std/math/math.c3").WithFaultName("MathError").Build()).Build()).AddFault(symbols.NewFaultBuilder("MatrixError", "", "std::math", "<stdlib-path>/math/math.c3").WithConstant(symbols.NewFaultConstantBuilder("MATRIX_INVERSE_DOESNT_EXIST", "std::math", "../../../assets/c3c/lib/std/math/math.c3").WithFaultName("MatrixError").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("deg_to_rad", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("abs", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_approx", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("eps", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_approx_rel", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("eps", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sign", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atan2", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sincos_ref", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sinp", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("cosp", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sincos", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atan", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atanh", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acos", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acosh", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("asin", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("asinh", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ceil", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clamp", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("lower", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("upper", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copysign", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mag", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sgn", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cos", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cosec", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cosech", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cosh", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cotan", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cotanh", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exp", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exp2", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("floor", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fma", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hypot", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ln", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log2", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log10", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("max", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("min", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("muladd", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("nearbyint", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pow", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("frexp", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("e", symbols.NewBaseTypeBuilder("int*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("signbit", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rint", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("round", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("round_to_decimals", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("decimal_places", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("roundeven", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sec", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sech", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sin", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sinh", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sqr", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sqrt", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tan", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_finite", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_nan", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_inf", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tanh", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trunc", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lerp", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reflect", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("normalize", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("select", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("then_value", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("else_value", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.ceil", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.clamp", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("lower", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("upper", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.copysign", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mag", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sgn", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.floor", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.fma", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.muladd", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.nearbyint", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.pow", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.rint", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.round", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.roundeven", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.trunc", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].sum", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].product", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].max", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].min", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].ceil", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].clamp", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("lower", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("upper", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].copysign", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mag", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sgn", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].fma", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].floor", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].nearbyint", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].pow", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].rint", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].round", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].roundeven", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].trunc", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].dot", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].length", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].distance", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].normalize", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].lerp", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].reflect", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].equals", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_le", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.ceil", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.clamp", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("lower", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("upper", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.copysign", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mag", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sgn", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.floor", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.fma", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.muladd", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.nearbyint", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.pow", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.rint", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.round", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.roundeven", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.trunc", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].sum", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].product", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].max", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].min", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].ceil", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].clamp", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("lower", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("upper", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].copysign", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mag", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sgn", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].floor", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].fma", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].nearbyint", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].pow", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].rint", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].round", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].roundeven", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].trunc", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].dot", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].length", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].distance", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].normalize", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].reflect", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].lerp", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].equals", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_le", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_le", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].sum", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].product", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].and", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].or", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].xor", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].max", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].min", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].dot", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_le", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].sum", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].product", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].and", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].or", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].xor", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].max", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].min", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].dot", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_le", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].sum", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].product", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].and", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].or", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].xor", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].max", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].min", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].dot", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_le", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].sum", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].product", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].and", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].or", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].xor", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].max", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].min", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].dot", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_le", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].sum", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].product", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].and", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].or", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].xor", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].max", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].min", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].dot", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_le", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].sum", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].product", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].and", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].or", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].xor", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].max", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].min", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_le", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].sum", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].product", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].and", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].or", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].xor", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].max", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].min", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].dot", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_le", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].sum", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].product", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].and", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].or", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].xor", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].max", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].min", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].dot", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_le", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].sum", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].product", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].and", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].or", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].xor", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].max", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].min", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].dot", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_le", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].sum", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].product", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].and", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].or", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].xor", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].max", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].min", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].dot", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_le", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].sum", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].product", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].and", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].or", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].xor", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].max", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].min", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].dot", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.sat_add", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.sat_sub", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.sat_mul", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.sat_shl", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.overflow_add", symbols.NewBaseTypeBuilder("char!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.overflow_sub", symbols.NewBaseTypeBuilder("char!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.overflow_mul", symbols.NewBaseTypeBuilder("char!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.sat_add", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.sat_sub", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.sat_mul", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.sat_shl", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.overflow_add", symbols.NewBaseTypeBuilder("ichar!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.overflow_sub", symbols.NewBaseTypeBuilder("ichar!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.overflow_mul", symbols.NewBaseTypeBuilder("ichar!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.sat_add", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.sat_sub", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.sat_mul", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.sat_shl", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.overflow_add", symbols.NewBaseTypeBuilder("ushort!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.overflow_sub", symbols.NewBaseTypeBuilder("ushort!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.overflow_mul", symbols.NewBaseTypeBuilder("ushort!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.sat_add", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.sat_sub", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.sat_mul", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.sat_shl", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.overflow_add", symbols.NewBaseTypeBuilder("short!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.overflow_sub", symbols.NewBaseTypeBuilder("short!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.overflow_mul", symbols.NewBaseTypeBuilder("short!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.sat_add", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.sat_sub", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.sat_mul", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.sat_shl", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.overflow_add", symbols.NewBaseTypeBuilder("uint!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.overflow_sub", symbols.NewBaseTypeBuilder("uint!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.overflow_mul", symbols.NewBaseTypeBuilder("uint!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.sat_add", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.sat_sub", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.sat_mul", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.sat_shl", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.overflow_add", symbols.NewBaseTypeBuilder("int!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.overflow_sub", symbols.NewBaseTypeBuilder("int!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.overflow_mul", symbols.NewBaseTypeBuilder("int!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.sat_add", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.sat_sub", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.sat_mul", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.sat_shl", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.overflow_add", symbols.NewBaseTypeBuilder("ulong!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.overflow_sub", symbols.NewBaseTypeBuilder("ulong!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.overflow_mul", symbols.NewBaseTypeBuilder("ulong!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.sat_add", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.sat_sub", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.sat_mul", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.sat_shl", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.overflow_add", symbols.NewBaseTypeBuilder("long!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.overflow_sub", symbols.NewBaseTypeBuilder("long!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.overflow_mul", symbols.NewBaseTypeBuilder("long!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.sat_add", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.sat_sub", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.sat_mul", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.sat_shl", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.overflow_add", symbols.NewBaseTypeBuilder("uint128!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.overflow_sub", symbols.NewBaseTypeBuilder("uint128!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.overflow_mul", symbols.NewBaseTypeBuilder("uint128!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.sat_add", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.sat_sub", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.sat_mul", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.sat_shl", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.overflow_add", symbols.NewBaseTypeBuilder("int128!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.overflow_sub", symbols.NewBaseTypeBuilder("int128!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.overflow_mul", symbols.NewBaseTypeBuilder("int128!", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_power_of_2", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_power_of_2", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals_vec", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("v1", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.high_word", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.low_word", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.word", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.set_high_word", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("double*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("u", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.set_low_word", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("double*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("u", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.set_word", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("f", symbols.NewBaseTypeBuilder("float*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("u", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scalbn", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atan", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atanf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atan2", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atan2f", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_sincos", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("double*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("double*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_sincosf", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("float*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("float*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_sincos", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("double*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("double*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_sincosf", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("float*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("float*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_tan", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_tanf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_scalbn", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_acos", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_asin", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_acosh", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_asinh", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atanh", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_acosf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_asinf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_acoshf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_asinhf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atanhf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_frexp", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("e", symbols.NewBaseTypeBuilder("int*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_frexpf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("e", symbols.NewBaseTypeBuilder("int*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("overflow_add_helper", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("overflow_sub_helper", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("overflow_mul_helper", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mul_div_helper", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.muldiv", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.muldiv", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.muldiv", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.muldiv", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.muldiv", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.muldiv", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.muldiv", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.muldiv", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_same_vector_or_scalar", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].muldiv", symbols.NewBaseTypeBuilder("char[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char[<*>]", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].muldiv", symbols.NewBaseTypeBuilder("ichar[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar[<*>]", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].muldiv", symbols.NewBaseTypeBuilder("short[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short[<*>]", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].muldiv", symbols.NewBaseTypeBuilder("ushort[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort[<*>]", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].muldiv", symbols.NewBaseTypeBuilder("int[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int[<*>]", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].muldiv", symbols.NewBaseTypeBuilder("uint[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint[<*>]", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].muldiv", symbols.NewBaseTypeBuilder("long[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long[<*>]", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].muldiv", symbols.NewBaseTypeBuilder("ulong[]", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong[<*>]", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_gcd", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lcm", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gcd", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math
	module = moduleCollection["std::math"]
	module.AddFunction(symbols.NewFunctionBuilder("__roundevenf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math_builtin.c3").WithArgument(symbols.NewVariableBuilder("f", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math_builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__roundeven", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math_builtin.c3").WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math_builtin.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::complex
	module = moduleCollection["std::math::complex"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Real": symbols.NewGenericParameter("Real", "std::math::complex", "<stdlib-path>/math/math_complex.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("IDENTITY", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGINARY", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).AddStruct(symbols.NewStructBuilder("Complex", "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithStructMember("r", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithStructMember("c", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithStructMember("v", symbols.NewGenericTypeBuilder("Real[2]", "std::math::complex").IsCollectionWithSize(2).Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.add", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.add_each", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.sub", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.sub_each", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.scale", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.mul", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.div", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.inverse", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.conjugate", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Complex.equals", symbols.NewBaseTypeBuilder("bool", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("Complex", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/math_complex.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math::easing
	module = moduleCollection["std::math::easing"]
	module.AddFunction(symbols.NewFunctionBuilder("linear_none", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("linear_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("linear_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("linear_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sine_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sine_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sine_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("circ_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("circ_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("circ_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cubic_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cubic_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cubic_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("quad_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("quad_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("quad_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("expo_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("expo_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("expo_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("back_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("back_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("back_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bounce_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bounce_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bounce_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("elastic_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("elastic_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("elastic_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sq", symbols.NewTypeBuilder("", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cube", symbols.NewTypeBuilder("", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math::easing", "<stdlib-path>/math/math_easings.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math
	module = moduleCollection["std::math"]
	module.AddStruct(symbols.NewStructBuilder("Int128bits", "std::math", "<stdlib-path>/math/math_i128.c3").WithStructMember("low", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithStructMember("high", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithStructMember("all", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__divti3", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@__udivmodti4", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__umodti3", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__udivti3", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__modti3", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__lshrti3", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__ashrti3", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__ashlti3", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__mulddi3", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__multi3", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__floattisf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__floattidf", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__floatuntisf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__floatuntidf", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__fixunsdfti", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__fixunssfti", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__fixdfti", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__fixsfti", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float_from_i128", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float_from_u128", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fixuint", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fixint", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math_i128.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math::matrix
	module = moduleCollection["std::math::matrix"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Real": symbols.NewGenericParameter("Real", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("IDENTITY2", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IDENTITY3", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IDENTITY4", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).AddStruct(symbols.NewStructBuilder("Matrix2x2", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m00", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m01", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m10", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m11", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m", symbols.NewGenericTypeBuilder("Real[4]", "std::math::matrix").IsCollectionWithSize(4).Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Matrix3x3", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m00", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m01", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m02", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m10", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m11", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m12", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m20", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m21", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m22", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m", symbols.NewGenericTypeBuilder("Real[9]", "std::math::matrix").IsCollectionWithSize(9).Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Matrix4x4", "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m00", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m01", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m02", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m03", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m10", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m11", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m12", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m13", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m20", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m21", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m22", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m23", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m30", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m31", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m32", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m33", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithStructMember("m", symbols.NewGenericTypeBuilder("Real[16]", "std::math::matrix").IsCollectionWithSize(16).Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("apply", symbols.NewGenericTypeBuilder("Real[2]", "std::math::matrix").IsCollectionWithSize(2).Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("vec", symbols.NewGenericTypeBuilder("Real[2]", "std::math::matrix").IsCollectionWithSize(2).Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("apply", symbols.NewGenericTypeBuilder("Real[3]", "std::math::matrix").IsCollectionWithSize(3).Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("vec", symbols.NewGenericTypeBuilder("Real[3]", "std::math::matrix").IsCollectionWithSize(3).Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("apply", symbols.NewGenericTypeBuilder("Real[4]", "std::math::matrix").IsCollectionWithSize(4).Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("vec", symbols.NewGenericTypeBuilder("Real[4]", "std::math::matrix").IsCollectionWithSize(4).Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mul", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mul", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mul", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("component_mul", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("component_mul", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("component_mul", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sub", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sub", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sub", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("look_at", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithArgument(symbols.NewVariableBuilder("eye", symbols.NewGenericTypeBuilder("Real[3]", "std::math::matrix").IsCollectionWithSize(3).Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", symbols.NewGenericTypeBuilder("Real[3]", "std::math::matrix").IsCollectionWithSize(3).Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("up", symbols.NewGenericTypeBuilder("Real[3]", "std::math::matrix").IsCollectionWithSize(3).Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transpose", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transpose", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transpose", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("determinant", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("determinant", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("determinant", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("adjoint", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("adjoint", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("adjoint", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("inverse", symbols.NewTypeBuilder("Matrix2x2!", "std::math::matrix").IsOptional().Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("inverse", symbols.NewTypeBuilder("Matrix3x3!", "std::math::matrix").IsOptional().Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("inverse", symbols.NewTypeBuilder("Matrix4x4!", "std::math::matrix").IsOptional().Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("translate", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Real[2]", "std::math::matrix").IsCollectionWithSize(2).Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("translate", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Real[3]", "std::math::matrix").IsCollectionWithSize(3).Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_z", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_y", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_x", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scale", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Real[2]", "std::math::matrix").IsCollectionWithSize(2).Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trace", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trace", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trace", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scale", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Real[3]", "std::math::matrix").IsCollectionWithSize(3).Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ortho", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithArgument(symbols.NewVariableBuilder("left", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("right", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("top", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("bottom", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("near", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("far", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("perspective", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithArgument(symbols.NewVariableBuilder("fov", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("aspect_ratio", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("near", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("far", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("matrix_component_mul", symbols.NewTypeBuilder("", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("matrix_add", symbols.NewTypeBuilder("", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("matrix_sub", symbols.NewTypeBuilder("", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("matrix_look_at", symbols.NewTypeBuilder("", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("eye", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("up", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/math_matrix.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("__cos", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cos.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cos.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cos.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("C0", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").Build()).AddVariable(symbols.NewVariableBuilder("C1", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").Build()).AddVariable(symbols.NewVariableBuilder("C2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").Build()).AddVariable(symbols.NewVariableBuilder("C3", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").Build()).AddFunction(symbols.NewFunctionBuilder("__cosdf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddStruct(symbols.NewStructBuilder("DoubleInternal", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").WithStructMember("f", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").WithStructMember("i", symbols.NewBaseTypeBuilder("ulong", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fmod", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("__sin", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sin.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sin.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sin.c3").Build()).WithArgument(symbols.NewVariableBuilder("iy", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sin.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("__sindf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sindf.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sindf.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("TAN_T", symbols.NewTypeBuilder("double[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tan.c3").Build()).AddFunction(symbols.NewFunctionBuilder("__tan", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tan.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tan.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tan.c3").Build()).WithArgument(symbols.NewVariableBuilder("odd", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tan.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("TANDF", symbols.NewTypeBuilder("double[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tandf.c3").Build()).AddFunction(symbols.NewFunctionBuilder("__tandf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tandf.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tandf.c3").Build()).WithArgument(symbols.NewVariableBuilder("odd", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tandf.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("PIO2_HI", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIO2_HI_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIO2_LO", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIO2_LO_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS0", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS0_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS1", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS1_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS2", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS2_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS3", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS4", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS5", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS1", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS1_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS2", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS3", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS4", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddFunction(symbols.NewFunctionBuilder("_r", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_acos", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_r_f", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_acosf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("PIO2", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIO2_HI", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIO2_LO", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS0", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS0_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS1", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS1_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS2", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS2_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS3", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS4", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS5", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS1", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS1_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS2", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS3", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS4", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddFunction(symbols.NewFunctionBuilder("_r", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_asin", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_r_f", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_asinf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("AT", symbols.NewTypeBuilder("double[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("ATANHI", symbols.NewTypeBuilder("double[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("ATANHIF", symbols.NewTypeBuilder("float[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("ATANLO", symbols.NewTypeBuilder("double[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("ATANLOF", symbols.NewTypeBuilder("float[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("ATF", symbols.NewTypeBuilder("float[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI_LO", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI_LO_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddFunction(symbols.NewFunctionBuilder("_atan", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atanf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atan2", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atan2f", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_atanh", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atanh.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atanh.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atanhf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atanh.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atanh.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_ceil", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ceil.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ceil.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_ceilf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ceil.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ceil.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_cosf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/cos.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/cos.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_cos", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/cos.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/cos.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("EXPF_INV_LN2", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXPF_LN2_HI", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXPF_LN2_LO", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXPF_P1", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXPF_P2", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXPF_P3", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXPF_P4", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_INV_LN2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_LN2_HI", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_LN2_LO", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_P1", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_P2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_P3", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_P4", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_P5", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddFunction(symbols.NewFunctionBuilder("exp", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("expf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_top12f", symbols.NewBaseTypeBuilder("uint", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_exp2f", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_exp2_specialcase", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").WithArgument(symbols.NewVariableBuilder("tmp", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).WithArgument(symbols.NewVariableBuilder("sbits", symbols.NewBaseTypeBuilder("ulong", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).WithArgument(symbols.NewVariableBuilder("ki", symbols.NewBaseTypeBuilder("ulong", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_top12d", symbols.NewBaseTypeBuilder("uint", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_exp2", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_fabs", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/fabs.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/fabs.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_fabsf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/fabs.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/fabs.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_floor", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/floor.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/floor.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_floorf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/floor.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/floor.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("frexp", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/frexp.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/frexp.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewBaseTypeBuilder("int*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/frexp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("frexpf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/frexp.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/frexp.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewBaseTypeBuilder("int*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/frexp.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("ldexp", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ldexp.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ldexp.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ldexp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ldexpf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ldexp.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ldexp.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ldexp.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("LOGF_L1", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOGF_L2", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOGF_L3", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOGF_L4", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOGF_LN2_HI", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOGF_LN2_LO", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG_L1", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG_L2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG_L3", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG_L4", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG_L5", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG_L6", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG_LN2_HI", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG_LN2_LO", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("SQRT2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("SQRT2F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddFunction(symbols.NewFunctionBuilder("log", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("logf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("LG1", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG1_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG2", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG2_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG3", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG3_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG4", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG4_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG5", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG6", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG7", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LN2_HI", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LN2_HI_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LN2_LO", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LN2_LO_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddFunction(symbols.NewFunctionBuilder("_log1p", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_log1pf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("EXP2F_POLY_ORDER", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP2F_TABLE_BITS", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP2_POLY_ORDER", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_DATA_WIDTH", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_POLY_ORDER", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_TABLE_BITS", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S1PI2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S2PI2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S3PI2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S4PI2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("TOINT", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("TOINT15", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("TOINTF", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("WANT_ROUNDING", symbols.NewTypeBuilder("bool", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__EXP2F_DATA", symbols.NewTypeBuilder("Exp2fData", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__EXP2_DATA", symbols.NewTypeBuilder("Exp2Data", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddStruct(symbols.NewStructBuilder("Exp2Data", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("invln2N", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("shift", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("negln2hiN", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("negln2loN", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("poly", symbols.NewBaseTypeBuilder("double[4]", "std::math::nolibc").IsCollectionWithSize(4).Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("exp2_shift", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("exp2_poly", symbols.NewBaseTypeBuilder("double[]", "std::math::nolibc").IsUnsizedCollection().Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("tab", symbols.NewBaseTypeBuilder("ulong[]", "std::math::nolibc").IsUnsizedCollection().Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Exp2fData", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("tab", symbols.NewBaseTypeBuilder("ulong[]", "std::math::nolibc").IsUnsizedCollection().Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("shift_scaled", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("poly", symbols.NewBaseTypeBuilder("double[]", "std::math::nolibc").IsUnsizedCollection().Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("shift", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("invln2_scaled", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("poly_scaled", symbols.NewBaseTypeBuilder("double[]", "std::math::nolibc").IsUnsizedCollection().Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__math_uflowf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("sign", symbols.NewBaseTypeBuilder("uint", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__math_uflow", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("sign", symbols.NewBaseTypeBuilder("ulong", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__math_oflowf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("sign", symbols.NewBaseTypeBuilder("uint", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__math_oflow", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("sign", symbols.NewBaseTypeBuilder("ulong", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__math_xflow", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("sign", symbols.NewTypeBuilder("", "").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("force_eval_add", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("pow", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("powf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("INIT_JK", symbols.NewTypeBuilder("int[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPIO2", symbols.NewTypeBuilder("int[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIO2", symbols.NewTypeBuilder("double[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).AddFunction(symbols.NewFunctionBuilder("__rem_pio2f", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__rem_pio2_large", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("e0", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("nx", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("prec", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__rem_pio2", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_round", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/round.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/round.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_roundf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/round.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/round.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_scalbn", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/scalbn.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/scalbn.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/scalbn.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_sinf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sin.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sin", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sin.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sin.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("sincosf", symbols.NewBaseTypeBuilder("void", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithArgument(symbols.NewVariableBuilder("sin", symbols.NewBaseTypeBuilder("float*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithArgument(symbols.NewVariableBuilder("cos", symbols.NewBaseTypeBuilder("float*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sincos", symbols.NewBaseTypeBuilder("void", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithArgument(symbols.NewVariableBuilder("sin", symbols.NewBaseTypeBuilder("double*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithArgument(symbols.NewVariableBuilder("cos", symbols.NewBaseTypeBuilder("double*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("tan", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/tan.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/tan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tanf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/tan.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/tan.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("sincos_broken", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trig.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trig.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_trunc", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trunc.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trunc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_truncf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trunc.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trunc.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::quaternion
	module = moduleCollection["std::math::quaternion"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Real": symbols.NewGenericParameter("Real", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("IDENTITY", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).AddStruct(symbols.NewStructBuilder("Quaternion", "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithStructMember("i", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithStructMember("j", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithStructMember("k", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithStructMember("l", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithStructMember("v", symbols.NewGenericTypeBuilder("Real[4]", "std::math::quaternion").IsCollectionWithSize(4).Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.add", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.add_each", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.sub", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.sub_each", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.scale", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.normalize", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("q", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.length", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("q", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.lerp", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("q1", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("q2", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.to_matrixf", symbols.NewTypeBuilder("Matrix4f", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("q", symbols.NewTypeBuilder("Quaternion*", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Quaternion.to_matrix", symbols.NewTypeBuilder("Matrix4", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("q", symbols.NewTypeBuilder("Quaternion*", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("nlerp", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithTypeIdentifier("Quaternion").WithArgument(symbols.NewVariableBuilder("q1", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("q2", symbols.NewTypeBuilder("Quaternion", "std::math").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("invert", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithTypeIdentifier("Quaternion").WithArgument(symbols.NewVariableBuilder("q", symbols.NewTypeBuilder("", "").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("slerp", symbols.NewTypeBuilder("Quaternion", "std::math").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithTypeIdentifier("Quaternion").WithArgument(symbols.NewVariableBuilder("q1", symbols.NewTypeBuilder("", "").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("q2", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mul", symbols.NewTypeBuilder("Quaternion", "std::math").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithTypeIdentifier("Quaternion").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("Quaternion", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("into_matrix", symbols.NewTypeBuilder("", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").WithArgument(symbols.NewVariableBuilder("q", symbols.NewTypeBuilder("Quaternion*", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/math_quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("default_random", symbols.NewTypeBuilder("Sfc64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).AddVariable(symbols.NewVariableBuilder("default_random_initialized", symbols.NewBaseTypeBuilder("bool", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).AddDef(symbols.NewDefBuilder("DefaultRandom", "std::math::random", "<stdlib-path>/math/math_random.c3").WithResolvesToType(symbols.NewTypeBuilder("Sfc64Random", "std::math::random").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seed_entropy", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).WithArgument(symbols.NewVariableBuilder("range", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_in_range", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("srand", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rand", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("range", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rand_in_range", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rnd", symbols.NewBaseTypeBuilder("double", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bool", symbols.NewBaseTypeBuilder("bool", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_float", symbols.NewBaseTypeBuilder("float", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_double", symbols.NewBaseTypeBuilder("double", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_random", symbols.NewBaseTypeBuilder("bool", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@long_to_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@int_to_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@short_to_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@char_to_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@random_value_to_bytes", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_default_random", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/math_random.c3").IsMacro().WithoutSourceCode().Build())

	// Define module std::math::vector
	module = moduleCollection["std::math::vector"]
	module.AddDef(symbols.NewDefBuilder("Vec2", "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("double[2]", "std::math::vector").IsCollectionWithSize(2).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Vec2f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("float[2]", "std::math::vector").IsCollectionWithSize(2).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Vec3", "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("double[3]", "std::math::vector").IsCollectionWithSize(3).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Vec3f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("float[3]", "std::math::vector").IsCollectionWithSize(3).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Vec4", "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("double[4]", "std::math::vector").IsCollectionWithSize(4).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Vec4f", "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("float[4]", "std::math::vector").IsCollectionWithSize(4).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2f.length_sq", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec2f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec3f.length_sq", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec4f.length_sq", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec4f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2.length_sq", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec2", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec3.length_sq", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec4.length_sq", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec4", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2f.distance_sq", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec2f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("Vec2f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec3f.distance_sq", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec4f.distance_sq", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec4f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("Vec4f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2.distance_sq", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec2", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("Vec2", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec3.distance_sq", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec4.distance_sq", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec4", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("Vec4", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2f.transform", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec2f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("Matrix4f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2f.rotate", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec2f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2f.angle", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec2f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("Vec2f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2.transform", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec2", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("Matrix4", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2.rotate", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec2", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2.angle", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec2", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("Vec2", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2f.clamp_mag", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec2f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec3f.clamp_mag", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec4f.clamp_mag", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec4f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec2.clamp_mag", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec2", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec3.clamp_mag", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Vec4.clamp_mag", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec4", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("towards", symbols.NewTypeBuilder("Vec2f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec2f").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec2f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", symbols.NewTypeBuilder("Vec2f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("towards", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("towards", symbols.NewTypeBuilder("Vec4f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec4f").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec4f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", symbols.NewTypeBuilder("Vec4f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("towards", symbols.NewTypeBuilder("Vec2", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec2", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", symbols.NewTypeBuilder("Vec2", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("towards", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("towards", symbols.NewTypeBuilder("Vec4", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec4", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", symbols.NewTypeBuilder("Vec4", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cross", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cross", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("perpendicular", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("perpendicular", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("barycenter", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("barycenter", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transform", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("Matrix4f", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transform", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("Matrix4", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("angle", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("angle", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("refract", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("refract", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ortho_normalize", symbols.NewBaseTypeBuilder("void", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v1", symbols.NewTypeBuilder("Vec3f*", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("Vec3f*", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ortho_normalized", symbols.NewBaseTypeBuilder("void", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v1", symbols.NewTypeBuilder("Vec3*", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("Vec3*", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("matrix4f_look_at", symbols.NewTypeBuilder("Matrix4f", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("eye", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("up", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("matrix4_look_at", symbols.NewTypeBuilder("Matrix4", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("eye", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("up", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_quat", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("q", symbols.NewTypeBuilder("Quaternionf", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_quat", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("q", symbols.NewTypeBuilder("Quaternion", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_axis", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("axis", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_axis", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("axis", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unproject", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3f").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("projection", symbols.NewTypeBuilder("Matrix4f", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("view", symbols.NewTypeBuilder("Matrix4f", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unproject", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithTypeIdentifier("Vec3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vec3", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("projection", symbols.NewTypeBuilder("Matrix4", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("view", symbols.NewTypeBuilder("Matrix4", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("towards", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clamp_magnitude", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("perpendicular3", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cross3", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v1", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transform2", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transform3", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("angle3", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v1", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ortho_normalize3", symbols.NewBaseTypeBuilder("void", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v1", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_by_quat3", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("q", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_axis_angle", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("axis", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unproject3", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("m1", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("m2", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("barycenter3", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("refract3", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/math_vector.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("MUL_LCG128", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG16", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG32", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI128", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI16", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI32", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("Lcg128Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Lcg16Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Lcg32Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Lcg64Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("MUL_MCG128", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_MCG16", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_MCG32", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_MCG64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("Mcg128Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Mcg16Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Mcg32Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Mcg64Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("ODD_PHI128", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI16", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI32", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI8", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).AddStruct(symbols.NewStructBuilder("Msws128Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state0", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state1", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl0", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl1", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Msws16Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state0", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state1", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl0", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl1", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Msws32Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state0", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state1", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl0", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl1", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Msws64Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state0", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state1", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl0", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl1", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Msws8Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state0", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state1", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl0", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl1", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws8Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws8Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws8Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws8Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws8Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws8Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws8Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("MUL_LCG128", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG16", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG32", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI128", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI16", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI32", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("Pcg128Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pcg16Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pcg32Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pcg64Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("MUL_LCG64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_MCG64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).AddFunction(symbols.NewFunctionBuilder("make_seed", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seeder", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).WithArgument(symbols.NewVariableBuilder("out_buffer", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("entropy", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("entropy", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("ODD_PHI128", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI16", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI32", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI8", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("Sfc128Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint128[4]", "std::math::random").IsCollectionWithSize(4).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Sfc16Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ushort[4]", "std::math::random").IsCollectionWithSize(4).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Sfc32Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint[4]", "std::math::random").IsCollectionWithSize(4).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Sfc64Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong[4]", "std::math::random").IsCollectionWithSize(4).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Sfc8Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("char[4]", "std::math::random").IsCollectionWithSize(4).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc128Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("sfc", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc32Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("seed", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc16Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc8Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc8Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc8Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc8Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc8Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc8Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc8Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("SIMPLE_RANDOM_ADDEND", symbols.NewTypeBuilder("long", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIMPLE_RANDOM_MASK", symbols.NewTypeBuilder("long", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIMPLE_RANDOM_MULTIPLIER", symbols.NewTypeBuilder("long", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("SimpleRandom", "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleRandom", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleRandom", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleRandom", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleRandom", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleRandom", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleRandom", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleRandom", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::uuid
	module = moduleCollection["std::math::uuid"]
	module.AddDistinct(symbols.NewDistinctBuilder("Uuid", "std::math::uuid", "<stdlib-path>/math/uuid.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("char[16]", "std::math::uuid").IsCollectionWithSize(16).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("generate", symbols.NewTypeBuilder("Uuid", "std::math::uuid").Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("generate_from_random", symbols.NewTypeBuilder("Uuid", "std::math::uuid").Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("Random", "std::math::random").Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::math::uuid").IsOptional().Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").WithTypeIdentifier("Uuid").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Uuid", "std::math::uuid").Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").WithTypeIdentifier("Uuid").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Uuid", "std::math::uuid").Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").Build()).WithoutSourceCode().Build())

	// Define module std::net
	module = moduleCollection["std::net"]
	module.AddStruct(symbols.NewStructBuilder("InetAddress", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("is_ipv6", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("a", symbols.NewBaseTypeBuilder("ushort", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("b", symbols.NewBaseTypeBuilder("ushort", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("c", symbols.NewBaseTypeBuilder("ushort", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("d", symbols.NewBaseTypeBuilder("ushort", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("e", symbols.NewBaseTypeBuilder("ushort", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("f", symbols.NewBaseTypeBuilder("ushort", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("g", symbols.NewBaseTypeBuilder("ushort", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("h", symbols.NewBaseTypeBuilder("ushort", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("ipv6", symbols.NewBaseTypeBuilder("char[16]", "std::net").IsCollectionWithSize(16).Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("uint128", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("ip6", symbols.NewBaseTypeBuilder("char[16]", "std::net").IsCollectionWithSize(16).Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("ipv6arr", symbols.NewTypeBuilder("UShortBE[8]", "std::core::bitorder").IsCollectionWithSize(8).Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("a", symbols.NewBaseTypeBuilder("char", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("b", symbols.NewBaseTypeBuilder("char", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("c", symbols.NewBaseTypeBuilder("char", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("d", symbols.NewBaseTypeBuilder("char", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("ipv4", symbols.NewBaseTypeBuilder("char[16]", "std::net").IsCollectionWithSize(16).Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("uint", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("ip4", symbols.NewBaseTypeBuilder("char[16]", "std::net").IsCollectionWithSize(16).Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("IpProtocol", "char", "std::net", "<stdlib-path>/net/inetaddr.c3").WithEnumerator(symbols.NewEnumeratorBuilder("UNSPECIFIED", "<stdlib-path>/net/inetaddr.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("ai_family", symbols.NewTypeBuilder("AIFamily", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()}).WithEnumName("IpProtocol").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("IPV4", "<stdlib-path>/net/inetaddr.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("ai_family", symbols.NewTypeBuilder("AIFamily", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()}).WithEnumName("IpProtocol").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("IPV6", "<stdlib-path>/net/inetaddr.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("ai_family", symbols.NewTypeBuilder("AIFamily", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()}).WithEnumName("IpProtocol").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_new_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ipv6_from_str", symbols.NewTypeBuilder("InetAddress!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ipv4_from_str", symbols.NewTypeBuilder("InetAddress!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_loopback", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_any_local", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_link_local", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_site_local", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast_global", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast_node_local", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast_site_local", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast_org_local", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast_link_local", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("addrinfo", symbols.NewTypeBuilder("AddrInfo*!", "std::net::os").IsOptional().Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithArgument(symbols.NewVariableBuilder("host", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", symbols.NewBaseTypeBuilder("uint", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithArgument(symbols.NewVariableBuilder("ai_family", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithArgument(symbols.NewVariableBuilder("ai_socktype", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build())

	// Define module std::net
	module = moduleCollection["std::net"]
	module.AddFault(symbols.NewFaultBuilder("NetError", "", "std::net", "<stdlib-path>/net/net.c3").WithConstant(symbols.NewFaultConstantBuilder("INVALID_URL", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("URL_TOO_LONG", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_SOCKET", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("GENERAL_ERROR", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_IP_STRING", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("ADDRINFO_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("CONNECT_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("LISTEN_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("ACCEPT_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("WRITE_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("READ_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("SOCKOPT_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("SOCKETS_NOT_INITIALIZED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("STILL_PROCESSING_CALLBACK", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("BAD_SOCKET_DESCRIPTOR", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("NOT_A_SOCKET", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("CONNECTION_REFUSED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("CONNECTION_TIMED_OUT", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("ADDRESS_IN_USE", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("CONNECTION_ALREADY_IN_PROGRESS", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("ALREADY_CONNECTED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("NETWORK_UNREACHABLE", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("OPERATION_NOT_SUPPORTED_ON_SOCKET", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).WithConstant(symbols.NewFaultConstantBuilder("CONNECTION_RESET", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("NetError").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("ipv4toint", symbols.NewBaseTypeBuilder("uint!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/net.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net", "<stdlib-path>/net/net.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int_to_new_ipv4", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::net", "<stdlib-path>/net/net.c3").WithArgument(symbols.NewVariableBuilder("val", symbols.NewBaseTypeBuilder("uint", "std::net").Build(), "std::net", "<stdlib-path>/net/net.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net", "<stdlib-path>/net/net.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int_to_temp_ipv4", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::net", "<stdlib-path>/net/net.c3").WithArgument(symbols.NewVariableBuilder("val", symbols.NewBaseTypeBuilder("uint", "std::net").Build(), "std::net", "<stdlib-path>/net/net.c3").Build()).WithoutSourceCode().Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("AF_INET", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AF_UNIX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AF_UNSPEC", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_CANONNAME", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_NUMERICHOST", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_PASSIVE", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPPOTO_IP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_3PC", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ADFS", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_AH", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_AHIP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_APES", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ARGUS", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_AX25", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_BHA", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_BLT", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_BRSATMON", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_CFTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_CHAOS", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_CMTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_CPHB", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_CPNX", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_DDP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_DGP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_DIVERT", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_DSTOPTS", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_EGP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_EMCON", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ENCAP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_EON", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ESP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ETHERIP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_FRAGMENT", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_GMTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_GRE", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_HELLO", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_HMP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ICMP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ICMPV6", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IDP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IDPR", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IDRP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IGMP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IGP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IGRP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IL", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_INLSP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_INP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPCOMP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPCV", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPEIP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPPC", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPV4", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPV6", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IRTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_KRYPTOLAN", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_LARP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_LEAF1", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_LEAF2", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_MEAS", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_MHRP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_MICP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_MTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_MUX", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ND", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_NHRP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_NONE", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_NSP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_NVPII", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_OSPFIGP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PGM", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PIGP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PIM", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PRM", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PUP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PVP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_RAW", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_RCCMON", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_RDP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ROUTING", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_RSVP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_RVD", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SATEXPAK", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SATMON", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SCCSP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SCTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SDRP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SEP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SRPC", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ST", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SVMTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SWIPE", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TCF", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TCP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TPXX", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TRUNK1", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TRUNK2", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_UDP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_VINES", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_VISA", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_VMTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_WBEXPAK", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_WBMON", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_WSN", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_XNET", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_XTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_APPLETALK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_INET6", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IPX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_O_NONBLOCK", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_DGRAM", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_RAW", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_RDM", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_SEQPACKET", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_STREAM", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUPPORTS_INET", symbols.NewTypeBuilder("bool", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddStruct(symbols.NewStructBuilder("AddrInfo", "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_flags", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_family", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_socktype", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_protocol", symbols.NewTypeBuilder("AIProtocol", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_addrlen", symbols.NewTypeBuilder("Socklen_t", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_canonname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_addr", symbols.NewTypeBuilder("SockAddrPtr", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_addr", symbols.NewTypeBuilder("SockAddrPtr", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_canonname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_next", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Socklen_t", "std::net::os", "<stdlib-path>/net/os/common.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("usz", "std::net::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("AIFamily", "std::net::os", "<stdlib-path>/net/os/common.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("AIFlags", "std::net::os", "<stdlib-path>/net/os/common.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("AIProtocol", "std::net::os", "<stdlib-path>/net/os/common.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("AISockType", "std::net::os", "<stdlib-path>/net/os/common.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("SockAddrPtr", "std::net::os", "<stdlib-path>/net/os/common.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::net::os").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getaddrinfo", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithArgument(symbols.NewVariableBuilder("nodename", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("servname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("hints", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("res", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("freeaddrinfo", symbols.NewBaseTypeBuilder("void", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithArgument(symbols.NewVariableBuilder("res", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setsockopt", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("level", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optname", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optval", symbols.NewBaseTypeBuilder("void*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optlen", symbols.NewTypeBuilder("Socklen_t", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getsockopt", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("level", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optname", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optval", symbols.NewBaseTypeBuilder("void*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optlen", symbols.NewTypeBuilder("Socklen_t", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithoutSourceCode().Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("AI_ADDRCONFIG", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_ALL", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_DEFAULT", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_NUMERICSERV", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_UNUSABLE", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_V4MAPPED", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_V4MAPPED_CFG", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_APPLETALK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_CCITT", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_CHAOS", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_CNT", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_COIP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_DATAKIT", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_DECNET", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_DLI", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ECMA", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_HYLINK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IEEE80211", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IMPLINK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_INET6", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IPX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ISDN", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ISO", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_LAT", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_LINK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_MAX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NATM", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NDRV", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NETBIOS", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NS", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_PPP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_PUP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ROUTE", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_SIP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_SNA", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_SYSTEM", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_UTUN", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_VSOCK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_O_NONBLOCK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_HDRCMPLT", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_KEY", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_PIP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_RTIP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_XTP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLATTRIB", symbols.NewTypeBuilder("CShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLEXTEND", symbols.NewTypeBuilder("CShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLNLINK", symbols.NewTypeBuilder("CShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLOUT", symbols.NewTypeBuilder("CShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDBAND", symbols.NewTypeBuilder("CShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDNORM", symbols.NewTypeBuilder("CShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRBAND", symbols.NewTypeBuilder("CShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRITE", symbols.NewTypeBuilder("CShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOL_SOCKET", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ACCEPTCONN", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BROADCAST", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DEBUG", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DONTROUTE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DONTTRUNC", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ERROR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_KEEPALIVE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LABEL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LINGER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LINGER_SEC", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NKE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NOADDRERR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NOSIGPIPE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NREAD", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NWRITE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_OOBINLINE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERLABEL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVBUF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVLOWAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVTIMEO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEADDR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEPORT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSESHAREUID", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDBUF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDLOWAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDTIMEO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TIMESTAMP", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TIMESTAMP_MONOTONIC", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TYPE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_USELOOPBACK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_WANTMORE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_WANTOOBFLAG", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_AAL5", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_APPLETALK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_AX25", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_BRIDGE", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_INET6", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IPX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NETROM", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_X25", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_O_NONBLOCK", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLFREE", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLMSG", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDBAND", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDHUP", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDNORM", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLREMOVE", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRBAND", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRNORM", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_BUSY_LOOP", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOL_SOCKET", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ACCEPTCONN", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ATTACH_BPF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ATTACH_FILTER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ATTACH_REUSEPORT_CBPF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ATTACH_REUSEPORT_EBPF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BINDTODEVICE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BINDTOIFINDEX", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BPF_EXTENSIONS", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BROADCAST", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BSDCOMPAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BUF_LOCK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BUSY_POLL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BUSY_POLL_BUDGET", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_CNX_ADVICE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_COOKIE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DEBUG", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DETACH_FILTER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DETACH_REUSEPORT_BPF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DOMAIN", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DONTROUTE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ERROR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_INCOMING_CPU", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_INCOMING_NAPI_ID", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_KEEPALIVE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LINGER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LOCK_FILTER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_MARK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_MAX_PACING_RATE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_MEMINFO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NETNS_COOKIE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NOFCS", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NO_CHECK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_OOBINLINE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PASSPIDFD", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PASSSEC", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEEK_OFF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERGROUPS", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERNAME", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERPIDFD", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERSEC", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PREFER_BUSY_POLL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PRIORITY", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PROTOCOL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVBUF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVBUFFORCE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVLOWAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVMARK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVTIMEO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RESERVE_MEM", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEADDR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEPORT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RXQ_OVFL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SELECT_ERR_QUEUE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDBUF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDBUFFORCE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDLOWAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDTIMEO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TIMESTAMP", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TXREHASH", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TXTIME", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TYPE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_WIFI_STATUS", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ZEROCOPY", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("F_GETFL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("F_SETFL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLERR", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLHUP", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLIN", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLNVAL", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLOUT", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLPRI", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddStruct(symbols.NewStructBuilder("Posix_pollfd", "std::net::os", "<stdlib-path>/net/os/posix.c3").WithStructMember("fd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithStructMember("events", symbols.NewTypeBuilder("CUShort", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithStructMember("revents", symbols.NewTypeBuilder("CUShort", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Posix_nfds_t", "std::net::os", "<stdlib-path>/net/os/posix.c3").WithResolvesToType(symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("NativeSocket", "std::net::os", "<stdlib-path>/net/os/posix.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Fd", "libc").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("SockAddrPtr", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", symbols.NewTypeBuilder("Socklen_t", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("af", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", symbols.NewTypeBuilder("AIProtocol", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fcntl", symbols.NewBaseTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd", symbols.NewBaseTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bind", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("SockAddrPtr", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", symbols.NewTypeBuilder("Socklen_t", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("listen", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("backlog", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("accept", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("SockAddrPtr", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", symbols.NewTypeBuilder("Socklen_t*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("poll", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("fds", symbols.NewTypeBuilder("Posix_pollfd*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("nfds", symbols.NewTypeBuilder("Posix_nfds_t", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("convert_error", symbols.NewBaseTypeBuilder("anyfault", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("error", symbols.NewTypeBuilder("Errno", "libc").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("socket_error", symbols.NewBaseTypeBuilder("anyfault", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeSocket.is_valid", symbols.NewBaseTypeBuilder("bool", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeSocket.close", symbols.NewBaseTypeBuilder("void!", "std::net::os").IsOptional().Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeSocket.set_non_blocking", symbols.NewBaseTypeBuilder("void!", "std::net::os").IsOptional().Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("non_blocking", symbols.NewBaseTypeBuilder("bool", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeSocket.is_non_blocking", symbols.NewBaseTypeBuilder("bool", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("FIOASYNC", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("FIONBIO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("FIONREAD", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_APPLETALK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_BTH", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_INET6", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IPX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IRDA", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NETBIOS", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLERR", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLHUP", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLIN", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLNVAL", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLOUT", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLPRI", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDBAND", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDNORM", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRBAND", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRNORM", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOL_SOCKET", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ACCEPTCONN", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BROADCAST", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DEBUG", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DONTROUTE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ERROR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_KEEPALIVE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LINGER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_OOBINLINE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVBUF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVLOWAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVTIMEO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEADDR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDBUF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDLOWAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDTIMEO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TYPE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_USELOOPBACK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("NativeSocket", "std::net::os", "<stdlib-path>/net/os/win32.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Win32_SOCKET", "std::os::win32").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ioctlsocket", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("argp", symbols.NewTypeBuilder("CULong*", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("closesocket", symbols.NewTypeBuilder("WSAError", "std::os::win32").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("af", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", symbols.NewTypeBuilder("AIProtocol", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect", symbols.NewBaseTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("SockAddrPtr", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", symbols.NewTypeBuilder("Socklen_t", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bind", symbols.NewBaseTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("SockAddrPtr", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", symbols.NewTypeBuilder("Socklen_t", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("listen", symbols.NewBaseTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("backlog", symbols.NewBaseTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("accept", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("SockAddrPtr", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", symbols.NewTypeBuilder("Socklen_t*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeSocket.is_valid", symbols.NewBaseTypeBuilder("bool", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_non_blocking", symbols.NewBaseTypeBuilder("void!", "std::net::os").IsOptional().Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithTypeIdentifier("NativeSocket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("non_blocking", symbols.NewBaseTypeBuilder("bool", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeSocket.close", symbols.NewBaseTypeBuilder("void!", "std::net::os").IsOptional().Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("convert_error", symbols.NewBaseTypeBuilder("anyfault", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("error", symbols.NewTypeBuilder("WSAError", "std::os::win32").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("socket_error", symbols.NewBaseTypeBuilder("anyfault", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithoutSourceCode().Build())

	// Define module std::net
	module = moduleCollection["std::net"]
	module.AddVariable(symbols.NewVariableBuilder("POLL_EVENT_DISCONNECT", symbols.NewTypeBuilder("PollEvents", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_ERROR", symbols.NewTypeBuilder("PollEvents", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_INVALID", symbols.NewTypeBuilder("PollEvents", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_READ", symbols.NewTypeBuilder("PollEvents", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_READ_OOB", symbols.NewTypeBuilder("PollEvents", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_READ_PRIO", symbols.NewTypeBuilder("PollEvents", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_WRITE", symbols.NewTypeBuilder("PollEvents", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_WRITE_OOB", symbols.NewTypeBuilder("PollEvents", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_FOREVER", symbols.NewTypeBuilder("Duration", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_ANY_READ", symbols.NewTypeBuilder("PollSubscribes", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_ANY_WRITE", symbols.NewTypeBuilder("PollSubscribes", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_OOB_READ", symbols.NewTypeBuilder("PollSubscribes", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_OOB_WRITE", symbols.NewTypeBuilder("PollSubscribes", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_PRIO_READ", symbols.NewTypeBuilder("PollSubscribes", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_READ", symbols.NewTypeBuilder("PollSubscribes", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_WRITE", symbols.NewTypeBuilder("PollSubscribes", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddStruct(symbols.NewStructBuilder("Poll", "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("events", symbols.NewTypeBuilder("PollSubscribes", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("revents", symbols.NewTypeBuilder("PollEvents", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Socket", "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("sock", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("ai_addrlen", symbols.NewTypeBuilder("Socklen_t", "std::net::os").Build(), "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("ai_addr_storage", symbols.NewBaseTypeBuilder("char[128]", "std::net").IsCollectionWithSize(128).Build(), "std::net", "<stdlib-path>/net/socket.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("PollEvents", "std::net", "<stdlib-path>/net/socket.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ushort", "std::net").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("PollSubscribes", "std::net", "<stdlib-path>/net/socket.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ushort", "std::net").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("SocketOption", "char", "std::net", "<stdlib-path>/net/socket.c3").WithEnumerator(symbols.NewEnumeratorBuilder("REUSEADDR", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()}).WithEnumName("SocketOption").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("REUSEPORT", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()}).WithEnumName("SocketOption").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KEEPALIVE", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()}).WithEnumName("SocketOption").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BROADCAST", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()}).WithEnumName("SocketOption").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OOBINLINE", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()}).WithEnumName("SocketOption").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DONTROUTE", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()}).WithEnumName("SocketOption").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("@loop_over_ai", symbols.NewBaseTypeBuilder("void", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").WithArgument(symbols.NewVariableBuilder("ai", symbols.NewTypeBuilder("AddrInfo*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(NativeSocket fd, AddrInfo* ai)", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("poll", symbols.NewBaseTypeBuilder("ulong!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithArgument(symbols.NewVariableBuilder("polls", symbols.NewTypeBuilder("Poll[]", "std::net").IsUnsizedCollection().Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("poll_ms", symbols.NewBaseTypeBuilder("ulong!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithArgument(symbols.NewVariableBuilder("polls", symbols.NewTypeBuilder("Poll[]", "std::net").IsUnsizedCollection().Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout_ms", symbols.NewBaseTypeBuilder("long", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_socket", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("", "").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("ai", symbols.NewTypeBuilder("", "").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_broadcast", symbols.NewBaseTypeBuilder("bool!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_keepalive", symbols.NewBaseTypeBuilder("bool!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_reuseaddr", symbols.NewBaseTypeBuilder("bool!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_dontroute", symbols.NewBaseTypeBuilder("bool!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_oobinline", symbols.NewBaseTypeBuilder("bool!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_broadcast", symbols.NewBaseTypeBuilder("void!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_keepalive", symbols.NewBaseTypeBuilder("void!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_reuseaddr", symbols.NewBaseTypeBuilder("void!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_dontroute", symbols.NewBaseTypeBuilder("void!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_oobinline", symbols.NewBaseTypeBuilder("void!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_option", symbols.NewBaseTypeBuilder("void!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("option", symbols.NewTypeBuilder("SocketOption", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_option", symbols.NewBaseTypeBuilder("bool!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("option", symbols.NewTypeBuilder("SocketOption", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::net").IsUnsizedCollection().Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("usz!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char[]", "std::net").IsUnsizedCollection().Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewBaseTypeBuilder("void!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("byte", symbols.NewBaseTypeBuilder("char", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewBaseTypeBuilder("void!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build())

	// Define module std::net
	module = moduleCollection["std::net"]
	module.AddFunction(symbols.NewFunctionBuilder("apply_sockoptions", symbols.NewTypeBuilder("", "std::net").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").WithArgument(symbols.NewVariableBuilder("sockfd", symbols.NewTypeBuilder("", "").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("", "").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_from_addrinfo", symbols.NewTypeBuilder("Socket!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket_private.c3").WithArgument(symbols.NewVariableBuilder("addrinfo", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption[]", "std::net").IsUnsizedCollection().Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("last_error_is_delayed_connect", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_with_timeout_from_addrinfo", symbols.NewTypeBuilder("Socket!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket_private.c3").WithArgument(symbols.NewVariableBuilder("addrinfo", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption[]", "std::net").IsUnsizedCollection().Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_async_from_addrinfo", symbols.NewTypeBuilder("Socket!", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket_private.c3").WithArgument(symbols.NewVariableBuilder("addrinfo", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption[]", "std::net").IsUnsizedCollection().Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@network_loop_over_ai", symbols.NewTypeBuilder("", "std::net").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").WithArgument(symbols.NewVariableBuilder("network", symbols.NewTypeBuilder("", "").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("host", symbols.NewTypeBuilder("", "").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", symbols.NewTypeBuilder("", "").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(fd, ai)", "std::net").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::net::tcp
	module = moduleCollection["std::net::tcp"]
	module.AddDistinct(symbols.NewDistinctBuilder("TcpServerSocket", "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Socket", "std::net").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("TcpSocket", "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Socket", "std::net").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect", symbols.NewTypeBuilder("TcpSocket!", "std::net::tcp").IsOptional().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("host", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", symbols.NewBaseTypeBuilder("uint", "std::net::tcp").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", symbols.NewTypeBuilder("IpProtocol", "std::net").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_async", symbols.NewTypeBuilder("TcpSocket!", "std::net::tcp").IsOptional().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("host", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", symbols.NewBaseTypeBuilder("uint", "std::net::tcp").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", symbols.NewTypeBuilder("IpProtocol", "std::net").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_to", symbols.NewTypeBuilder("TcpSocket!", "std::net::tcp").IsOptional().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("ai", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_async_to", symbols.NewTypeBuilder("TcpSocket!", "std::net::tcp").IsOptional().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("ai", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("listen", symbols.NewTypeBuilder("TcpServerSocket!", "std::net::tcp").IsOptional().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("host", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", symbols.NewBaseTypeBuilder("uint", "std::net::tcp").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("backlog", symbols.NewBaseTypeBuilder("uint", "std::net::tcp").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", symbols.NewTypeBuilder("IpProtocol", "std::net").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("accept", symbols.NewTypeBuilder("TcpSocket!", "std::net::tcp").IsOptional().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("server_socket", symbols.NewTypeBuilder("TcpServerSocket*", "std::net::tcp").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("listen_to", symbols.NewTypeBuilder("TcpServerSocket!", "std::net::tcp").IsOptional().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("ai", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("backlog", symbols.NewBaseTypeBuilder("uint", "std::net::tcp").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithoutSourceCode().Build())

	// Define module std::net::udp
	module = moduleCollection["std::net::udp"]
	module.AddDistinct(symbols.NewDistinctBuilder("UdpSocket", "std::net::udp", "<stdlib-path>/net/udp.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Socket", "std::net").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect", symbols.NewTypeBuilder("UdpSocket!", "std::net::udp").IsOptional().Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").WithArgument(symbols.NewVariableBuilder("host", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", symbols.NewBaseTypeBuilder("uint", "std::net::udp").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", symbols.NewTypeBuilder("IpProtocol", "std::net").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_to", symbols.NewTypeBuilder("UdpSocket!", "std::net::udp").IsOptional().Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").WithArgument(symbols.NewVariableBuilder("ai", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_async", symbols.NewTypeBuilder("UdpSocket!", "std::net::udp").IsOptional().Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").WithArgument(symbols.NewVariableBuilder("host", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", symbols.NewBaseTypeBuilder("uint", "std::net::udp").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", symbols.NewTypeBuilder("IpProtocol", "std::net").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_async_to", symbols.NewTypeBuilder("UdpSocket!", "std::net::udp").IsOptional().Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").WithArgument(symbols.NewVariableBuilder("ai", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithoutSourceCode().Build())

	// Define module std::net::url
	module = moduleCollection["std::net::url"]
	module.AddStruct(symbols.NewStructBuilder("Url", "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("scheme", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("host", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("port", symbols.NewBaseTypeBuilder("uint", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("username", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("password", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("query", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("fragment", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("UrlQueryValues", "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("map", symbols.NewTypeBuilder("HashMap", "std::collections::map").WithGenericArguments(symbols.NewTypeBuilder("String", "std::net::url").Build(), symbols.NewTypeBuilder("UrlQueryValueList", "std::net::url").Build()).Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("key_order", symbols.NewTypeBuilder("UrlQueryValueList", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("table", symbols.NewTypeBuilder("Entry*[]", "std::collections::map").IsUnsizedCollection().Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("count", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("threshold", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("UrlQueryValueList", "std::net::url", "<stdlib-path>/net/url.c3").WithResolvesToType(symbols.NewTypeBuilder("List", "std::collections::list").WithGenericArguments(symbols.NewTypeBuilder("String", "std::net::url").Build()).Build()).WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("UrlParsingResult", "", "std::net::url", "<stdlib-path>/net/url.c3").WithConstant(symbols.NewFaultConstantBuilder("EMPTY", "std::net::url", "../../../assets/c3c/lib/std/net/url.c3").WithFaultName("UrlParsingResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_SCHEME", "std::net::url", "../../../assets/c3c/lib/std/net/url.c3").WithFaultName("UrlParsingResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_USER", "std::net::url", "../../../assets/c3c/lib/std/net/url.c3").WithFaultName("UrlParsingResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_PASSWORD", "std::net::url", "../../../assets/c3c/lib/std/net/url.c3").WithFaultName("UrlParsingResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_HOST", "std::net::url", "../../../assets/c3c/lib/std/net/url.c3").WithFaultName("UrlParsingResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_PATH", "std::net::url", "../../../assets/c3c/lib/std/net/url.c3").WithFaultName("UrlParsingResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_FRAGMENT", "std::net::url", "../../../assets/c3c/lib/std/net/url.c3").WithFaultName("UrlParsingResult").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("temp_parse", symbols.NewTypeBuilder("Url!", "std::net::url").IsOptional().Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithArgument(symbols.NewVariableBuilder("url_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_parse", symbols.NewTypeBuilder("Url!", "std::net::url").IsOptional().Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithArgument(symbols.NewVariableBuilder("url_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithTypeIdentifier("Url").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Url", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_parse_query", symbols.NewTypeBuilder("UrlQueryValues", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithArgument(symbols.NewVariableBuilder("query", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_parse_query", symbols.NewTypeBuilder("UrlQueryValues", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithArgument(symbols.NewVariableBuilder("query", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_query", symbols.NewTypeBuilder("UrlQueryValues", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithArgument(symbols.NewVariableBuilder("query", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add", symbols.NewTypeBuilder("UrlQueryValues*", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithTypeIdentifier("UrlQueryValues").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("UrlQueryValues", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithTypeIdentifier("UrlQueryValues").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("UrlQueryValues", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithTypeIdentifier("UrlQueryValues").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("UrlQueryValues", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithTypeIdentifier("Url").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Url", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithoutSourceCode().Build())

	// Define module std::net::url
	module = moduleCollection["std::net::url"]
	module.AddEnum(symbols.NewEnumBuilder("UrlEncodingMode", "char", "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithEnumerator(symbols.NewEnumeratorBuilder("UNRESERVED", "<stdlib-path>/net/url_encoding.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("allowed", symbols.NewTypeBuilder("String", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()}).WithEnumName("UrlEncodingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PATH", "<stdlib-path>/net/url_encoding.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("allowed", symbols.NewTypeBuilder("String", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()}).WithEnumName("UrlEncodingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HOST", "<stdlib-path>/net/url_encoding.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("allowed", symbols.NewTypeBuilder("String", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()}).WithEnumName("UrlEncodingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("USERPASS", "<stdlib-path>/net/url_encoding.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("allowed", symbols.NewTypeBuilder("String", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()}).WithEnumName("UrlEncodingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("QUERY", "<stdlib-path>/net/url_encoding.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("allowed", symbols.NewTypeBuilder("String", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()}).WithEnumName("UrlEncodingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FRAGMENT", "<stdlib-path>/net/url_encoding.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("allowed", symbols.NewTypeBuilder("String", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()}).WithEnumName("UrlEncodingMode").Build()).Build()).AddFault(symbols.NewFaultBuilder("UrlDecodingError", "", "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithConstant(symbols.NewFaultConstantBuilder("INVALID_HEX", "std::net::url", "../../../assets/c3c/lib/std/net/url_encoding.c3").WithFaultName("UrlDecodingError").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("should_encode", symbols.NewBaseTypeBuilder("bool", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("UrlEncodingMode", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_len", symbols.NewBaseTypeBuilder("usz", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("UrlEncodingMode", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("UrlEncodingMode", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_encode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("UrlEncodingMode", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_encode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("UrlEncodingMode", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_len", symbols.NewBaseTypeBuilder("usz!", "std::net::url").IsOptional().Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("UrlEncodingMode", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("UrlEncodingMode", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_decode", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("UrlEncodingMode", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_decode", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("UrlEncodingMode", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::backtrace
	module = moduleCollection["std::os::backtrace"]
	module.AddVariable(symbols.NewVariableBuilder("BACKTRACE_UNKNOWN", symbols.NewTypeBuilder("Backtrace", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).AddStruct(symbols.NewStructBuilder("Backtrace", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("offset", symbols.NewBaseTypeBuilder("uptr", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("function", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("object_file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("line", symbols.NewBaseTypeBuilder("uint", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("is_inline", symbols.NewBaseTypeBuilder("bool", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("BacktraceList", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithResolvesToType(symbols.NewTypeBuilder("List", "std::collections::list").WithGenericArguments(symbols.NewTypeBuilder("Backtrace", "std::os::backtrace").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("symbolize_backtrace", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithResolvesTo("darwin::symbolize_backtrace").WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("BacktraceFault", "", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithConstant(symbols.NewFaultConstantBuilder("SEGMENT_NOT_FOUND", "std::os::backtrace", "../../../assets/c3c/lib/std/os/backtrace.c3").WithFaultName("BacktraceFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("EXECUTABLE_PATH_NOT_FOUND", "std::os::backtrace", "../../../assets/c3c/lib/std/os/backtrace.c3").WithFaultName("BacktraceFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("IMAGE_NOT_FOUND", "std::os::backtrace", "../../../assets/c3c/lib/std/os/backtrace.c3").WithFaultName("BacktraceFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("NO_BACKTRACE_SYMBOLS", "std::os::backtrace", "../../../assets/c3c/lib/std/os/backtrace.c3").WithFaultName("BacktraceFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("RESOLUTION_FAILED", "std::os::backtrace", "../../../assets/c3c/lib/std/os/backtrace.c3").WithFaultName("BacktraceFault").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("has_file", symbols.NewBaseTypeBuilder("bool", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithTypeIdentifier("Backtrace").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Backtrace", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_unknown", symbols.NewBaseTypeBuilder("bool", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithTypeIdentifier("Backtrace").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Backtrace", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::os::backtrace").IsOptional().Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithTypeIdentifier("Backtrace").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Backtrace", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithTypeIdentifier("Backtrace").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Backtrace", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("Backtrace*", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithTypeIdentifier("Backtrace").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Backtrace", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("uptr", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("object_file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", symbols.NewBaseTypeBuilder("uint", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("capture_current", symbols.NewBaseTypeBuilder("void*[]", "std::os::backtrace").IsUnsizedCollection().Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*[]", "std::os::backtrace").IsUnsizedCollection().Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symbolize_backtrace", symbols.NewTypeBuilder("BacktraceList!", "std::os::backtrace").IsOptional().Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithArgument(symbols.NewVariableBuilder("backtrace", symbols.NewBaseTypeBuilder("void*[]", "std::os::backtrace").IsUnsizedCollection().Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os
	module = moduleCollection["std::os"]
	module.AddFunction(symbols.NewFunctionBuilder("num_cpu", symbols.NewBaseTypeBuilder("uint", "std::os").Build(), "std::os", "<stdlib-path>/os/cpu.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("num_cpu", symbols.NewBaseTypeBuilder("uint", "std::os").Build(), "std::os", "<stdlib-path>/os/cpu.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("num_cpu", symbols.NewBaseTypeBuilder("uint", "std::os").Build(), "std::os", "<stdlib-path>/os/cpu.c3").WithoutSourceCode().Build())

	// Define module std::os::env
	module = moduleCollection["std::os::env"]
	module.AddFunction(symbols.NewFunctionBuilder("get_var", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_var_temp", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_var", symbols.NewBaseTypeBuilder("bool", "std::os::env").Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithArgument(symbols.NewVariableBuilder("overwrite", symbols.NewBaseTypeBuilder("bool", "std::os::env").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_home_dir", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("using", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_config_dir", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_get_config_dir", symbols.NewTypeBuilder("Path!", "std::io::path").IsOptional().Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear_var", symbols.NewBaseTypeBuilder("bool", "std::os::env").Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("executable_path", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_executable_path", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::linux
	module = moduleCollection["std::os::linux"]
	module.AddFunction(symbols.NewFunctionBuilder("malloc_usable_size", symbols.NewBaseTypeBuilder("usz", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/heap.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/heap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::linux
	module = moduleCollection["std::os::linux"]
	module.AddVariable(symbols.NewVariableBuilder("EI_NIDENT", symbols.NewTypeBuilder("", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PT_PHDR", symbols.NewTypeBuilder("", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).AddStruct(symbols.NewStructBuilder("Elf32_Ehdr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_ident", symbols.NewBaseTypeBuilder("char[]", "std::os::linux").IsUnsizedCollection().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_type", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_machine", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_version", symbols.NewTypeBuilder("Elf32_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_entry", symbols.NewTypeBuilder("Elf32_Addr", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phoff", symbols.NewTypeBuilder("Elf32_Off", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shoff", symbols.NewTypeBuilder("Elf32_Off", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_flags", symbols.NewTypeBuilder("Elf32_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_ehsize", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phentsize", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phnum", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shentsize", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shnum", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shstrndx", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Elf32_Phdr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_type", symbols.NewTypeBuilder("Elf32_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_offset", symbols.NewTypeBuilder("Elf32_Off", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_vaddr", symbols.NewTypeBuilder("Elf32_Addr", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_paddr", symbols.NewTypeBuilder("Elf32_Addr", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_filesz", symbols.NewTypeBuilder("Elf32_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_memsz", symbols.NewTypeBuilder("Elf32_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_flags", symbols.NewTypeBuilder("Elf32_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_align", symbols.NewTypeBuilder("Elf32_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Elf64_Ehdr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_ident", symbols.NewBaseTypeBuilder("char[]", "std::os::linux").IsUnsizedCollection().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_type", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_machine", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_version", symbols.NewTypeBuilder("Elf64_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_entry", symbols.NewTypeBuilder("Elf64_Addr", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phoff", symbols.NewTypeBuilder("Elf64_Off", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shoff", symbols.NewTypeBuilder("Elf64_Off", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_flags", symbols.NewTypeBuilder("Elf64_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_ehsize", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phentsize", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phnum", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shentsize", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shnum", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shstrndx", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Elf64_Phdr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_type", symbols.NewTypeBuilder("Elf64_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_flags", symbols.NewTypeBuilder("Elf64_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_offset", symbols.NewTypeBuilder("Elf64_Off", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_vaddr", symbols.NewTypeBuilder("Elf64_Addr", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_paddr", symbols.NewTypeBuilder("Elf64_Addr", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_filesz", symbols.NewTypeBuilder("Elf64_Xword", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_memsz", symbols.NewTypeBuilder("Elf64_Xword", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_align", symbols.NewTypeBuilder("Elf64_Xword", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Linux_Dl_info", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dli_fname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dli_fbase", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dli_sname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dli_saddr", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf32_Addr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf32_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf32_Off", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf32_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Addr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Lword", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Off", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Sword", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Sxword", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Xword", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("readlink", symbols.NewBaseTypeBuilder("isz", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("char*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("bufsize", symbols.NewBaseTypeBuilder("usz", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dladdr", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("info", symbols.NewTypeBuilder("Linux_Dl_info*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("elf_module_image_base", symbols.NewBaseTypeBuilder("ulong!", "std::os::linux").IsOptional().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_add_from_exec", symbols.NewBaseTypeBuilder("void!", "std::os::linux").IsOptional().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("BacktraceList*", "std::os::backtrace").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_add_from_dlinfo", symbols.NewBaseTypeBuilder("void!", "std::os::linux").IsOptional().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("BacktraceList*", "std::os::backtrace").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("info", symbols.NewTypeBuilder("Linux_Dl_info*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_line_parse", symbols.NewTypeBuilder("Backtrace!", "std::os::backtrace").IsOptional().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("obj_name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("func_name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("is_inlined", symbols.NewBaseTypeBuilder("bool", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_add_addr2line", symbols.NewBaseTypeBuilder("void!", "std::os::linux").IsOptional().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("BacktraceList*", "std::os::backtrace").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("addr2line", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("obj_name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("func_name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_add_element", symbols.NewBaseTypeBuilder("void!", "std::os::linux").IsOptional().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("BacktraceList*", "std::os::backtrace").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symbolize_backtrace", symbols.NewTypeBuilder("BacktraceList!", "std::os::backtrace").IsOptional().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("backtrace", symbols.NewBaseTypeBuilder("void*[]", "std::os::linux").IsUnsizedCollection().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::macos::cf
	module = moduleCollection["std::os::macos::cf"]
	module.AddDef(symbols.NewDefBuilder("CFOptionFlags", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("usz", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("CFAllocatorContextRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("CFAllocatorRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("default_allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CFAllocatorRef.dealloc", symbols.NewBaseTypeBuilder("void", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CFAllocatorRef.alloc", symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CFAllocatorRef.get_preferred_size", symbols.NewBaseTypeBuilder("usz", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("req_size", symbols.NewBaseTypeBuilder("usz", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CFAllocatorRef.set_default", symbols.NewBaseTypeBuilder("void", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorCreate", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("CFAllocatorContextRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorDeallocate", symbols.NewBaseTypeBuilder("void", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorGetDefault", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorSetDefault", symbols.NewBaseTypeBuilder("void", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorAllocate", symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("hint", symbols.NewTypeBuilder("CFOptionFlags", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorGetPreferredSizeForSize", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("hint", symbols.NewTypeBuilder("CFOptionFlags", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::macos::cf
	module = moduleCollection["std::os::macos::cf"]
	module.AddDistinct(symbols.NewDistinctBuilder("CFArrayCallBacksRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("CFArrayRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("CFMutableArrayRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFArrayCreate", symbols.NewTypeBuilder("CFArrayRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("num_values", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("callBacks", symbols.NewTypeBuilder("CFArrayCallBacksRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFArrayCopy", symbols.NewTypeBuilder("CFArrayRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("array", symbols.NewTypeBuilder("CFArrayRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFArrayGetCount", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithArgument(symbols.NewVariableBuilder("array", symbols.NewTypeBuilder("CFArrayRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFArrayAppendArray", symbols.NewBaseTypeBuilder("void", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithArgument(symbols.NewVariableBuilder("theArray", symbols.NewTypeBuilder("CFMutableArrayRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("otherArray", symbols.NewTypeBuilder("CFArrayRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("otherRange", symbols.NewTypeBuilder("CFRange", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFArrayCreateMutable", symbols.NewTypeBuilder("CFMutableArrayRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("callBacks", symbols.NewTypeBuilder("CFArrayCallBacksRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFArrayAppendValue", symbols.NewBaseTypeBuilder("void", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithArgument(symbols.NewVariableBuilder("theArray", symbols.NewTypeBuilder("CFMutableArrayRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::darwin::cocoa
	module = moduleCollection["std::os::darwin::cocoa"]
	module.AddFunction(symbols.NewFunctionBuilder("nsApplicationMain", symbols.NewBaseTypeBuilder("int", "std::os::darwin::cocoa").Build(), "std::os::darwin::cocoa", "<stdlib-path>/os/macos/cocoa.c3").WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::os::darwin::cocoa").Build(), "std::os::darwin::cocoa", "<stdlib-path>/os/macos/cocoa.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewBaseTypeBuilder("char*", "std::os::darwin::cocoa").Build(), "std::os::darwin::cocoa", "<stdlib-path>/os/macos/cocoa.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::macos::cf
	module = moduleCollection["std::os::macos::cf"]
	module.AddStruct(symbols.NewStructBuilder("CFRange", "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithStructMember("location", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithStructMember("length", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CFIndex", "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("isz", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("CFTypeRef", "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFRetain", symbols.NewTypeBuilder("CFTypeRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithArgument(symbols.NewVariableBuilder("cf", symbols.NewTypeBuilder("CFTypeRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFRelease", symbols.NewBaseTypeBuilder("void", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithArgument(symbols.NewVariableBuilder("cf", symbols.NewTypeBuilder("CFTypeRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::darwin
	module = moduleCollection["std::os::darwin"]
	module.AddVariable(symbols.NewVariableBuilder("CTL_DEBUG", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_HW", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_KERN", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_MACHDEP", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_MAXID", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_NET", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_UNSPEC", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_USER", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_VFS", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_VM", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_BUS_FREQ", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_BYTEORDER", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_CACHELINE", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_CPU_FREQ", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_DISKNAMES", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_DISKSTATS", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_EPOCH", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_FLOATINGPT", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L1DCACHESIZE", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L1ICACHESIZE", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L2CACHESIZE", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L2SETTINGS", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L3CACHESIZE", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L3SETTINGS", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MACHINE", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MACHINE_ARCH", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MAXID", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MODEL", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_NCPU", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PAGESIZE", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PHYSMEM", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_USERMEM", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_VECTORUNIT", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddStruct(symbols.NewStructBuilder("Darwin_Dl_info", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("dli_fname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("dli_fbase", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("dli_sname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("dli_saddr", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Darwin_segment_command_64", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("cmd", symbols.NewBaseTypeBuilder("uint", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("cmdsize", symbols.NewBaseTypeBuilder("uint", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("segname", symbols.NewBaseTypeBuilder("char[16]", "std::os::darwin").IsCollectionWithSize(16).Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("vmaddr", symbols.NewBaseTypeBuilder("ulong", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("vmsize", symbols.NewBaseTypeBuilder("ulong", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("fileoff", symbols.NewBaseTypeBuilder("ulong", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("filesize", symbols.NewBaseTypeBuilder("ulong", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("maxprot", symbols.NewBaseTypeBuilder("int", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("initprot", symbols.NewBaseTypeBuilder("int", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("nsects", symbols.NewBaseTypeBuilder("uint", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("flags", symbols.NewBaseTypeBuilder("uint", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sysctl", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("namelen", symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldp", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldlenp", symbols.NewBaseTypeBuilder("usz*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("newp", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("newlen", symbols.NewBaseTypeBuilder("usz", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("darwin_NSGetExecutablePath", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("uint*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getsegbyname", symbols.NewTypeBuilder("Darwin_segment_command_64*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("segname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_dyld_image_count", symbols.NewBaseTypeBuilder("uint", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_dyld_get_image_name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("image_index", symbols.NewBaseTypeBuilder("uint", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_dyld_get_image_vmaddr_slide", symbols.NewBaseTypeBuilder("iptr", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("image_index", symbols.NewBaseTypeBuilder("uint", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dladdr", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("info", symbols.NewTypeBuilder("Darwin_Dl_info*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("executable_path", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load_address", symbols.NewBaseTypeBuilder("uptr!", "std::os::darwin").IsOptional().Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_load_element", symbols.NewTypeBuilder("Backtrace!", "std::os::backtrace").IsOptional().Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("execpath", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_address", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symbolize_backtrace", symbols.NewTypeBuilder("BacktraceList!", "std::os::backtrace").IsOptional().Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("backtrace", symbols.NewBaseTypeBuilder("void*[]", "std::os::darwin").IsUnsizedCollection().Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::darwin
	module = moduleCollection["std::os::darwin"]
	module.AddFunction(symbols.NewFunctionBuilder("malloc_size", symbols.NewBaseTypeBuilder("usz", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/heap.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/heap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::macos::objc
	module = moduleCollection["std::os::macos::objc"]
	module.AddDef(symbols.NewDefBuilder("ObjcId", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("SendVoid", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithResolvesTo("fn void*(void*, ObjcSelector)").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("ObjcClass", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("ObjcIvar", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("ObjcMethod", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("ObjcSelector", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("ApplicationActivationPolicy", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithEnumerator(symbols.NewEnumeratorBuilder("REGULAR", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("ApplicationActivationPolicy").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ACCESSORY", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("ApplicationActivationPolicy").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PROHIBITED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("ApplicationActivationPolicy").Build()).Build()).AddEnum(symbols.NewEnumBuilder("BackingStore", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithEnumerator(symbols.NewEnumeratorBuilder("RETAINED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("BackingStore").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NONRETAINED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("BackingStore").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BUFFERED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("BackingStore").Build()).Build()).AddEnum(symbols.NewEnumBuilder("EventMask", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithEnumerator(symbols.NewEnumeratorBuilder("LEFT_MOUSE_DOWN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LEFT_MOUSE_UP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RIGHT_MOUSE_DOWN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RIGHT_MOUSE_UP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOUSE_MOVED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LEFT_MOUSE_DRAGGED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RIGHT_MOUSE_DRAGGED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOUSE_ENTERED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOUSE_EXITED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KEY_DOWN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KEY_UP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FLAGS_CHANGED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("APPKIT_DEFINED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYSTEM_DEFINED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("APPLICATION_DEFINED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PERIODIC", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CURSOR_UPDATE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SCROLL_WHEEL", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TABLET_POINT", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TABLET_PROXIMITY", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OTHER_MOUSE_DOWN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OTHER_MOUSE_UP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OTHER_MOUSE_DRAGGED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("GESTURE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MAGNIFY", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SWIPE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ROTATE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BEGIN_GESTURE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("END_GESTURE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SMART_MAGNIFY", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DIRECT_TOUCH", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANY", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).Build()).AddEnum(symbols.NewEnumBuilder("EventModifierFlag", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithEnumerator(symbols.NewEnumeratorBuilder("CAPS_LOCK", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventModifierFlag").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHIFT", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventModifierFlag").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CONTROL", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventModifierFlag").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OPTION", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventModifierFlag").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("COMMAND", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventModifierFlag").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NUMERIC_PAD", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventModifierFlag").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FUNCTION", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventModifierFlag").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HELP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventModifierFlag").Build()).Build()).AddEnum(symbols.NewEnumBuilder("EventType", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithEnumerator(symbols.NewEnumeratorBuilder("LEFT_MOUSE_DOWN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LEFT_MOUSE_UP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RIGHT_MOUSE_DOWN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RIGHT_MOUSE_UP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOUSE_MOVED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LEFT_MOUSE_DRAGGED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RIGHT_MOUSE_DRAGGED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOUSE_ENTERED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOUSE_EXITED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KEY_DOWN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KEY_UP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FLAGS_CHANGED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("APPKIT_DEFINED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYSTEM_DEFINED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("APPLICATION_DEFINED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PERIODIC", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CURSOR_UPDATE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SCROLL_WHEEL", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TABLET_POINT", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TABLET_PROXIMITY", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OTHER_MOUSE_DOWN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OTHER_MOUSE_UP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OTHER_MOUSE_DRAGGED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("GESTURE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MAGNIFY", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SWIPE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ROTATE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BEGIN_GESTURE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("END_GESTURE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SMART_MAGNIFY", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("QUICK_LOOK", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PRESSURE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DIRECT_TOUCH", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CHANGE_MODE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).Build()).AddEnum(symbols.NewEnumBuilder("StatusItemLength", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithEnumerator(symbols.NewEnumeratorBuilder("VARIABLE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("double", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("StatusItemLength").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SQUARE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("double", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("StatusItemLength").Build()).Build()).AddEnum(symbols.NewEnumBuilder("WindowStyleMask", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithEnumerator(symbols.NewEnumeratorBuilder("BORDERLESS", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TITLED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLOSABLE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MINIATURIZABLE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RESIZABLE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TEXTURED_BACKGROUND", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UNIFIED_TITLE_AND_TOOLBAR", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FULL_SCREEN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FULL_SIZE_CONTENT_VIEW", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UTILITY_WINDOW", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DOC_MODAL_WINDOW", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NONACTIVATING_PANEL", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HUD_WINDOW", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).Build()).AddFault(symbols.NewFaultBuilder("ObjcFailure", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithConstant(symbols.NewFaultConstantBuilder("CLASS_NOT_FOUND", "std::os::macos::objc", "../../../assets/c3c/lib/std/os/macos/objc.c3").WithFaultName("ObjcFailure").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNKNOWN_EVENT", "std::os::macos::objc", "../../../assets/c3c/lib/std/os/macos/objc.c3").WithFaultName("ObjcFailure").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("ObjcClass.name", symbols.NewTypeBuilder("ZString", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ObjcClass.superclass", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ObjcClass.responds_to", symbols.NewBaseTypeBuilder("bool", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("sel", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ObjcClass.method", symbols.NewTypeBuilder("ObjcMethod", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ObjcSelector.equals", symbols.NewBaseTypeBuilder("bool", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ObjcClass.equals", symbols.NewBaseTypeBuilder("bool", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc", symbols.NewTypeBuilder("ObjcId", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("id", symbols.NewTypeBuilder("ObjcId", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_by_name", symbols.NewTypeBuilder("ObjcClass!", "std::os::macos::objc").IsOptional().Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("ZString", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_get_list", symbols.NewTypeBuilder("ObjcClass[]", "std::os::macos::objc").IsUnsizedCollection().Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("msgSend", symbols.NewBaseTypeBuilder("void", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sel_getUid", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("msg_send", symbols.NewTypeBuilder("", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("id", symbols.NewTypeBuilder("", "").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("ZString", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewTypeBuilder("", "").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getClass", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getClassList", symbols.NewBaseTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("ObjcClass*", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer_count", symbols.NewBaseTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lookUpClass", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_getName", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_getSuperclass", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_getClassMethod", symbols.NewTypeBuilder("ObjcMethod", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_respondsToSelector", symbols.NewBaseTypeBuilder("bool", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sel_registerName", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_addIvar", symbols.NewBaseTypeBuilder("bool", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("double", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("types", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_addMethod", symbols.NewBaseTypeBuilder("bool", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("imp", symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("types", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getInstanceVariable", symbols.NewTypeBuilder("ObjcIvar", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("id", symbols.NewTypeBuilder("ObjcId", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("outValue", symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setInstanceVariable", symbols.NewTypeBuilder("ObjcIvar", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("id", symbols.NewTypeBuilder("ObjcId", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocateClassPair", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("extraBytes", symbols.NewBaseTypeBuilder("uint", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("event_type_from", symbols.NewTypeBuilder("EventType!", "std::os::macos::objc").IsOptional().Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("val", symbols.NewBaseTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddVariable(symbols.NewVariableBuilder("DT_BLK", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_CHR", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_DIR", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_FIFO", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_LNK", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_REG", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_SOCK", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_UNKNOWN", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_WHT", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("USE_DARWIN_INODE64", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddStruct(symbols.NewStructBuilder("Posix_dirent", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_fileno", symbols.NewTypeBuilder("Ino_t", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_off", symbols.NewTypeBuilder("Off_t", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_reclen", symbols.NewBaseTypeBuilder("ushort", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_namelen", symbols.NewBaseTypeBuilder("ushort", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_type", symbols.NewBaseTypeBuilder("char", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_namelen", symbols.NewBaseTypeBuilder("char", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_pad0", symbols.NewBaseTypeBuilder("char[4]", "std::os::posix").IsCollectionWithSize(4).Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_pad0", symbols.NewBaseTypeBuilder("char", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_namelen", symbols.NewBaseTypeBuilder("ushort", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_pad1", symbols.NewBaseTypeBuilder("ushort", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("name", symbols.NewBaseTypeBuilder("char[]", "std::os::posix").IsUnsizedCollection().Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("name", symbols.NewBaseTypeBuilder("char[]", "std::os::posix").IsUnsizedCollection().Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("name", symbols.NewBaseTypeBuilder("char[1024]", "std::os::posix").IsCollectionWithSize(1024).Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("name", symbols.NewBaseTypeBuilder("char[]", "std::os::posix").IsUnsizedCollection().Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Mode_t", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::posix").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("DIRPtr", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rmdir", symbols.NewBaseTypeBuilder("int", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mkdir", symbols.NewBaseTypeBuilder("int", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode_t", symbols.NewBaseTypeBuilder("ushort", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("chdir", symbols.NewBaseTypeBuilder("int", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getcwd", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("pwd", symbols.NewBaseTypeBuilder("char*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pipe", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("pipes", symbols.NewTypeBuilder("CInt*[2]", "std::core::cinterop").IsCollectionWithSize(2).Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fdopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("access", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("readdir", symbols.NewTypeBuilder("Posix_dirent*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("DIRPtr", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("opendir", symbols.NewTypeBuilder("DIRPtr", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("closedir", symbols.NewBaseTypeBuilder("void", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("DIRPtr", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("readdir", symbols.NewTypeBuilder("Posix_dirent*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("DIRPtr", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddVariable(symbols.NewVariableBuilder("environ", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/general.c3").Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddFunction(symbols.NewFunctionBuilder("posix_memalign", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/heap.c3").WithArgument(symbols.NewVariableBuilder("memptr", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/heap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddVariable(symbols.NewVariableBuilder("WNOHANG", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WUNTRACES", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("__WCOREFLAG", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("__W_CONTINUED", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("backtrace_jmpbuf", symbols.NewTypeBuilder("JmpBuf", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).AddStruct(symbols.NewStructBuilder("Posix_spawn_file_actions_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithStructMember("__allocated", symbols.NewBaseTypeBuilder("int", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithStructMember("__used", symbols.NewBaseTypeBuilder("int", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithStructMember("__actions", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithStructMember("__pad", symbols.NewBaseTypeBuilder("int[16]", "std::os::posix").IsCollectionWithSize(16).Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Posix_spawnattr_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithStructMember("opaque", symbols.NewBaseTypeBuilder("void*[42]", "std::os::posix").IsCollectionWithSize(42).Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("BacktraceFn", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("fn CInt(void** buffer, CInt size)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawn", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawn").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawn_file_actions_addclose", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawn_file_actions_addclose").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawn_file_actions_adddup2", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawn_file_actions_adddup2").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawn_file_actions_destroy", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawn_file_actions_destroy").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawn_file_actions_init", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawn_file_actions_init").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawnp", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawnp").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawn_file_actions_init", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("file_actions", symbols.NewTypeBuilder("Posix_spawn_file_actions_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawn_file_actions_destroy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("file_actions", symbols.NewTypeBuilder("Posix_spawn_file_actions_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawn_file_actions_addclose", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("file_actions", symbols.NewTypeBuilder("Posix_spawn_file_actions_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawn_file_actions_adddup2", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("file_actions", symbols.NewTypeBuilder("Posix_spawn_file_actions_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("newfd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs_conf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawnp", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("pid", symbols.NewTypeBuilder("Pid_t*", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", symbols.NewBaseTypeBuilder("char*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("file_actions", symbols.NewTypeBuilder("Posix_spawn_file_actions_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("attrp", symbols.NewTypeBuilder("Posix_spawnattr_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("envp", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawn", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("pid", symbols.NewTypeBuilder("Pid_t*", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", symbols.NewBaseTypeBuilder("char*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("file_actions", symbols.NewTypeBuilder("Posix_spawn_file_actions_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("attrp", symbols.NewTypeBuilder("Posix_spawnattr_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("envp", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getpid", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("kill", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("pid", symbols.NewTypeBuilder("Pid_t", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("sig", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("waitpid", symbols.NewTypeBuilder("Pid_t", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("pid", symbols.NewTypeBuilder("Pid_t", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("stat_loc", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewBaseTypeBuilder("int", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("raise", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("sig", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_symbols", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_symbols_fd", symbols.NewBaseTypeBuilder("void", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wEXITSTATUS", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wTERMSIG", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wSTOPSIG", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wIFEXITED", symbols.NewBaseTypeBuilder("bool", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wIFSIGNALED", symbols.NewBaseTypeBuilder("bool", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wIFSTOPPED", symbols.NewBaseTypeBuilder("bool", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wIFCONTINUED", symbols.NewBaseTypeBuilder("bool", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wWCOREDUMP", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("w_EXITCODE", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("ret", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("sig", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("w_STOPCODE", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("sig", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddVariable(symbols.NewVariableBuilder("PTHREAD_MUTEX_ERRORCHECK", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).AddVariable(symbols.NewVariableBuilder("PTHREAD_MUTEX_NORMAL", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).AddVariable(symbols.NewVariableBuilder("PTHREAD_MUTEX_RECURSIVE", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).AddDef(symbols.NewDefBuilder("PosixThreadFn", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithResolvesTo("fn void*(void*)").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_create", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("PosixThreadFn", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cancel", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_detach", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_t", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_equal", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("this", symbols.NewTypeBuilder("Pthread_t", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Pthread_t", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_exit", symbols.NewBaseTypeBuilder("void", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("value_ptr", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_join", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_t", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("value_ptr", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_kill", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_t", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("sig", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_once", symbols.NewBaseTypeBuilder("void", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_once_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("OnceFn", "std::thread").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_self", symbols.NewTypeBuilder("Pthread_t", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_setcancelstate", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("state", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldstate", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_setcanceltype", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldtype", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_testcancel", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_destroy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getinheritsched", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getschedparam", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Pthread_sched_param*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getschedpolicy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getscope", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getstacksize", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("usz*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getstackaddr", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getdetachstate", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_init", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setinheritsched", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setschedparam", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Pthread_sched_param*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setschedpolicy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setscope", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setstacksize", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("usz", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setstackaddr", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setdetachstate", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_destroy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_getprioceiling", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_getprotocol", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_gettype", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_init", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_setprioceiling", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_setprotocol", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_settype", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutex_destroy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_mutex_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutex_init", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_mutex_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutex_lock", symbols.NewTypeBuilder("Errno", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_mutex_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutex_trylock", symbols.NewTypeBuilder("Errno", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_mutex_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutex_unlock", symbols.NewTypeBuilder("Errno", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_mutex_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_condattr_destroy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_condattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_condattr_init", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_condattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_broadcast", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_cond_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_destroy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_cond_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_init", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_cond_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Pthread_condattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_signal", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_cond_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_timedwait", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_cond_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Pthread_mutex_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("TimeSpec*", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_wait", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_cond_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Pthread_mutex_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_destroy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_rwlock_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_init", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_rwlock_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Pthread_rwlockattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_rdlock", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_rwlock_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_tryrdlock", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_rwlock_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_trywrlock", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_rwlock_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_unlock", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_rwlock_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_wrlock", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_rwlock_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlockattr_destroy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_rwlockattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlockattr_getpshared", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_rwlockattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlockattr_init", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_rwlockattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlockattr_setpshared", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_rwlockattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_key_create", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_key_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("routine", symbols.NewTypeBuilder("PosixThreadFn", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_key_delete", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_key_t", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_getspecific", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_key_t", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_setspecific", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Pthread_key_t", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("value_ptr", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_atfork", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("prepare", symbols.NewTypeBuilder("OnceFn", "std::thread").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("parent", symbols.NewTypeBuilder("OnceFn", "std::thread").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("child", symbols.NewTypeBuilder("OnceFn", "std::thread").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cleanup_pop", symbols.NewBaseTypeBuilder("void", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("execute", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cleanup_push", symbols.NewBaseTypeBuilder("void", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("routine", symbols.NewTypeBuilder("PosixThreadFn", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("routine_arg", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sched_yield", symbols.NewBaseTypeBuilder("int", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithoutSourceCode().Build())

	// Define module std::thread::os
	module = moduleCollection["std::thread::os"]
	module.AddDistinct(symbols.NewDistinctBuilder("Pthread_attr_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong[7]", "std::thread::os").IsCollectionWithSize(7).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_cond_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong[6]", "std::thread::os").IsCollectionWithSize(6).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_condattr_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_key_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_mutex_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong[5]", "std::thread::os").IsCollectionWithSize(5).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_mutexattr_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_once_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("int", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_rwlock_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong[7]", "std::thread::os").IsCollectionWithSize(7).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_rwlockattr_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_sched_param", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build()).WithoutSourceCode().Build())

	// Define module std::os::process
	module = moduleCollection["std::os::process"]
	module.AddVariable(symbols.NewVariableBuilder("EMPTY_ENVIRONMENT", symbols.NewTypeBuilder("ZString[1]", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).AddStruct(symbols.NewStructBuilder("SubProcess", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("stdin_file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("stdout_file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("stderr_file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("hStdInput", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("hEventOutput", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("hEventError", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("child", symbols.NewTypeBuilder("Pid_t", "libc").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("return_status", symbols.NewBaseTypeBuilder("int", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("is_alive", symbols.NewBaseTypeBuilder("bool", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("SubProcessOptions", symbols.NewBaseTypeBuilder("int", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("combined_stdout_stderr", symbols.NewBaseTypeBuilder("bool", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("inherit_environment", symbols.NewBaseTypeBuilder("bool", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("read_async", symbols.NewBaseTypeBuilder("bool", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("no_window", symbols.NewBaseTypeBuilder("bool", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("search_user_path", symbols.NewBaseTypeBuilder("bool", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("SubProcessResult", "", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_CREATE_PIPE", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_OPEN_STDIN", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_OPEN_STDOUT", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_OPEN_STDERR", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_START_PROCESS", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_INITIALIZE_ACTIONS", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("PROCESS_JOIN_FAILED", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("PROCESS_TERMINATION_FAILED", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).WithConstant(symbols.NewFaultConstantBuilder("READ_FAILED", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("SubProcessResult").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("create_named_pipe_helper", symbols.NewBaseTypeBuilder("void!", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("rd", symbols.NewBaseTypeBuilder("void*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("wr", symbols.NewBaseTypeBuilder("void*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("convert_command_line_win32", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("command_line", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create", symbols.NewTypeBuilder("SubProcess!", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("command_line", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SubProcessOptions", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("environment", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy_command_line", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("command_line", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy_env", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("environment", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("execute_stdout_to_buffer", symbols.NewTypeBuilder("String!", "std::core::string").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char[]", "std::os::process").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("command_line", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SubProcessOptions", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("environment", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create", symbols.NewTypeBuilder("SubProcess!", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("command_line", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SubProcessOptions", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("environment", symbols.NewTypeBuilder("String[]", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("join", symbols.NewTypeBuilder("CInt!", "std::core::cinterop").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeBuilder("File", "std::io").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("join", symbols.NewTypeBuilder("CInt!", "std::core::cinterop").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("bool", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("terminate", symbols.NewBaseTypeBuilder("void!", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_from_file_win32", symbols.NewBaseTypeBuilder("usz!", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("event_handle", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_from_file_posix", symbols.NewBaseTypeBuilder("usz!", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_stdout", symbols.NewBaseTypeBuilder("usz!", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_stderr", symbols.NewBaseTypeBuilder("usz!", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_running", symbols.NewBaseTypeBuilder("bool!", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_ARCHIVE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_COMPRESSED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_DEVICE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_DIRECTORY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_EA", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_ENCRYPTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_HIDDEN", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_INTEGRITY_STREAM", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_NORMAL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_NOT_CONTENT_INDEXED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_NO_SCRUB_DATA", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_OFFLINE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_PINNED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_READONLY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_RECALL_ON_OPEN", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_REPARSE_POINT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_SPARSE_FILE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_SYSTEM", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_TEMPORARY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_UNPINNED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_VIRTUAL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("GENERIC_WRITE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAX_PATH", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("OPEN_EXISTING", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddStruct(symbols.NewStructBuilder("Win32_FILE_ATTRIBUTE_DATA", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwFileAttributes", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftCreationTime", symbols.NewTypeBuilder("Win32_FILETIME", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftLastAccessTime", symbols.NewTypeBuilder("Win32_FILETIME", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftLastWriteTime", symbols.NewTypeBuilder("Win32_FILETIME", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("nFileSizeHigh", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("nFileSizeLow", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_WIN32_FIND_DATAW", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwFileAttributes", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftCreationTime", symbols.NewTypeBuilder("Win32_FILETIME", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftLastAccessTime", symbols.NewTypeBuilder("Win32_FILETIME", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftLastWriteTime", symbols.NewTypeBuilder("Win32_FILETIME", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("nFileSizeHigh", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("nFileSizeLow", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwReserved0", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwReserved1", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("cFileName", symbols.NewTypeBuilder("Win32_WCHAR[260]", "std::os::win32").IsCollectionWithSize(260).Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("cAlternateFileName", symbols.NewTypeBuilder("Win32_WCHAR[14]", "std::os::win32").IsCollectionWithSize(14).Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwFileType", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwCreatorType", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("wFinderFlags", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWIN32_FIND_DATAW", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WIN32_FIND_DATAW*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("Win32_GET_FILEEX_INFO_LEVELS", "", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithEnumerator(symbols.NewEnumeratorBuilder("STANDARD", "<stdlib-path>/os/win32/files.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_GET_FILEEX_INFO_LEVELS").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MAX", "<stdlib-path>/os/win32/files.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_GET_FILEEX_INFO_LEVELS").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("closeHandle", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createPipe", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("hReadPipe", symbols.NewTypeBuilder("Win32_PHANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("hWritePipe", symbols.NewTypeBuilder("Win32_PHANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpPipeAttributes", symbols.NewTypeBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("nSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getFileAttributesExW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Win32_GET_FILEEX_INFO_LEVELS", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pathFileExistsW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getTempPathW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("nBufferLength", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpBuffer", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setCurrentDirectoryW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("Win32_LPCTSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("removeDirectoryW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("lpPathName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createDirectoryW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("lpPathName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpPipeAttributes", symbols.NewTypeBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("deleteFileW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("lpFileName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("findFirstFileW", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("lpFileName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpFindFileData", symbols.NewTypeBuilder("Win32_LPWIN32_FIND_DATAW", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("findNextFileW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("hFindFile", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpFindFileData", symbols.NewTypeBuilder("Win32_LPWIN32_FIND_DATAW", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("findClose", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("hFindFile", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createFileA", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("lpFileName", symbols.NewTypeBuilder("Win32_LPCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwDesiredAccess", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwShareMode", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpSecurityAttributes", symbols.NewTypeBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwCreationDisposition", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwFlagsAndAttributes", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("hTemplateFile", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("readFile", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("hFile", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpBuffer", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("nNumberOfBytesToRead", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpNumberOfBytesRead", symbols.NewTypeBuilder("Win32_LPDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpOverlapped", symbols.NewTypeBuilder("Win32_LPOVERLAPPED", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_wgetcwd", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("Char16*", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("maxlen", symbols.NewBaseTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wcslen", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_open_osfhandle", symbols.NewBaseTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("osfhandle", symbols.NewBaseTypeBuilder("iptr", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewBaseTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_get_osfhandle", symbols.NewBaseTypeBuilder("iptr", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewBaseTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_fdopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewBaseTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_access", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_waccess", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_wfullpath", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("absPath", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("relPath", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("maxLength", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddFunction(symbols.NewFunctionBuilder("createSolidBrush", symbols.NewTypeBuilder("Win32_HBRUSH", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_COLORREF", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setTextColor", symbols.NewTypeBuilder("Win32_COLORREF", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_HDC", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Win32_COLORREF", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setBkMode", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_HDC", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("textOut", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_HDC", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("ERROR_ACCESS_DENIED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ADAP_HDW_ERR", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ALREADY_ASSIGNED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ALREADY_EXISTS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ARENA_TRASHED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ATOMIC_LOCKS_NOT_SUPPORTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_AUTODATASEG_EXCEEDS_64K", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_ARGUMENTS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_COMMAND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_DEV_TYPE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_DRIVER_LEVEL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_ENVIRONMENT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_EXE_FORMAT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_FILE_TYPE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_FORMAT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_LENGTH", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_NETPATH", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_NET_NAME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_NET_RESP", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_PATHNAME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_PIPE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_REM_ADAP", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_THREADID_ADDR", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_UNIT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BROKEN_PIPE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BUFFER_OVERFLOW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BUSY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BUSY_DRIVE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CALL_NOT_IMPLEMENTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CANCEL_VIOLATION", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CANNOT_COPY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CANNOT_MAKE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CHECKOUT_REQUIRED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CHILD_NOT_COMPLETE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CRC", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CURRENT_DIRECTORY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DELETE_PENDING", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DEVICE_FEATURE_NOT_SUPPORTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DEVICE_SUPPORT_IN_PROGRESS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DEV_NOT_EXIST", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DIRECTORY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DIRECT_ACCESS_HANDLE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DIR_NOT_EMPTY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DIR_NOT_ROOT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DISCARDED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DISK_CHANGE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DISK_FULL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DISK_RESOURCES_EXHAUSTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DISK_TOO_FRAGMENTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DRIVE_LOCKED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DUPLICATE_PRIVILEGES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DUP_NAME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DYNLINK_FROM_INVALID_RING", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EAS_DIDNT_FIT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EAS_NOT_SUPPORTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EA_FILE_CORRUPT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EA_LIST_INCONSISTENT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EA_TABLE_FULL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ENVVAR_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EXCL_SEM_ALREADY_OWNED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EXE_MACHINE_TYPE_MISMATCH", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EXE_MARKED_INVALID", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FAIL_I24", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FILENAME_EXCED_RANGE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FILE_CHECKED_OUT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FILE_EXISTS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FILE_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FILE_TOO_LARGE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FORMS_AUTH_REQUIRED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_GEN_FAILURE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_HANDLE_DISK_FULL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_HANDLE_EOF", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INFLOOP_IN_RELOC_CHAIN", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INSUFFICIENT_BUFFER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_ACCESS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_AT_INTERRUPT_TIME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_BLOCK", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_CATEGORY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_DATA", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_DRIVE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_EA_HANDLE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_EA_NAME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_EVENT_COUNT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_EXCEPTION_HANDLER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_EXE_SIGNATURE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_FLAG_NUMBER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_FUNCTION", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_HANDLE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_LEVEL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_LIST_FORMAT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_LOCK_RANGE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_MINALLOCSIZE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_MODULETYPE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_NAME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_OPLOCK_PROTOCOL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_ORDINAL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_PARAMETER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_PASSWORD", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_SEGDPL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_SEGMENT_NUMBER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_SIGNAL_NUMBER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_STACKSEG", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_STARTING_CODESEG", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_TARGET_HANDLE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_TOKEN", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_VERIFY_SWITCH", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IOPL_NOT_ENABLED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IO_INCOMPLETE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IO_PENDING", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_JOINED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_JOIN_PATH", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_JOIN_TARGET", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_SUBSTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_SUBST_PATH", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_SUBST_TARGET", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ITERATED_DATA_EXCEEDS_64K", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_JOIN_TO_JOIN", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_JOIN_TO_SUBST", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_LABEL_TOO_LONG", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_LOCKED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_LOCK_FAILED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_LOCK_VIOLATION", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_MAX_THRDS_REACHED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_META_EXPANSION_TOO_LONG", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_MOD_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_MORE_DATA", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_MR_MID_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NEGATIVE_SEEK", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NESTING_NOT_ALLOWED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NETNAME_DELETED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NETWORK_ACCESS_DENIED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NETWORK_BUSY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NET_WRITE_FAULT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOTIFICATION_GUID_ALREADY_DEFINED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_ALLOWED_ON_SYSTEM_FILE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_DOS_DISK", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_ENOUGH_MEMORY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_JOINED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_LOCKED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_OWNER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_READY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_SAME_DEVICE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_SUBSTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_SUPPORTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_DATA", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_MORE_FILES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_MORE_ITEMS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_MORE_SEARCH_HANDLES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_PROC_SLOTS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_RANGES_PROCESSED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_SIGNAL_SENT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_SPOOL_SPACE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_VOLUME_LABEL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_OPEN_FAILED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_OPLOCK_NOT_GRANTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_OUTOFMEMORY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_OUT_OF_PAPER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_OUT_OF_STRUCTURES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PARTIAL_COPY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PATH_BUSY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PATH_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PIPE_BUSY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PIPE_LOCAL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PIPE_NOT_CONNECTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PRINTQ_FULL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PRINT_CANCELLED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PROC_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_READ_FAULT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_REDIR_PAUSED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_RELOC_CHAIN_XEEDS_SEGLIM", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_REM_NOT_LIST", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_REQ_NOT_ACCEP", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_RING2SEG_MUST_BE_MOVABLE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_RING2_STACK_IN_USE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SAME_DRIVE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SCOPE_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SECTOR_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SECURITY_STREAM_IS_INCONSISTENT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEEK", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEEK_ON_DEVICE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEM_IS_SET", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEM_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEM_OWNER_DIED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEM_TIMEOUT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEM_USER_LIMIT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SHARING_BUFFER_EXCEEDED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SHARING_PAUSED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SHARING_VIOLATION", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SIGNAL_PENDING", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SIGNAL_REFUSED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SUBST_TO_JOIN", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SUBST_TO_SUBST", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SYSTEM_TRACE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_THREAD_1_INACTIVE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_CMDS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_MODULES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_MUXWAITERS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_NAMES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_OPEN_FILES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_POSTS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_SEMAPHORES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_SEM_REQUESTS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_SESS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_TCBS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_UNDEFINED_SCOPE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_UNEXP_NET_ERR", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_VC_DISCONNECTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_VIRUS_DELETED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_VIRUS_INFECTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_WAIT_NO_CHILDREN", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_WRITE_FAULT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_WRITE_PROTECT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_WRONG_DISK", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("WAIT_TIMEOUT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddFunction(symbols.NewFunctionBuilder("getLastError", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddFunction(symbols.NewFunctionBuilder("_aligned_malloc", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_realloc", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_recalloc", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("num", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_free", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_msize", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_offset_malloc", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_offset_realloc", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_offset_recalloc", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("num", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_msize", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("ACCESS_SYSTEM_SECURITY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("CREATE_NO_WINDOW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("CREATE_PROTECTED_PROCESS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("CREATE_UNICODE_ENVIRONMENT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_FLAG_FIRST_PIPE_INSTANCE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_FLAG_OVERLAPPED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_FLAG_WRITE_THROUGH", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("HANDLE_FLAG_INHERIT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("HANDLE_FLAG_PROTECT_FROM_CLOSE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_AMD64", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_ARM64", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_I386", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_IA64", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_TARGET_HOST", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_UNKNOWN", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("INFINITE", symbols.NewTypeBuilder("uint", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_ACCEPT_REMOTE_CLIENTS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_ACCESS_DUPLEX", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_ACCESS_INBOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_ACCESS_OUTBOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_NOWAIT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_READMODE_BYTE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_READMODE_MESSAGE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_REJECT_REMOTE_CLIENTS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_TYPE_BYTE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_TYPE_MESSAGE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_WAIT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("STARTF_USESTDHANDLES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_CASE_INSENSITIVE", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_DEFERRED_LOADS", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_IGNORE_CVREC", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_LOAD_ANYTHING", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_LOAD_LINES", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_NO_CPP", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_OMAP_FIND_NEAREST", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_UNDNAME", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("UNDNAME_COMPLETE", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WAIT_ABANDONED", symbols.NewTypeBuilder("uint", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WAIT_FAILED", symbols.NewTypeBuilder("uint", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WAIT_IO_COMPLETION", symbols.NewTypeBuilder("uint", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WAIT_OBJECT_0", symbols.NewTypeBuilder("uint", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WRITE_DAC", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WRITE_OWNER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("displacement", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddStruct(symbols.NewStructBuilder("Symbol", "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithStructMember("sym", symbols.NewTypeBuilder("Win32_SYMBOL_INFO", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithStructMember("buffer", symbols.NewBaseTypeBuilder("char[256]", "std::os::win32").IsCollectionWithSize(256).Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("initializeCriticalSection", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("section", symbols.NewTypeBuilder("Win32_CRITICAL_SECTION*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("deleteCriticalSection", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("section", symbols.NewTypeBuilder("Win32_CRITICAL_SECTION*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createMutex", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("releaseMutex", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("enterCriticalSection", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("section", symbols.NewTypeBuilder("Win32_CRITICAL_SECTION*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("leaveCriticalSection", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("section", symbols.NewTypeBuilder("Win32_CRITICAL_SECTION*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tryEnterCriticalSection", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("section", symbols.NewTypeBuilder("Win32_CRITICAL_SECTION*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("waitForSingleObject", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hHandle", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwMilliseconds", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("waitForSingleObjectEx", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hHandle", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwMilliseconds", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bAlertable", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("waitForMultipleObjects", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("nCount", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpHandles", symbols.NewTypeBuilder("Win32_HANDLE*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bWaitAll", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwMilliseconds", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("waitForMultipleObjectsEx", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("nCount", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpHandles", symbols.NewTypeBuilder("Win32_HANDLE*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bWaitAll", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwMilliseconds", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bAlertable", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleep", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resetEvent", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("event", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setEvent", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("handle", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("interlockedCompareExchange", symbols.NewBaseTypeBuilder("long", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("int*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("exchange", symbols.NewBaseTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("comperand", symbols.NewBaseTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleepEx", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("ms", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("alertable", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createThread", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("attributes", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("stack", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("ThreadFn", "std::thread").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("thread_id", symbols.NewTypeBuilder("Win32_LPDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getExitCodeThread", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("handle", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("exit_code", symbols.NewTypeBuilder("Win32_LPDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getExitCodeProcess", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpExitCode", symbols.NewTypeBuilder("Win32_LPDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getThreadId", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exitThread", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("dwExitCode", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getCurrentThread", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("terminateProcess", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("uExitCode", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getCurrentProcessId", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getCurrentProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getCurrentThreadId", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setHandleInformation", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hObject", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwMask", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createEventA", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpEventAttributes", symbols.NewTypeBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bManualReset", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bInitialState", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpName", symbols.NewTypeBuilder("Win32_LPCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createProcessW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpApplicationName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpCommandLine", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpProcessAttributes", symbols.NewTypeBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpThreadAttributes", symbols.NewTypeBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bInheritHandles", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwCreationFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpEnvironment", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpCurrentDirectory", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpStartupInfo", symbols.NewTypeBuilder("Win32_LPSTARTUPINFOW", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpProcessInformation", symbols.NewTypeBuilder("Win32_LPPROCESS_INFORMATION", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createNamedPipeA", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpName", symbols.NewTypeBuilder("Win32_LPCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwOpenMode", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwPipeMode", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nMaxInstances", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nOutBufferSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nInBufferSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nDefaultTimeOut", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpSecurityAttributes", symbols.NewTypeBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getOverlappedResult", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hFile", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpOverlapped", symbols.NewTypeBuilder("Win32_LPOVERLAPPED", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpNumberOfBytesTransferred", symbols.NewTypeBuilder("Win32_LPDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bWait", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getEnvironmentVariableW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpBuffer", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setEnvironmentVariableW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpValue", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getSystemInfo", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpSystemInfo", symbols.NewTypeBuilder("Win32_LPSYSTEM_INFO", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("enumProcessModules", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lphModule", symbols.NewTypeBuilder("Win32_HMODULE*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("cb", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpcbNeeded", symbols.NewTypeBuilder("Win32_LPDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleInformation", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hModule", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpmodinfo", symbols.NewTypeBuilder("Win32_LPMODULEINFO", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("cb", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symAddrIncludeInlineTrace", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symQueryInlineTrace", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("startAddress", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("startContext", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("startRetAddress", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("curAddress", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("curContext", symbols.NewTypeBuilder("Win32_LPDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("curFrameIndex", symbols.NewTypeBuilder("Win32_LPDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symFromInlineContext", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("inlineContext", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("displacement", symbols.NewTypeBuilder("Win32_PDWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("symbol", symbols.NewTypeBuilder("Win32_PSYMBOL_INFO", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symGetLineFromInlineContext", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("qwAddr", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("inlineContext", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("qwModuleBaseAddress", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("pdwDisplacement", symbols.NewTypeBuilder("Win32_PDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("line64", symbols.NewTypeBuilder("Win32_PIMAGEHLP_LINE64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rtlWalkFrameChain", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_PVOID*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symInitialize", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("userSearchPath", symbols.NewTypeBuilder("Win32_PCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("fInvadeProcess", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symCleanup", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleFileNameA", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hModule", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpFilename", symbols.NewTypeBuilder("Win32_LPSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleFileNameExA", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hModule", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpFilename", symbols.NewTypeBuilder("Win32_LPSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symLoadModuleEx", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hFile", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("imageName", symbols.NewTypeBuilder("Win32_PCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("moduleName", symbols.NewTypeBuilder("Win32_PCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("baseOfDll", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dllSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewTypeBuilder("Win32_PMODLOAD_DATA", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stackWalk64", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("machineType", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hThread", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("stackFrame", symbols.NewTypeBuilder("Win32_LPSTACKFRAME64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("contextRecord", symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("readMemoryRoutine", symbols.NewTypeBuilder("Win32_PREAD_PROCESS_MEMORY_ROUTINE64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("functionTableAccessRoutine", symbols.NewTypeBuilder("Win32_PFUNCTION_TABLE_ACCESS_ROUTINE64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("getModuleBaseRoutine", symbols.NewTypeBuilder("Win32_PGET_MODULE_BASE_ROUTINE64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("translateAddress", symbols.NewTypeBuilder("Win32_PTRANSLATE_ADDRESS_ROUTINE64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rtlCaptureContext", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("contextRecord", symbols.NewTypeBuilder("Win32_PCONTEXT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symFunctionTableAccess64", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("addrBase", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symGetModuleBase64", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("qwAddr", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleBaseNameA", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hModule", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpBaseName", symbols.NewTypeBuilder("Win32_LPSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symGetOptions", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symSetOptions", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("symOptions", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("imageNtHeader", symbols.NewTypeBuilder("Win32_PIMAGE_NT_HEADERS", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("base", symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unDecorateSymbolName", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("Win32_PCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("outputString", symbols.NewTypeBuilder("Win32_PSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("maxStringLength", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symFromAddr", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("displacement", symbols.NewTypeBuilder("Win32_PDWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("symbol", symbols.NewTypeBuilder("Win32_PSYMBOL_INFO", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symGetLineFromAddr64", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwAddr", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("pdwDisplacement", symbols.NewTypeBuilder("Win32_PDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", symbols.NewTypeBuilder("Win32_PIMAGEHLP_LINE64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rtlCaptureStackBackTrace", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("framesToSkip", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("framesToCapture", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("backTrace", symbols.NewTypeBuilder("Win32_PVOID*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("backTraceHash", symbols.NewTypeBuilder("Win32_PDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symGetModuleInfo64", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("qwAddr", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("moduleInfo", symbols.NewTypeBuilder("Win32_PIMAGEHLP_MODULE64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleHandleA", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpModuleName", symbols.NewTypeBuilder("Win32_LPCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleHandleW", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpModuleName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load_modules", symbols.NewTypeBuilder("Win32_DWORD!", "std::os::win32").IsOptional().Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symbolize_backtrace", symbols.NewTypeBuilder("BacktraceList!", "std::os::backtrace").IsOptional().Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("backtrace", symbols.NewBaseTypeBuilder("void*[]", "std::os::win32").IsUnsizedCollection().Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resolve_backtrace", symbols.NewTypeBuilder("Backtrace!", "std::os::backtrace").IsOptional().Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("process", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("ARM64_MAX_BREAKPOINTS", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("ARM64_MAX_WATCHPOINTS", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_ALL", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_CONTROL", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_DEBUG_REGISTERS", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_FLOATING_POINT", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_FULL", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_INTEGER", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_SEGMENTS", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("INVALID_HANDLE_VALUE", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddStruct(symbols.NewStructBuilder("Win32_ADDRESS64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("offset", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segment", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("mode", symbols.NewTypeBuilder("Win32_ADDRESS_MODE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_AMD64_CONTEXT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p1Home", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p2Home", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p3Home", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p4Home", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p5Home", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p6Home", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("contextFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("mxCsr", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segCs", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segDs", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segEs", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segFs", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segGs", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segSs", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("eFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr0", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr1", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr2", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr3", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr6", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr7", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rax", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rcx", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rdx", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rbx", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rsp", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rbp", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rsi", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rdi", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r8", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r9", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r10", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r11", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r12", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r13", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r14", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r15", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rip", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fltSave", symbols.NewTypeBuilder("Win32_XMM_SAVE_AREA32", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("d", symbols.NewTypeBuilder("Win32_ULONGLONG[32]", "std::os::win32").IsCollectionWithSize(32).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("header", symbols.NewTypeBuilder("Win32_M128A[2]", "std::os::win32").IsCollectionWithSize(2).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("legacy", symbols.NewTypeBuilder("Win32_M128A[8]", "std::os::win32").IsCollectionWithSize(8).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm0", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm1", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm2", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm3", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm4", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm5", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm6", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm7", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm8", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm9", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm10", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm11", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm12", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm13", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm14", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm15", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("s", symbols.NewTypeBuilder("Win32_DWORD[32]", "std::os::win32").IsCollectionWithSize(32).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("vectorRegister", symbols.NewTypeBuilder("Win32_M128A[26]", "std::os::win32").IsCollectionWithSize(26).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("vectorControl", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("debugControl", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lastBranchToRip", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lastBranchFromRip", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lastExceptionToRip", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lastExceptionFromRip", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_ARM64_NT_CONTEXT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("contextFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cpsr", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x0", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x1", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x2", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x3", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x4", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x5", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x6", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x7", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x8", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x9", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x10", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x11", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x12", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x13", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x14", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x15", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x16", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x17", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x18", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x19", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x20", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x21", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x22", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x23", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x24", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x25", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x26", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x27", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x28", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fp", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lr", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x", symbols.NewTypeBuilder("Win32_DWORD64[31]", "std::os::win32").IsCollectionWithSize(31).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sp", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pc", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("v", symbols.NewTypeBuilder("Win32_ARM64_NT_NEON128[32]", "std::os::win32").IsCollectionWithSize(32).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fpcr", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fpsr", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("bcr", symbols.NewTypeBuilder("Win32_DWORD[]", "std::os::win32").IsUnsizedCollection().Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("bvr", symbols.NewTypeBuilder("Win32_DWORD64[]", "std::os::win32").IsUnsizedCollection().Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wcr", symbols.NewTypeBuilder("Win32_DWORD[]", "std::os::win32").IsUnsizedCollection().Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wvr", symbols.NewTypeBuilder("Win32_DWORD64[]", "std::os::win32").IsUnsizedCollection().Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_ARM64_NT_NEON128", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("low", symbols.NewTypeBuilder("Win32_ULONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("high", symbols.NewTypeBuilder("Win32_LONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_FILETIME", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwLowDateTime", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwHighDateTime", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_GUID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("data1", symbols.NewTypeBuilder("CULong", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("data2", symbols.NewTypeBuilder("CUShort", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("data3", symbols.NewTypeBuilder("CUShort", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("data4", symbols.NewBaseTypeBuilder("char[8]", "std::os::win32").IsCollectionWithSize(8).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGEHLP_LINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfStruct", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("key", symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lineNumber", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fileName", symbols.NewTypeBuilder("Win32_PCHAR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("address", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGEHLP_MODULE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfStruct", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("baseOfImage", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("imageSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("timeDateStamp", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("checkSum", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("numSyms", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("symType", symbols.NewTypeBuilder("Win32_SYM_TYPE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("moduleName", symbols.NewTypeBuilder("Win32_CHAR[32]", "std::os::win32").IsCollectionWithSize(32).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("imageName", symbols.NewTypeBuilder("Win32_CHAR[256]", "std::os::win32").IsCollectionWithSize(256).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("loadedImageName", symbols.NewTypeBuilder("Win32_CHAR[256]", "std::os::win32").IsCollectionWithSize(256).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("loadedPdbName", symbols.NewTypeBuilder("Win32_CHAR[256]", "std::os::win32").IsCollectionWithSize(256).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cVSig", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cVData", symbols.NewTypeBuilder("Win32_CHAR*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pdbSig", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pdbSig70", symbols.NewTypeBuilder("Win32_GUID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pdbAge", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pdbUnmatched", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dbgUnmatched", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lineNumbers", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("globalSymbols", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("typeInfo", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sourceIndexed", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("publics", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("machineType", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGE_DATA_DIRECTORY", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("virtualAddress", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("size", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGE_FILE_HEADER", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("machine", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("numberOfSections", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("timeDateStamp", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pointerToSymbolTable", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("numberOfSymbols", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfOptionalHeader", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("characteristics", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGE_NT_HEADERS", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("signature", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fileHeader", symbols.NewTypeBuilder("Win32_IMAGE_FILE_HEADER", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("optionalHeader", symbols.NewTypeBuilder("Win32_IMAGE_OPTIONAL_HEADER64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGE_OPTIONAL_HEADER64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("magic", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("majorLinkerVersion", symbols.NewTypeBuilder("Win32_BYTE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("minorLinkerVersion", symbols.NewTypeBuilder("Win32_BYTE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfCode", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfInitializedData", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfUninitializedData", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addressOfEntryPoint", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("baseOfCode", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("imageBase", symbols.NewTypeBuilder("Win32_ULONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sectionAlignment", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fileAlignment", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("majorOperatingSystemVersion", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("minorOperatingSystemVersion", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("majorImageVersion", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("minorImageVersion", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("majorSubsystemVersion", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("minorSubsystemVersion", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("win32VersionValue", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfImage", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfHeaders", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("checkSum", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("subsystem", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dllCharacteristics", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfStackReserve", symbols.NewTypeBuilder("Win32_ULONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfStackCommit", symbols.NewTypeBuilder("Win32_ULONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfHeapReserve", symbols.NewTypeBuilder("Win32_ULONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfHeapCommit", symbols.NewTypeBuilder("Win32_ULONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("loaderFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("numberOfRvaAndSizes", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dataDirectory", symbols.NewTypeBuilder("Win32_IMAGE_DATA_DIRECTORY[16]", "std::os::win32").IsCollectionWithSize(16).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_KDHELP64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("thread", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("thCallbackStack", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("thCallbackBStore", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("nextCallback", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("framePointer", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("kiCallUserMode", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("keUserCallbackDispatcher", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("systemRangeStart", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("kiUserExceptionDispatcher", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("stackBase", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("stackLimit", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("buildVersion", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("retpolineStubFunctionTableSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("retpolineStubFunctionTable", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("retpolineStubOffset", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("retpolineStubSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved0", symbols.NewTypeBuilder("Win32_DWORD64[2]", "std::os::win32").IsCollectionWithSize(2).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_LARGE_INTEGER", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lowPart", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("highPart", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("quadPart", symbols.NewBaseTypeBuilder("ulong", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("low", symbols.NewTypeBuilder("Win32_ULONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("high", symbols.NewTypeBuilder("Win32_LONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_MODLOAD_DATA", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("ssize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("ssig", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("data", symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("size", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("flags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_MODULEINFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpBaseOfDll", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfImage", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("entryPoint", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_OVERLAPPED", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("internal", symbols.NewTypeBuilder("Win32_ULONG_PTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("internalHigh", symbols.NewTypeBuilder("Win32_ULONG_PTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("offset", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("offsetHigh", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pointer", symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hEvent", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_PROCESS_INFORMATION", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hThread", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwProcessId", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwThreadId", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_SECURITY_ATTRIBUTES", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("nLength", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpSecurityDescriptor", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("bInheritHandle", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_STACKFRAME64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addrPC", symbols.NewTypeBuilder("Win32_ADDRESS64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addrReturn", symbols.NewTypeBuilder("Win32_ADDRESS64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addrFrame", symbols.NewTypeBuilder("Win32_ADDRESS64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addrStack", symbols.NewTypeBuilder("Win32_ADDRESS64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addrBStore", symbols.NewTypeBuilder("Win32_ADDRESS64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("funcTableEntry", symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("params", symbols.NewTypeBuilder("Win32_DWORD64[4]", "std::os::win32").IsCollectionWithSize(4).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("far", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("virtual", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved", symbols.NewTypeBuilder("Win32_DWORD64[3]", "std::os::win32").IsCollectionWithSize(3).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("kdHelp", symbols.NewTypeBuilder("Win32_KDHELP64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_STARTUPINFOEXW", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("win32_StartupInfo", symbols.NewTypeBuilder("Win32_STARTUPINFOW", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpAttributeList", symbols.NewTypeBuilder("Win32_LPPROC_THREAD_ATTRIBUTE_LIST", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cb", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpReserved", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpDesktop", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpTitle", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwX", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwXSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwYSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwXCountChars", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwYCountChars", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwFillAttribute", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wShowWindow", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cbReserved2", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpReserved2", symbols.NewTypeBuilder("Win32_LPBYTE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdInput", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdOutput", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdError", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_STARTUPINFOW", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cb", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpReserved", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpDesktop", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpTitle", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwX", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwXSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwYSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwXCountChars", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwYCountChars", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwFillAttribute", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wShowWindow", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cbReserved2", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpReserved2", symbols.NewTypeBuilder("Win32_LPBYTE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdInput", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdOutput", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdError", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_SYMBOL_INFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfStruct", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("typeIndex", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved", symbols.NewTypeBuilder("Win32_ULONG64[2]", "std::os::win32").IsCollectionWithSize(2).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("index", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("size", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("modBase", symbols.NewTypeBuilder("Win32_ULONG64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("flags", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("value", symbols.NewTypeBuilder("Win32_ULONG64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("address", symbols.NewTypeBuilder("Win32_ULONG64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("register", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("scope", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("tag", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("nameLen", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("maxNameLen", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("name", symbols.NewTypeBuilder("Win32_CHAR[1]", "std::os::win32").IsCollectionWithSize(1).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_SYSTEM_INFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwOemId", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wProcessorArchitecture", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wReserved", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwPageSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpMinimumApplicationAddress", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpMaximumApplicationAddress", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwActiveProcessorMask", symbols.NewTypeBuilder("Win32_DWORD_PTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwNumberOfProcessors", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwProcessorType", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwAllocationGranularity", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wProcessorLevel", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wProcessorRevision", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_UNICODE_STRING", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("length", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("maximum_length", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("buffer", symbols.NewTypeBuilder("Win32_PWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_XMM_SAVE_AREA32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("controlWord", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("statusWord", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("tagWord", symbols.NewTypeBuilder("Win32_UCHAR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved1", symbols.NewTypeBuilder("Win32_UCHAR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("errorOpcode", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("errrorOffset", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("errorSelector", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved2", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dataOffset", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dataSelector", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved3", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("mxCsr", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("mxCsr_Mask", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("floatRegisters", symbols.NewTypeBuilder("Win32_M128A[8]", "std::os::win32").IsCollectionWithSize(8).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmmRegisters", symbols.NewTypeBuilder("Win32_M128A[16]", "std::os::win32").IsCollectionWithSize(16).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved4", symbols.NewTypeBuilder("Win32_UCHAR[96]", "std::os::win32").IsCollectionWithSize(96).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CONTEXT_ALL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("CONTEXT_AMD64_ALL").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CONTEXT_CONTROL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("CONTEXT_AMD64_CONTROL").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CONTEXT_FULL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("CONTEXT_AMD64_FULL").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_BOOLEAN", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_BYTE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_BYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("char", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_CCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("CChar", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_CHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("CChar", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_COLORREF", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_CONTEXT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_AMD64_CONTEXT", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_DWORD32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_DWORDLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_DWORD_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_ULONG_PTR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_FLOAT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("float", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HACCEL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HALF_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HBITMAP", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HBRUSH", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HCOLORSPACE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HCONV", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HCONVLIST", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HCURSOR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HICON", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HDC", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HDDEDATA", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HDESK", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HDROP", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HDWP", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HFILE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HFONT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HGDIOBJ", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HGLOBAL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HHOOK", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HICON", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HINSTANCE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HKEY", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HKL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HLOCAL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HMENU", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HMETAFILE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HMODULE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HMONITOR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HPALETTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HPEN", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HRESULT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HRGN", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HRSRC", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HSZ", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HWINSTA", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HWND", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT16", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("short", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT8", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ichar", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("iptr", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LANGID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LCID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LCTYPE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LGRPID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LONG32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LONG64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LONG_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("iptr", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPADDRESS64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_ADDRESS64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPARAM", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONG_PTR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPBOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_BOOL*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPBYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_BYTE*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPCOLORREF", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPCSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_CCHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPCTSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPCVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPCWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WCHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPDWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPHANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPINT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPMODULEINFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_MODULEINFO*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPOVERLAPPED", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_OVERLAPPED*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPPROCESS_INFORMATION", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_PROCESS_INFORMATION*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPPROC_THREAD_ATTRIBUTE_LIST", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SECURITY_ATTRIBUTES*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSTACKFRAME64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_STACKFRAME64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSTARTUPINFOEXW", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_STARTUPINFOEXW*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSTARTUPINFOW", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_STARTUPINFOW*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_CCHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSYSTEM_INFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SYSTEM_INFO*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPTSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WORD*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WCHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LRESULT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONG_PTR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PBOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_BOOL*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PBOOLEAN", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_BOOLEAN*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PBYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_BYTE*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_CHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCONTEXT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_CONTEXT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_CHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCTSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCUNICODE_STRING", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UNICODE_STRING*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("WString", "std::core::string").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PDWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PDWORD32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD32*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PDWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PDWORDLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORDLONG*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PDWORDPTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD_PTR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PFLOAT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_FLOAT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PFUNCTION_TABLE_ACCESS_ROUTINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("fn Win32_PVOID(Win32_HANDLE ahProcess, Win32_DWORD64 addrBase)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PGET_MODULE_BASE_ROUTINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("fn Win32_DWORD64(Win32_HANDLE hProcess, Win32_DWORD64 address)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PHALFPTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HALF_PTR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PHANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PHKEY", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HKEY*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PIMAGEHLP_LINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_IMAGEHLP_LINE64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PIMAGEHLP_MODULE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_IMAGEHLP_MODULE64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PIMAGE_FILE_HEADER", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_IMAGE_FILE_HEADER*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PIMAGE_NT_HEADERS", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_IMAGE_NT_HEADERS*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PIMAGE_OPTIONAL_HEADER64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_IMAGE_OPTIONAL_HEADER64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINT16", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_INT16*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINT32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_INT32*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINT64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_INT64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINT8", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_INT8*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINTPTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_INT_PTR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PKDHELP64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_KDHELP64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLCID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_PDWORD", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONG*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLONG32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONG32*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLONG64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONG64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONGLONG*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLONG_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONG_PTR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PMODLOAD_DATA", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_MODLOAD_DATA*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_POINTER_32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_POINTER_64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uptr", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_POINTER_SIGNED", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("iptr", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_POINTER_UNSIGNED", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uptr", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PPROCESS_INFORMATION", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_PROCESS_INFORMATION*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PREAD_PROCESS_MEMORY_ROUTINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("fn Win32_BOOL(Win32_HANDLE hProcess, Win32_DWORD64 qwBaseAddress, Win32_PVOID lpBuffer, Win32_DWORD nSize, Win32_LPDWORD lpNumberOfBytesRead)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSECURITY_ATTRIBUTES", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SECURITY_ATTRIBUTES*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SHORT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSIZE_T", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("usz*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSSIZE_T", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("isz*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_CHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSYMBOL_INFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SYMBOL_INFO*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PTBYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_TBYTE*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PTCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_TCHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PTRANSLATE_ADDRESS_ROUTINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("fn Win32_DWORD64(Win32_HANDLE hProcess, Win32_HANDLE hThread, Win32_LPADDRESS64 lpaddr)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PTSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UCHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUHALFPTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UHALF_PTR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UINT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINT16", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UINT16*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINT32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UINT32*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINT64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UINT64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINT8", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UINT8*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINTPTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UINT_PTR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_ULONG*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PULONG32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_ULONG32*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PULONG64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_ULONG64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PULONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_ULONGLONG*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PULONG_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_ULONG_PTR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUNICODE_STRING", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UNICODE_STRING*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUSHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_USHORT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PWCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WCHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WORD*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WCHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_QWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SC_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SC_LOCK", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SERVICE_STATUS_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("short", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SIZE_T", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SOCKET", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SSIZE_T", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("isz", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_TBYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WCHAR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_TCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WCHAR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("char", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UHALF_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT16", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT8", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("char", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uptr", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ULONG32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ULONG64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ULONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ULONG_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_USHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_USN", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONGLONG", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_WCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Char16", "std::core::string").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_WPARAM", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UINT_PTR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Win32_CRITICAL_SECTION", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong[5]", "std::os::win32").IsCollectionWithSize(5).Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("Win32_ADDRESS_MODE", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithEnumerator(symbols.NewEnumeratorBuilder("ADDR_MODE_1616", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_ADDRESS_MODE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ADDR_MODE_1632", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_ADDRESS_MODE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ADDR_MODE_REAL", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_ADDRESS_MODE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ADDR_MODE_FLAT", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_ADDRESS_MODE").Build()).Build()).AddEnum(symbols.NewEnumBuilder("Win32_SYM_TYPE", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithEnumerator(symbols.NewEnumeratorBuilder("SYM_NONE", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_COFF", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_CV", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_PDB", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_EXPORT", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_DEFERRED", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_SYM", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_DIA", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_VIRTUAL", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddStruct(symbols.NewStructBuilder("Win32_POINT", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("x", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("y", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_RECT", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("left", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("top", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("right", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("bottom", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_SIZE", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("cx", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("cy", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPOINT", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_POINT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPRECT", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_RECT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSIZE", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SIZE*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_NPOINT", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_POINT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_NPRECT", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_RECT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_NPSIZE", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SIZE*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PPOINT", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_POINT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PRECT", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_RECT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSIZE", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SIZE*", "std::os::win32").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("GWLP_HINSTANCE", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWLP_HWNDPARENT", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWLP_ID", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWLP_USERDATA", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWLP_WNDPROC", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWL_EXSTYLE", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWL_HINSTANCE", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWL_HWNDPARENT", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWL_ID", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWL_STYLE", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWL_USERDATA", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWL_WNDPROC", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_ABORTRETRYIGNORE", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_CANCELTRYCONTINUE", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_ICONASTERISK", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_ICONEXCLAMATION", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_ICONHAND", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_ICONQUESTION", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_OK", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_OKCANCEL", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_RETRYCANCEL", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_USERICON", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_YESNO", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_YESNOCANCEL", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_BORDER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_CAPTION", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_CHILD", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_CHILDWINDOW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_CLIPCHILDREN", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_CLIPSIBLINGS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_DISABLED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_DLGFRAME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_GROUP", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_HSCROLL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_ICONIC", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_MAXIMIZE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_MAXIMIZEBOX", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_MINIMIZE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_MINIMIZEBOX", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_OVERLAPPED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_OVERLAPPEDWINDOW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_POPUP", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_POPUPWINDOW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_SIZEBOX", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_SYSMENU", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_TABSTOP", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_THICKFRAME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_TILED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_TILEDWINDOW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_VISIBLE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_VSCROLL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddStruct(symbols.NewStructBuilder("Win32_MSG", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("hwnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("message", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("wParam", symbols.NewTypeBuilder("Win32_WPARAM", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("lParam", symbols.NewTypeBuilder("Win32_LPARAM", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("time", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("pt", symbols.NewTypeBuilder("Win32_POINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("lPrivate", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_PAINTSTRUCT", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("hdc", symbols.NewTypeBuilder("Win32_HDC", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("fErase", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("rcPaint", symbols.NewTypeBuilder("Win32_RECT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("fRestore", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("fIncUpdate", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("rgbReserved", symbols.NewTypeBuilder("Win32_BYTE[32]", "std::os::win32").IsCollectionWithSize(32).Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_WNDCLASSEXW", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("cbSize", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("style", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("lpfnWndProc", symbols.NewTypeBuilder("Win32_WNDPROC", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("cbClsExtra", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("cbWndExtra", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("hInstance", symbols.NewTypeBuilder("Win32_HINSTANCE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("hIcon", symbols.NewTypeBuilder("Win32_HICON", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("hCursor", symbols.NewTypeBuilder("Win32_HCURSOR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("hbrBackground", symbols.NewTypeBuilder("Win32_HBRUSH", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("lpszMenuName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("lpszClassName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("hIconSm", symbols.NewTypeBuilder("Win32_HICON", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ATOM", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPMSG", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_MSG*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPPAINTSTRUCT", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_PAINTSTRUCT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWNDCLASSEXW", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WNDCLASSEXW*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_NPMSG", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_MSG*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_NPPAINTSTRUCT", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_PAINTSTRUCT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_NPWNDCLASSEXW", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WNDCLASSEXW*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PMSG", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_MSG*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PPAINTSTRUCT", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_PAINTSTRUCT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PWNDCLASSEXW", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WNDCLASSEXW*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_WNDPROC", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesTo("fn Win32_LRESULT(Win32_HWND, Win32_UINT, Win32_WPARAM, Win32_LPARAM)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("beginPaint", symbols.NewTypeBuilder("Win32_HDC", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Win32_LPPAINTSTRUCT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("callWindowProcW", symbols.NewTypeBuilder("Win32_LRESULT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("lpPrevWndFunc", symbols.NewTypeBuilder("Win32_WNDPROC", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("msg", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("wParam", symbols.NewTypeBuilder("Win32_WPARAM", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("lParam", symbols.NewTypeBuilder("Win32_LPARAM", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createWindowExW", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg4", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg5", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg6", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg7", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg8", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg9", symbols.NewTypeBuilder("Win32_HMENU", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg10", symbols.NewTypeBuilder("Win32_HINSTANCE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg11", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("defWindowProcW", symbols.NewTypeBuilder("Win32_LRESULT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("Win32_WPARAM", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewTypeBuilder("Win32_LPARAM", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dispatchMessage", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("lpMsg", symbols.NewTypeBuilder("Win32_MSG*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("endPaint", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Win32_LPPAINTSTRUCT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getMessageW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_LPMSG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg3", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getUpdateRect", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpRect", symbols.NewTypeBuilder("Win32_LPRECT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("bErase", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getWindowLongPtrW", symbols.NewTypeBuilder("Win32_LONG_PTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("nIndex", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getWindowLongW", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("nIndex", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("loadCursorW", symbols.NewTypeBuilder("Win32_HCURSOR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("instance", symbols.NewTypeBuilder("Win32_HINSTANCE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("cursorName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("loadIconW", symbols.NewTypeBuilder("Win32_HICON", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("instance", symbols.NewTypeBuilder("Win32_HINSTANCE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("iconName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("messageBoxW", symbols.NewBaseTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpText", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpCaption", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("uType", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("postQuitMessage", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("registerClassExW", symbols.NewTypeBuilder("Win32_ATOM", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_WNDCLASSEXW*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setWindowLongPtrW", symbols.NewTypeBuilder("Win32_LONG_PTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("nIndex", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwNewLong", symbols.NewTypeBuilder("Win32_LONG_PTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setWindowLongW", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("nIndex", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwNewLong", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("showWindow", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("translateMessage", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("lpMsg", symbols.NewTypeBuilder("Win32_MSG*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("updateWindow", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getWindowLongPtr", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("nIndex", symbols.NewTypeBuilder("CInt", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setWindowLongPtr", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("nIndex", symbols.NewTypeBuilder("CInt", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwNewLong", symbols.NewTypeBuilder("", "").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("FIONBIO", symbols.NewTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("FIONREAD", symbols.NewTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLERR", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLHUP", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLIN", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLNVAL", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLPRI", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDBAND", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDNORM", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRBAND", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRNORM", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SD_BOTH", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SD_RECEIVE", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SD_SEND", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIOCATMARK", symbols.NewTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddStruct(symbols.NewStructBuilder("Win32_pollfd", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("fd", symbols.NewTypeBuilder("Win32_SOCKET", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("events", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("revents", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWSAPOLLFD", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WSAPOLLFD*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PWSAPOLLFD", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WSAPOLLFD*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_WSAPOLLFD", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_pollfd", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("WSAError", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("int", "std::os::win32").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("win32_WSAPoll", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithArgument(symbols.NewVariableBuilder("fdArray", symbols.NewTypeBuilder("Win32_LPWSAPOLLFD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithArgument(symbols.NewVariableBuilder("fds", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", symbols.NewTypeBuilder("Win32_INT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("win32_WSAGetLastError", symbols.NewTypeBuilder("WSAError", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("win32_WSASetLastError", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithArgument(symbols.NewVariableBuilder("error", symbols.NewTypeBuilder("WSAError", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("win32_WSAStartup", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("win32_WSACleanup", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithoutSourceCode().Build())

	// Define module std::os::win32::wsa
	module = moduleCollection["std::os::win32::wsa"]
	module.AddVariable(symbols.NewVariableBuilder("EACCESS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EADDRINUSE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EADDRNOTAVAIL", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EAFNOSUPPORT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EALREADY", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADF", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECANCELLED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNABORTED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNREFUSED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNRESET", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDESTADDRREQ", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDISCON", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDQUOT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EFAULT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EHOSTDOWN", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EHOSTUNREACH", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINPROGRESS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINTR", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINVAL", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINVALIDPROCTABLE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINVALIDPROVIDER", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EISCONN", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ELOOP", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMFILE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMSGSIZE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENAMETOOLONG", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETDOWN", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETRESET", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETUNREACH", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOBUFS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOMORE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOPROTOOPT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTCONN", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTEMPTY", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTSOCK", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EOPNOTSUPP", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPFNOSUPPORT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROCLIM", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROTONOSUPPORT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROTOTYPE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROVIDERFAILEDINIT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EREMOTE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESHUTDOWN", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESOCKTNOSUPPORT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESTALE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ETIMEDOUT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ETOOMANYREFS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EUSERS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EWOULDBLOCK", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("E_CANCELLED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("E_NO_MORE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("HOST_NOT_FOUND", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("INVALID_HANDLE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("INVALID_PARAMETER", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("IO_INCOMPLETE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("IO_PENDING", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("NOTINITIALISED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("NOT_ENOUGH_MEMORY", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_DATA", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_ERROR", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_RECOVERY", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("OPERATION_ABORTED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_ADMISSION_FAILURE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_BAD_OBJECT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_BAD_STYLE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFILTERCOUNT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFILTERSTYLE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFILTERTYPE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFLOWCOUNT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFLOWDESC", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFLOWSPEC", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EOBJLENGTH", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EPOLICYOBJ", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EPROVSPECBUF", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EPSFILTERSPEC", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EPSFLOWSPEC", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_ESDMODEOBJ", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_ESERVICETYPE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_ESHAPERATEOBJ", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EUNKOWNPSOBJ", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_GENERIC_ERROR", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_NO_RECEIVERS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_NO_SENDERS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_POLICY_FAILURE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_RECEIVERS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_REQUEST_CONFIRMED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_RESERVED_PETYPE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_SENDERS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_TRAFFIC_CTRL_ERROR", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("REFUSED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SERVICE_NOT_FOUND", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYSCALLFAILURE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYSNOTREADY", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("TRY_AGAIN", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("TYPE_NOT_FOUND", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("VERNOTSUPPORTED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build())

	// Define module std::sort
	module = moduleCollection["std::sort"]
	module.AddFunction(symbols.NewFunctionBuilder("binarysearch", symbols.NewBaseTypeBuilder("usz", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/binarysearch.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/binarysearch.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/binarysearch.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/binarysearch.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/binarysearch.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::sort
	module = moduleCollection["std::sort"]
	module.AddFunction(symbols.NewFunctionBuilder("countingsort", symbols.NewTypeBuilder("", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("key_fn", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insertionsort_indexed", symbols.NewTypeBuilder("", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("quicksort_indexed", symbols.NewTypeBuilder("", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::sort::cs
	module = moduleCollection["std::sort::cs"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"KeyFn": symbols.NewGenericParameter("KeyFn", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type":  symbols.NewGenericParameter("Type", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddVariable(symbols.NewVariableBuilder("KEY_BY_VALUE", symbols.NewTypeBuilder("bool", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).AddVariable(symbols.NewVariableBuilder("LIST_HAS_REF", symbols.NewTypeBuilder("bool", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_KEY_FN", symbols.NewTypeBuilder("bool", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).AddDef(symbols.NewDefBuilder("CmpCallback", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithResolvesTo("fn int(ElementType*, ElementType*, KeyFn)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Counts", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("usz[256]", "std::sort::cs").IsCollectionWithSize(256).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ElementType", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::sort::cs").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Indexs", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("char[256]", "std::sort::cs").IsCollectionWithSize(256).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("KeyFnReturnType", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithResolvesToType(symbols.NewTypeBuilder("ElementType", "std::sort::cs").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ranges", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("usz[257]", "std::sort::cs").IsCollectionWithSize(257).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("csort", symbols.NewBaseTypeBuilder("void", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewGenericTypeBuilder("Type", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("low", symbols.NewBaseTypeBuilder("usz", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("high", symbols.NewBaseTypeBuilder("usz", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("key_fn", symbols.NewGenericTypeBuilder("KeyFn", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("byte_idx", symbols.NewBaseTypeBuilder("uint", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).WithoutSourceCode().Build())

	// Define module std::sort
	module = moduleCollection["std::sort"]
	module.AddFunction(symbols.NewFunctionBuilder("insertionsort", symbols.NewTypeBuilder("", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/insertionsort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/insertionsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/insertionsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/insertionsort.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::sort::is
	module = moduleCollection["std::sort::is"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"CmpFn":   symbols.NewGenericParameter("CmpFn", "std::sort::is", "<stdlib-path>/sort/insertionsort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Context": symbols.NewGenericParameter("Context", "std::sort::is", "<stdlib-path>/sort/insertionsort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type":    symbols.NewGenericParameter("Type", "std::sort::is", "<stdlib-path>/sort/insertionsort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddDef(symbols.NewDefBuilder("ElementType", "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::sort::is").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("isort", symbols.NewBaseTypeBuilder("void", "std::sort::is").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewGenericTypeBuilder("Type", "std::sort::is").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("low", symbols.NewBaseTypeBuilder("usz", "std::sort::is").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("high", symbols.NewBaseTypeBuilder("usz", "std::sort::is").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("comp", symbols.NewGenericTypeBuilder("CmpFn", "std::sort::is").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewGenericTypeBuilder("Context", "std::sort::is").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").Build()).WithoutSourceCode().Build())

	// Define module std::sort
	module = moduleCollection["std::sort"]
	module.AddFunction(symbols.NewFunctionBuilder("quicksort", symbols.NewTypeBuilder("", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("quickselect", symbols.NewTypeBuilder("", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("k", symbols.NewBaseTypeBuilder("isz", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::sort::qs
	module = moduleCollection["std::sort::qs"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"CmpFn":   symbols.NewGenericParameter("CmpFn", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Context": symbols.NewGenericParameter("Context", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type":    symbols.NewGenericParameter("Type", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddStruct(symbols.NewStructBuilder("StackElementItem", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithStructMember("low", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithStructMember("high", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ElementType", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::sort::qs").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Stack", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithResolvesToType(symbols.NewTypeBuilder("StackElementItem[64]", "std::sort::qs").IsCollectionWithSize(64).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("qsort", symbols.NewBaseTypeBuilder("void", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewGenericTypeBuilder("Type", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("low", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("high", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewGenericTypeBuilder("CmpFn", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewGenericTypeBuilder("Context", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("qselect", symbols.NewTypeBuilder("ElementType!", "std::sort::cs").IsOptional().Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewGenericTypeBuilder("Type", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("low", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("high", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("k", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewGenericTypeBuilder("CmpFn", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewGenericTypeBuilder("Context", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@partition", symbols.NewTypeBuilder("", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewGenericTypeBuilder("Type", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("l", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("h", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewGenericTypeBuilder("CmpFn", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewGenericTypeBuilder("Context", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::sort
	module = moduleCollection["std::sort"]
	module.AddFunction(symbols.NewFunctionBuilder("@len_from_list", symbols.NewBaseTypeBuilder("usz", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len_from_list", symbols.NewBaseTypeBuilder("usz", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_sortable", symbols.NewBaseTypeBuilder("bool", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_valid_context", symbols.NewBaseTypeBuilder("bool", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_valid_cmp_fn", symbols.NewBaseTypeBuilder("bool", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg2", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_cmp_key_fn", symbols.NewBaseTypeBuilder("bool", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").WithArgument(symbols.NewVariableBuilder("$arg0", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::sort
	module = moduleCollection["std::sort"]
	module.AddFunction(symbols.NewFunctionBuilder("is_sorted", symbols.NewBaseTypeBuilder("bool", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").Build()).WithArgument(symbols.NewVariableBuilder("ctx", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@sort_cmp", symbols.NewBaseTypeBuilder("int", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").Build()).WithArgument(symbols.NewVariableBuilder("pos", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").Build()).WithArgument(symbols.NewVariableBuilder("ctx", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::thread::threadpool
	module = moduleCollection["std::thread::threadpool"]
	module.AddStruct(symbols.NewStructBuilder("FixedThreadPool", "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("mu", symbols.NewTypeBuilder("Mutex", "std::thread").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("queue", symbols.NewTypeBuilder("QueueItem[]", "std::thread::pool").IsUnsizedCollection().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("qindex", symbols.NewBaseTypeBuilder("usz", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("num_threads", symbols.NewBaseTypeBuilder("usz", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("initialized", symbols.NewBaseTypeBuilder("bool", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("stop", symbols.NewBaseTypeBuilder("bool", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("stop_now", symbols.NewBaseTypeBuilder("bool", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("pool", symbols.NewTypeBuilder("Thread[]", "std::thread").IsUnsizedCollection().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("notify", symbols.NewTypeBuilder("ConditionVariable", "std::thread").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("QueueItem", "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("func", symbols.NewTypeBuilder("ThreadPoolFn", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("args", symbols.NewBaseTypeBuilder("any[]", "std::thread::threadpool").IsUnsizedCollection().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ThreadPoolFn", "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithResolvesTo("fn void(any[] args)").WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("ThreadPoolResult", "", "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithConstant(symbols.NewFaultConstantBuilder("QUEUE_FULL", "std::thread::threadpool", "../../../assets/c3c/lib/std/threads/fixed_pool.c3").WithFaultName("ThreadPoolResult").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void!", "std::thread::threadpool").IsOptional().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithTypeIdentifier("FixedThreadPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedThreadPool", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("threads", symbols.NewBaseTypeBuilder("usz", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("queue_size", symbols.NewBaseTypeBuilder("usz", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void!", "std::thread::threadpool").IsOptional().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithTypeIdentifier("FixedThreadPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedThreadPool", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stop_and_destroy", symbols.NewBaseTypeBuilder("void!", "std::thread::threadpool").IsOptional().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithTypeIdentifier("FixedThreadPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedThreadPool", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("FixedThreadPool.@shutdown", symbols.NewBaseTypeBuilder("void!", "std::thread::threadpool").IsOptional().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedThreadPool", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void!", "std::thread::threadpool").IsOptional().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithTypeIdentifier("FixedThreadPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedThreadPool", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("ThreadPoolFn", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("", "").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("process_work", symbols.NewBaseTypeBuilder("int", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithArgument(symbols.NewVariableBuilder("self_arg", symbols.NewBaseTypeBuilder("void*", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_qitem", symbols.NewBaseTypeBuilder("void", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithArgument(symbols.NewVariableBuilder("item", symbols.NewTypeBuilder("QueueItem", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithoutSourceCode().Build())

	// Define module std::thread::cpu
	module = moduleCollection["std::thread::cpu"]
	module.AddVariable(symbols.NewVariableBuilder("CTL_DEBUG", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_HW", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_KERN", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_MACHDEP", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_MAXID", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_NET", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_UNSPEC", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_USER", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_VFS", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_VM", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_BUS_FREQ", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_BYTEORDER", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_CACHELINE", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_CPU_FREQ", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_DISKNAMES", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_DISKSTATS", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_EPOCH", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_FLOATINGPT", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L1DCACHESIZE", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L1ICACHESIZE", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L2CACHESIZE", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L2SETTINGS", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L3CACHESIZE", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L3SETTINGS", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MACHINE", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MACHINE_ARCH", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MAXID", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MODEL", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_NCPU", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PAGESIZE", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PHYSMEM", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_USERMEM", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_VECTORUNIT", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddFunction(symbols.NewFunctionBuilder("native_cpu", symbols.NewBaseTypeBuilder("uint", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_cpu", symbols.NewBaseTypeBuilder("uint", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_cpu", symbols.NewBaseTypeBuilder("uint", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").WithoutSourceCode().Build())

	// Define module std::thread::os
	module = moduleCollection["std::thread::os"]
	module.AddDistinct(symbols.NewDistinctBuilder("NativeConditionVariable", "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("int", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("int", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("NativeOnceFlag", "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("int", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("NativeThread", "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("int", "std::thread::os").Build()).WithoutSourceCode().Build())

	// Define module std::thread::os
	module = moduleCollection["std::thread::os"]
	module.AddVariable(symbols.NewVariableBuilder("_thread_data", symbols.NewTypeBuilder("PosixThreadData*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).AddStruct(symbols.NewStructBuilder("NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithStructMember("mutex", symbols.NewTypeBuilder("Pthread_mutex_t", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithStructMember("initialized", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("PosixThreadData", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithStructMember("thread_fn", symbols.NewTypeBuilder("ThreadFn", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithStructMember("arg", symbols.NewBaseTypeBuilder("void*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("NativeConditionVariable", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithResolvesToType(symbols.NewTypeBuilder("Pthread_cond_t", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("NativeOnceFlag", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithResolvesToType(symbols.NewTypeBuilder("Pthread_once_t", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("NativeThread", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithResolvesToType(symbols.NewTypeBuilder("Pthread_t", "std::os::posix").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeMutex", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("MutexType", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_initialized", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeMutex", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeMutex", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lock", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeMutex", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lock_timeout", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeMutex", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("ulong", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("try_lock", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeMutex", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlock", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeMutex", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("signal", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("broadcast", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait_timeout", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("ulong", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_thread_data", symbols.NewBaseTypeBuilder("void", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("callback", symbols.NewBaseTypeBuilder("void*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("void*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("thread_fn", symbols.NewTypeBuilder("ThreadFn", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("void*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("detach", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_exit", symbols.NewBaseTypeBuilder("void", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithArgument(symbols.NewVariableBuilder("result", symbols.NewBaseTypeBuilder("int", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_current", symbols.NewTypeBuilder("NativeThread", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("NativeThread", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("join", symbols.NewBaseTypeBuilder("int!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("call_once", symbols.NewBaseTypeBuilder("void", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeOnceFlag").WithArgument(symbols.NewVariableBuilder("flag", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("OnceFn", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_yield", symbols.NewBaseTypeBuilder("void", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_sleep_nano", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithArgument(symbols.NewVariableBuilder("nano", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build())

	// Define module std::thread::os
	module = moduleCollection["std::thread::os"]
	module.AddVariable(symbols.NewVariableBuilder("CONDITION_EVENT_ALL", symbols.NewTypeBuilder("int", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONDITION_EVENT_ONE", symbols.NewTypeBuilder("int", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).AddStruct(symbols.NewStructBuilder("NativeConditionVariable", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("event_one", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("event_all", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("events", symbols.NewTypeBuilder("Win32_HANDLE[2]", "std::os::win32").IsCollectionWithSize(2).Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("waiters_count", symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("waiters_count_lock", symbols.NewTypeBuilder("Win32_CRITICAL_SECTION", "std::os::win32").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("critical_section", symbols.NewTypeBuilder("Win32_CRITICAL_SECTION", "std::os::win32").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("handle", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("locks", symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("recursive", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("timed", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("NativeOnceFlag", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("status", symbols.NewBaseTypeBuilder("int", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("lock", symbols.NewTypeBuilder("Win32_CRITICAL_SECTION", "std::os::win32").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("NativeThread", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("MutexType", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lock", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lock_timeout", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("ulong", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("try_lock", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlock", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("signal", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("broadcast", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("timedwait", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("NativeConditionVariable*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait_timeout", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("ulong", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("ThreadFn", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewBaseTypeBuilder("void*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("detach", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_exit", symbols.NewBaseTypeBuilder("void", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithArgument(symbols.NewVariableBuilder("result", symbols.NewBaseTypeBuilder("int", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_yield", symbols.NewBaseTypeBuilder("void", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("call_once", symbols.NewBaseTypeBuilder("void", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeOnceFlag").WithArgument(symbols.NewVariableBuilder("flag", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("OnceFn", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("join", symbols.NewBaseTypeBuilder("int!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_current", symbols.NewTypeBuilder("NativeThread", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("NativeThread", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_sleep_nano", symbols.NewBaseTypeBuilder("void!", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithArgument(symbols.NewVariableBuilder("ns", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build())

	// Define module std::thread::pool
	module = moduleCollection["std::thread::pool"]
	module.AddStruct(symbols.NewStructBuilder("QueueItem", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("func", symbols.NewTypeBuilder("ThreadFn", "std::thread").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("arg", symbols.NewBaseTypeBuilder("void*", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("ThreadPool", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("mu", symbols.NewTypeBuilder("Mutex", "std::thread").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("queue", symbols.NewTypeBuilder("QueueItem[]", "std::thread::threadpool").IsUnsizedCollection().Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("qindex", symbols.NewBaseTypeBuilder("usz", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("num_threads", symbols.NewBaseTypeBuilder("usz", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("initialized", symbols.NewBaseTypeBuilder("bool", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("stop", symbols.NewBaseTypeBuilder("bool", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("stop_now", symbols.NewBaseTypeBuilder("bool", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("pool", symbols.NewTypeBuilder("Thread[]", "std::thread").IsUnsizedCollection().Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("notify", symbols.NewTypeBuilder("ConditionVariable", "std::thread").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void!", "std::thread::pool").IsOptional().Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithTypeIdentifier("ThreadPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ThreadPool", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void!", "std::thread::pool").IsOptional().Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithTypeIdentifier("ThreadPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ThreadPool", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stop_and_destroy", symbols.NewBaseTypeBuilder("void!", "std::thread::pool").IsOptional().Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithTypeIdentifier("ThreadPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ThreadPool", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ThreadPool.@shutdown", symbols.NewBaseTypeBuilder("void!", "std::thread::pool").IsOptional().Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ThreadPool", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg1", symbols.NewTypeBuilder("", "").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void!", "std::thread::pool").IsOptional().Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithTypeIdentifier("ThreadPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ThreadPool", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("ThreadFn", "std::thread").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("void*", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("process_work", symbols.NewBaseTypeBuilder("int", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("void*", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithoutSourceCode().Build())

	// Define module std::thread
	module = moduleCollection["std::thread"]
	module.AddVariable(symbols.NewVariableBuilder("MUTEX_PLAIN", symbols.NewTypeBuilder("MutexType", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUTEX_RECURSIVE", symbols.NewTypeBuilder("MutexType", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUTEX_TIMED", symbols.NewTypeBuilder("MutexType", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).AddDef(symbols.NewDefBuilder("OnceFn", "std::thread", "<stdlib-path>/threads/thread.c3").WithResolvesTo("fn void()").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ThreadFn", "std::thread", "<stdlib-path>/threads/thread.c3").WithResolvesTo("fn int(void* arg)").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("ConditionVariable", "std::thread", "<stdlib-path>/threads/thread.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("NativeConditionVariable", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Mutex", "std::thread", "<stdlib-path>/threads/thread.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("NativeMutex", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("MutexType", "std::thread", "<stdlib-path>/threads/thread.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("int", "std::thread").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("OnceFlag", "std::thread", "<stdlib-path>/threads/thread.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("NativeOnceFlag", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("RecursiveMutex", "std::thread", "<stdlib-path>/threads/thread.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Mutex", "std::thread").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Thread", "std::thread", "<stdlib-path>/threads/thread.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("NativeThread", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("TimedMutex", "std::thread", "<stdlib-path>/threads/thread.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Mutex", "std::thread").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("TimedRecursiveMutex", "std::thread", "<stdlib-path>/threads/thread.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Mutex", "std::thread").Build()).WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("ThreadFault", "", "std::thread", "<stdlib-path>/threads/thread.c3").WithConstant(symbols.NewFaultConstantBuilder("INIT_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("DESTROY_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("LOCK_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("LOCK_TIMEOUT", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNLOCK_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("SIGNAL_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("WAIT_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("WAIT_TIMEOUT", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("DETACH_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("JOIN_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).WithConstant(symbols.NewFaultConstantBuilder("INTERRUPTED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("ThreadFault").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.init", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TimedMutex.init", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("RecursiveMutex.init", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TimedRecursiveMutex.init", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.destroy", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.lock", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TimedMutex.lock_timeout", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("ulong", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TimedRecursiveMutex.lock_timeout", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("ulong", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.try_lock", symbols.NewBaseTypeBuilder("bool", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.unlock", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.init", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.destroy", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.signal", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.broadcast", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.wait", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("Mutex*", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.wait_timeout", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("Mutex*", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("ulong", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Thread.create", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("thread_fn", symbols.NewTypeBuilder("ThreadFn", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("void*", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Thread.detach", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Thread.join", symbols.NewBaseTypeBuilder("int!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Thread.equals", symbols.NewBaseTypeBuilder("bool", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Thread", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("OnceFlag.call", symbols.NewBaseTypeBuilder("void", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("flag", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("OnceFn", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("yield", symbols.NewBaseTypeBuilder("void", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("current", symbols.NewTypeBuilder("Thread", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exit", symbols.NewBaseTypeBuilder("void", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("result", symbols.NewBaseTypeBuilder("int", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleep", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("d", symbols.NewTypeBuilder("Duration", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleep_ms", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("ulong", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleep_ns", symbols.NewBaseTypeBuilder("void!", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("ns", symbols.NewTypeBuilder("NanoDuration", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::time::clock
	module = moduleCollection["std::time::clock"]
	module.AddFunction(symbols.NewFunctionBuilder("now", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mark", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").WithTypeIdentifier("Clock").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_now", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").WithTypeIdentifier("Clock").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").Build()).WithoutSourceCode().Build())

	// Define module std::time::datetime
	module = moduleCollection["std::time::datetime"]
	module.AddFunction(symbols.NewFunctionBuilder("now", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_date", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgument(symbols.NewVariableBuilder("year", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("month", symbols.NewTypeBuilder("Month", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("day", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("hour", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("sec", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("us", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_date_tz", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgument(symbols.NewVariableBuilder("year", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("month", symbols.NewTypeBuilder("Month", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("day", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("hour", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("sec", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("us", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_local", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("with_gmt_offset", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("with_gmt_offset", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_gmt_offset", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_gmt_offset", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_date", symbols.NewBaseTypeBuilder("void", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("year", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("month", symbols.NewTypeBuilder("Month", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("day", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("hour", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("sec", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("us", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_time", symbols.NewBaseTypeBuilder("void", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_seconds", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("seconds", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_minutes", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("minutes", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_hours", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("hours", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_days", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("days", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_weeks", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("weeks", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_years", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("years", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_months", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("months", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_seconds", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("seconds", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_minutes", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("minutes", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_hours", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("hours", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_days", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("days", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_weeks", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("weeks", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_years", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("years", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_months", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("months", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_time", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_time_tz", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_time", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("after", symbols.NewBaseTypeBuilder("bool", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("before", symbols.NewBaseTypeBuilder("bool", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compare_to", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_years", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("from", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_sec", symbols.NewBaseTypeBuilder("double", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("from", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_us", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("from", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build())

	// Define module std::time::datetime
	module = moduleCollection["std::time::datetime"]
	module.AddEnum(symbols.NewEnumBuilder("DateTimeFormat", "", "std::time::datetime", "<stdlib-path>/time/format.c3").WithEnumerator(symbols.NewEnumeratorBuilder("ANSIC", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UNIXDATE", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RUBYDATE", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC822", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC822Z", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC850", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC1123", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC1123Z", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC3339", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC3339Z", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC3339MS", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC3339ZMS", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DATETIME", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DATEONLY", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TIMEONLY", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("DateTimeFormat", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("dt", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithArgument(symbols.NewVariableBuilder("dt_format", symbols.NewTypeBuilder("DateTimeFormat", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("dt", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithArgument(symbols.NewVariableBuilder("dt_format", symbols.NewTypeBuilder("DateTimeFormat", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("dt", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("dt_format", symbols.NewTypeBuilder("DateTimeFormat", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("dt_format", symbols.NewTypeBuilder("DateTimeFormat", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("dt_format", symbols.NewTypeBuilder("DateTimeFormat", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("dt_format", symbols.NewTypeBuilder("DateTimeFormat", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("dt_format", symbols.NewTypeBuilder("DateTimeFormat", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("dt_format", symbols.NewTypeBuilder("DateTimeFormat", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_numeric_tzsuffix", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithArgument(symbols.NewVariableBuilder("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_numeric_tzsuffix_colon", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithArgument(symbols.NewVariableBuilder("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithoutSourceCode().Build())

	// Define module std::time::os
	module = moduleCollection["std::time::os"]
	module.AddStruct(symbols.NewStructBuilder("Darwin_mach_timebase_info", "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithStructMember("numer", symbols.NewBaseTypeBuilder("uint", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithStructMember("denom", symbols.NewBaseTypeBuilder("uint", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Darwin_mach_timebase_info_data_t", "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithResolvesToType(symbols.NewTypeBuilder("Darwin_mach_timebase_info", "std::time::os").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Darwin_mach_timebase_info_t", "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithResolvesToType(symbols.NewTypeBuilder("Darwin_mach_timebase_info", "std::time::os").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mach_timebase_info", symbols.NewBaseTypeBuilder("void", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithArgument(symbols.NewVariableBuilder("timebase", symbols.NewTypeBuilder("Darwin_mach_timebase_info_data_t*", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mach_absolute_time", symbols.NewBaseTypeBuilder("ulong", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_clock", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithoutSourceCode().Build())

	// Define module std::time::os
	module = moduleCollection["std::time::os"]
	module.AddVariable(symbols.NewVariableBuilder("CLOCK_BOOTTIME", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_BOOTTIME_ALARM", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC_COARSE", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC_FAST", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC_PRECISE", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC_RAW", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC_RAW_APPROX", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_PROCESS_CPUTIME_ID", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_PROF", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_REALTIME", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_REALTIME_ALARM", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_REALTIME_COARSE", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_REALTIME_FAST", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_REALTIME_PRECISE", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_SECOND", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_TAI", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_THREAD_CPUTIME_ID", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_UPTIME", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_UPTIME_FAST", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_UPTIME_PRECISE", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_UPTIME_RAW", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_UPTIME_RAW_APPROX", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_VIRTUAL", symbols.NewTypeBuilder("", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).AddFunction(symbols.NewFunctionBuilder("clock_gettime", symbols.NewBaseTypeBuilder("void", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").WithArgument(symbols.NewVariableBuilder("type", symbols.NewBaseTypeBuilder("int", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("TimeSpec*", "libc").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_timestamp", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_clock", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").WithoutSourceCode().Build())

	// Define module std::time::os
	module = moduleCollection["std::time::os"]
	module.AddVariable(symbols.NewVariableBuilder("WINDOWS_TICK_US", symbols.NewTypeBuilder("ulong", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("WIN_TO_UNIX_EPOCH_US", symbols.NewTypeBuilder("ulong", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").Build()).AddFunction(symbols.NewFunctionBuilder("win32_GetSystemTimeAsFileTime", symbols.NewBaseTypeBuilder("void", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("Win32_FILETIME*", "std::os::win32").Build(), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("win32_QueryPerformanceFrequency", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").WithArgument(symbols.NewVariableBuilder("lpFrequency", symbols.NewTypeBuilder("Win32_LARGE_INTEGER*", "std::os::win32").Build(), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("win32_QueryPerformanceCounter", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").WithArgument(symbols.NewVariableBuilder("lpPerformanceCount", symbols.NewTypeBuilder("Win32_LARGE_INTEGER*", "std::os::win32").Build(), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_clock", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_timestamp", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").WithoutSourceCode().Build())

	// Define module std::time
	module = moduleCollection["std::time"]
	module.AddVariable(symbols.NewVariableBuilder("DAY", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("FAR_FUTURE", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("FAR_PAST", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("FOREVER", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("HOUR", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("MIN", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("MONTH", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("MS", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("SEC", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("US", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("WEEK", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("YEAR", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddStruct(symbols.NewStructBuilder("DateTime", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("usec", symbols.NewBaseTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("sec", symbols.NewBaseTypeBuilder("char", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("min", symbols.NewBaseTypeBuilder("char", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("hour", symbols.NewBaseTypeBuilder("char", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("day", symbols.NewBaseTypeBuilder("char", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("month", symbols.NewTypeBuilder("Month", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("weekday", symbols.NewTypeBuilder("Weekday", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("year", symbols.NewBaseTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("year_day", symbols.NewBaseTypeBuilder("ushort", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("time", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TzDateTime", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("date_time", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("usec", symbols.NewBaseTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("sec", symbols.NewBaseTypeBuilder("char", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("min", symbols.NewBaseTypeBuilder("char", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("hour", symbols.NewBaseTypeBuilder("char", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("day", symbols.NewBaseTypeBuilder("char", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("month", symbols.NewTypeBuilder("Month", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("weekday", symbols.NewTypeBuilder("Weekday", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("year", symbols.NewBaseTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("year_day", symbols.NewBaseTypeBuilder("ushort", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("time", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Clock", "std::time", "<stdlib-path>/time/time.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::time").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Duration", "std::time", "<stdlib-path>/time/time.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("long", "std::time").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("NanoDuration", "std::time", "<stdlib-path>/time/time.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("long", "std::time").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Time", "std::time", "<stdlib-path>/time/time.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("long", "std::time").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("Month", "char", "std::time", "<stdlib-path>/time/time.c3").WithEnumerator(symbols.NewEnumeratorBuilder("JANUARY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FEBRUARY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MARCH", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("APRIL", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("JUNE", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("JULY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AUGUST", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SEPTEMBER", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OCTOBER", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NOVEMBER", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DECEMBER", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).Build()).AddEnum(symbols.NewEnumBuilder("Weekday", "char", "std::time", "<stdlib-path>/time/time.c3").WithEnumerator(symbols.NewEnumeratorBuilder("MONDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TUESDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WEDNESDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("THURSDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FRIDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SATURDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SUNDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Weekday").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("us", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ms", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sec", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("min", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hour", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_float", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("double", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("now", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_seconds", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("seconds", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_minutes", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("minutes", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_hours", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("hours", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_days", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("days", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_weeks", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("weeks", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_duration", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compare_to", symbols.NewBaseTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_seconds", symbols.NewBaseTypeBuilder("double", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_us", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_sec", symbols.NewBaseTypeBuilder("double", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_min", symbols.NewBaseTypeBuilder("double", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_hour", symbols.NewBaseTypeBuilder("double", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_days", symbols.NewBaseTypeBuilder("double", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_weeks", symbols.NewBaseTypeBuilder("double", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_sec", symbols.NewBaseTypeBuilder("double", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("NanoDuration").WithArgument(symbols.NewVariableBuilder("nd", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_ms", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("NanoDuration").WithArgument(symbols.NewVariableBuilder("nd", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_duration", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("NanoDuration").WithArgument(symbols.NewVariableBuilder("nd", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_nano", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Duration").WithArgument(symbols.NewVariableBuilder("td", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_ms", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Duration").WithArgument(symbols.NewVariableBuilder("td", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz!", "std::time").IsOptional().Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("NanoDuration").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build())
	return parsedModules
}
